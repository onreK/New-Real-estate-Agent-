'use client';

import { useState, useEffect, useRef } from 'react';
import { useRouter } from 'next/navigation';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import ConnectionsTab from '@/components/ConnectionsTab';
import { 
  Mail, 
  Settings, 
  Send, 
  Users, 
  TrendingUp, 
  Clock, 
  ArrowLeft,
  MessageSquare,
  Bot,
  FileText,
  Sparkles,
  Zap,
  Target,
  CheckCircle,
  AlertCircle,
  RefreshCw,
  Eye,
  ExternalLink,
  Link as LinkIcon,
  Globe,
  BarChart3,
  Wrench,
  Volume2,
  VolumeX,
  Filter,
  Inbox,
  Shield,
  Building,
  MessageCircle,
  Phone,
  Archive,
  X,
  BookOpen
} from 'lucide-react';

export default function CompleteEmailSystem() {
  const router = useRouter();
  const [activeTab, setActiveTab] = useState('dashboard');
  const refreshIntervalRef = useRef(null);
  
  // Existing functionality states
  const [conversations, setConversations] = useState([]);
  const [gmailEmails, setGmailEmails] = useState([]);
  const [selectedConversation, setSelectedConversation] = useState(null);
  const [selectedGmailEmail, setSelectedGmailEmail] = useState(null);
  const [newMessage, setNewMessage] = useState('');
  const [loading, setLoading] = useState(true);
  const [gmailLoading, setGmailLoading] = useState(false);
  const [responding, setResponding] = useState(false);
  const [gmailConnection, setGmailConnection] = useState(null);
  const [lastRefresh, setLastRefresh] = useState(new Date());
  const [saving, setSaving] = useState(false);
  const [reconnecting, setReconnecting] = useState(false);
  
  const [stats, setStats] = useState({
    totalConversations: 0,
    activeToday: 0,
    responseRate: 0,
    avgResponseTime: 0
  });

  // Dashboard Settings (simplified)
  const [dashboardSettings, setDashboardSettings] = useState({
    autoRefresh: true,
    refreshInterval: 30
  });

  // Business Profile & AI Settings
  const [businessProfile, setBusinessProfile] = useState({
    name: '',
    industry: '',
    expertise: ''
  });

  const [aiSettings, setAiSettings] = useState({
    communicationTone: 'professional',
    knowledgeBase: '', // NEW: Business Knowledge Base
    hotLeadKeywords: ['urgent', 'asap', 'budget', 'ready'],
    behaviors: {
      includeAvailability: true,
      askQualifyingQuestions: true,
      hotLeadAlerts: true,
      smsLeadAlerts: false
    }
  });

  // Automation Settings
  const [automationSettings, setAutomationSettings] = useState({
    responseControl: {
      aiResponses: true,
      autoSend: false,
      businessHours: true,
      urgentPriority: true
    },
    emailFiltering: {
      autoArchiveSpam: true,
      blockMassEmails: true,
      personalOnly: false,
      skipAutoGenerated: true
    },
    businessRules: {
      blacklist: [],
      whitelist: [],
      customKeywords: []
    }
  });

  // Form states for business rules
  const [newBlacklistItem, setNewBlacklistItem] = useState('');
  const [newWhitelistItem, setNewWhitelistItem] = useState('');
  const [newCustomKeyword, setNewCustomKeyword] = useState('');

  // Tab configuration
  const tabs = [
    { 
      id: 'dashboard', 
      label: 'Dashboard', 
      icon: BarChart3,
      description: 'Real-time Gmail conversations and AI responses'
    },
    { 
      id: 'ai-settings', 
      label: 'AI Settings', 
      icon: Bot,
      description: 'Business profile, communication tone, and AI behavior'
    },
    { 
      id: 'automation', 
      label: 'Automation', 
      icon: Wrench,
      description: 'Gmail connection, email filtering, and automation rules'
    },
    { 
      id: 'connections', 
      label: 'Connections', 
      icon: Settings,
      description: 'Manage Gmail and domain email connections'
    }
  ];

  // Load data only once on mount and handle URL parameters
  useEffect(() => {
    loadInitialData();
    handleUrlParameters();
  }, []);

  // Handle URL parameters for tab activation and messages
  const handleUrlParameters = () => {
    const urlParams = new URLSearchParams(window.location.search);
    const tab = urlParams.get('tab');
    const success = urlParams.get('success');
    const error = urlParams.get('error');
    
    console.log('🔍 URL Parameters:', { tab, success, error });
    
    // Set active tab if specified in URL
    if (tab && tabs.some(t => t.id === tab)) {
      console.log('🎯 Setting active tab to:', tab);
      setActiveTab(tab);
    }
    
    // Handle success messages
    if (success === 'gmail_connected') {
      console.log('✅ Gmail connection successful');
      // Optionally show a success message or notification
    }
    
    // Handle error messages
    if (error) {
      console.log('❌ OAuth error:', error);
      // Optionally show an error message or notification
    }
    
    // Clear URL parameters after processing to clean up the URL
    if (tab || success || error) {
      const newUrl = window.location.pathname;
      window.history.replaceState({}, document.title, newUrl);
      console.log('🧹 Cleaned URL parameters');
    }
  };

  // Auto-refresh logic (simplified - always enabled)
  useEffect(() => {
    // Clear any existing interval
    if (refreshIntervalRef.current) {
      clearInterval(refreshIntervalRef.current);
      refreshIntervalRef.current = null;
    }

    // Set up auto-refresh for dashboard tab when Gmail connected
    if (activeTab === 'dashboard' && gmailConnection && !loading) {
      refreshIntervalRef.current = setInterval(() => {
        checkGmailEmails(true); // Silent refresh
        setLastRefresh(new Date());
      }, dashboardSettings.refreshInterval * 1000);
    }

    // Cleanup
    return () => {
      if (refreshIntervalRef.current) {
        clearInterval(refreshIntervalRef.current);
        refreshIntervalRef.current = null;
      }
    };
  }, [activeTab, gmailConnection?.email, dashboardSettings.refreshInterval, loading]);

  const loadInitialData = async () => {
    setLoading(true);
    try {
      await Promise.all([
        loadEmailData(),
        checkGmailConnection(),
        loadAISettings()
      ]);
    } catch (error) {
      console.error('Error loading initial data:', error);
    } finally {
      setLoading(false);
    }
  };

  const loadEmailData = async () => {
    try {
      const convResponse = await fetch('/api/customer/email-conversations');
      if (convResponse.ok) {
        const convData = await convResponse.json();
        setConversations(convData.conversations || []);
      }

      const statsResponse = await fetch('/api/customer/email-stats');
      if (statsResponse.ok) {
        const statsData = await statsResponse.json();
        setStats(statsData.stats || stats);
      }
    } catch (error) {
      console.error('Error loading email data:', error);
    }
  };

  const checkGmailConnection = async () => {
    try {
      const response = await fetch('/api/gmail/status');
      if (response.ok) {
        const data = await response.json();
        
        if (data.connected && data.connection) {
          setGmailConnection(data.connection);
          setStats(prev => ({ ...prev, responseRate: 95 }));
        } else {
          setGmailConnection(null);
        }
      }
    } catch (error) {
      console.error('Error checking Gmail connection:', error);
      setGmailConnection(null);
    }
  };

  const loadAISettings = async () => {
    try {
      const response = await fetch('/api/customer/ai-settings');
      if (response.ok) {
        const data = await response.json();
        if (data.settings) {
          // Map the existing settings to our new structure
          setBusinessProfile({
            name: data.customer?.business_name || '',
            industry: data.settings.expertise || '',
            expertise: data.settings.specialties || ''
          });
          
          setAiSettings(prev => ({
            ...prev,
            communicationTone: data.settings.tone || 'professional',
            knowledgeBase: data.settings.knowledge_base || '', // NEW: Load knowledge base
            behaviors: {
              ...prev.behaviors,
              includeAvailability: data.settings.include_availability !== false,
              askQualifyingQuestions: data.settings.ask_qualifying_questions !== false,
              hotLeadAlerts: data.settings.alert_hot_leads !== false
            }
          }));

          if (data.settings.hot_lead_keywords) {
            setAiSettings(prev => ({
              ...prev,
              hotLeadKeywords: Array.isArray(data.settings.hot_lead_keywords) 
                ? data.settings.hot_lead_keywords 
                : prev.hotLeadKeywords
            }));
          }
        }
      } else if (response.status === 404) {
        console.log('AI settings API not found - using defaults');
      }
    } catch (error) {
      console.log('AI settings not available - using defaults');
    }
  };

  // FIXED: Complete saveAllSettings function with proper data format
  const saveAllSettings = async () => {
    setSaving(true);
    try {
      // Prepare the settings in the correct format for the API
      const settingsToSave = {
        tone: aiSettings.communicationTone,
        expertise: businessProfile.industry,
        specialties: businessProfile.expertise,
        response_style: 'Knowledge-based responses with business expertise',
        knowledge_base: aiSettings.knowledgeBase, // FIXED: correct field name
        hot_lead_keywords: aiSettings.hotLeadKeywords,
        auto_response_enabled: automationSettings.responseControl.aiResponses,
        alert_hot_leads: aiSettings.behaviors.hotLeadAlerts,
        include_availability: aiSettings.behaviors.includeAvailability,
        ask_qualifying_questions: aiSettings.behaviors.askQualifyingQuestions,
        require_approval: !automationSettings.responseControl.autoSend,
        
        // Enhanced settings
        email_filtering: automationSettings.emailFiltering,
        response_rules: automationSettings.responseControl,
        monitoring: dashboardSettings
      };

      console.log('💾 Saving settings:', settingsToSave);

      const response = await fetch('/api/customer/ai-settings', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(settingsToSave)
      });

      if (response.ok) {
        const result = await response.json();
        console.log('✅ Settings saved successfully:', result);
        alert('✅ Settings saved successfully! Your AI now has your business knowledge.');
      } else {
        const errorData = await response.json();
        console.error('❌ Failed to save settings:', errorData);
        if (errorData.missing_column === 'knowledge_base') {
          alert('❌ Database needs to be updated! Please contact support.');
        } else {
          alert(`❌ Failed to save settings: ${errorData.error || 'Unknown error'}`);
        }
      }
    } catch (error) {
      console.error('❌ Error saving settings:', error);
      alert('❌ Error saving settings. Please try again.');
    } finally {
      setSaving(false);
    }
  };

  const connectGmail = () => {
    if (gmailConnection) {
      setReconnecting(true);
      console.log('🔗 Reconnecting Gmail account...');
    } else {
      console.log('🔗 Connecting Gmail account...');
    }
    window.location.href = '/api/auth/google';
  };

  const checkGmailEmails = async (silent = false) => {
    if (!gmailConnection) {
      console.log('No Gmail connection available');
      return;
    }
    
    if (!silent) setGmailLoading(true);
    try {
      const response = await fetch('/api/gmail/monitor', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'check',
          emailAddress: gmailConnection.email
        })
      });

      if (response.ok) {
        const data = await response.json();
        setGmailEmails(data.emails || []);
        setStats(prev => ({
          ...prev,
          totalConversations: (data.emails?.length || 0) + conversations.length,
          activeToday: data.emails?.length || 0
        }));
        
        if (!silent) setLastRefresh(new Date());
      } else if (response.status === 401) {
        console.log('⚠️ Gmail authentication expired - please reconnect');
        setGmailConnection(null);
      } else if (response.status === 404) {
        console.log('⚠️ Gmail monitor API not available');
      } else {
        console.error('Gmail check failed:', response.status);
      }
    } catch (error) {
      console.error('Error checking Gmail emails:', error);
    } finally {
      if (!silent) setGmailLoading(false);
    }
  };

  const sendAIResponse = async (emailId, preview = false) => {
    if (!gmailConnection) return;
    
    setResponding(true);
    try {
      const response = await fetch('/api/gmail/monitor', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'respond',
          emailAddress: gmailConnection.email,
          emailId: emailId,
          actualSend: !preview
        })
      });

      if (response.ok) {
        const data = await response.json();
        if (!preview) {
          setTimeout(() => checkGmailEmails(false), 1000);
        }
        return data;
      }
    } catch (error) {
      console.error('Error sending AI response:', error);
    } finally {
      setResponding(false);
    }
  };

  // Helper functions for business rules
  const addToBlacklist = () => {
    if (newBlacklistItem.trim()) {
      setAutomationSettings(prev => ({
        ...prev,
        businessRules: {
          ...prev.businessRules,
          blacklist: [...prev.businessRules.blacklist, newBlacklistItem.trim()]
        }
      }));
      setNewBlacklistItem('');
    }
  };

  const removeFromBlacklist = (index) => {
    setAutomationSettings(prev => ({
      ...prev,
      businessRules: {
        ...prev.businessRules,
        blacklist: prev.businessRules.blacklist.filter((_, i) => i !== index)
      }
    }));
  };

  const addToWhitelist = () => {
    if (newWhitelistItem.trim()) {
      setAutomationSettings(prev => ({
        ...prev,
        businessRules: {
          ...prev.businessRules,
          whitelist: [...prev.businessRules.whitelist, newWhitelistItem.trim()]
        }
      }));
      setNewWhitelistItem('');
    }
  };

  const removeFromWhitelist = (index) => {
    setAutomationSettings(prev => ({
      ...prev,
      businessRules: {
        ...prev.businessRules,
        whitelist: prev.businessRules.whitelist.filter((_, i) => i !== index)
      }
    }));
  };

  const addCustomKeyword = () => {
    if (newCustomKeyword.trim()) {
      setAutomationSettings(prev => ({
        ...prev,
        businessRules: {
          ...prev.businessRules,
          customKeywords: [...prev.businessRules.customKeywords, newCustomKeyword.trim()]
        }
      }));
      setNewCustomKeyword('');
    }
  };

  const removeCustomKeyword = (index) => {
    setAutomationSettings(prev => ({
      ...prev,
      businessRules: {
        ...prev.businessRules,
        customKeywords: prev.businessRules.customKeywords.filter((_, i) => i !== index)
      }
    }));
  };

  const addHotLeadKeyword = () => {
    const input = document.getElementById('hotLeadKeywordInput');
    if (input && input.value.trim()) {
      const newKeyword = input.value.trim();
      if (!aiSettings.hotLeadKeywords.includes(newKeyword)) {
        setAiSettings(prev => ({
          ...prev,
          hotLeadKeywords: [...prev.hotLeadKeywords, newKeyword]
        }));
      }
      input.value = '';
    }
  };

  const removeHotLeadKeyword = (index) => {
    setAiSettings(prev => ({
      ...prev,
      hotLeadKeywords: prev.hotLeadKeywords.filter((_, i) => i !== index)
    }));
  };

  // 📊 STREAMLINED DASHBOARD TAB
  const DashboardTab = () => (
    <div className="space-y-6">
      {/* STREAMLINED Header - Gmail Status + Check Emails + Last Refresh */}
      {gmailConnection ? (
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <div className="p-2 rounded-lg bg-green-100">
                  <CheckCircle className="w-5 h-5 text-green-600" />
                </div>
                <div>
                  <h3 className="font-semibold text-lg">Gmail AI Connected</h3>
                  <p className="text-sm text-gray-600">
                    Connected to {gmailConnection.email} • Auto-monitoring active
                  </p>
                </div>
              </div>
              <div className="flex items-center gap-4">
                <span className="text-sm text-gray-500">
                  Last refreshed: {lastRefresh.toLocaleTimeString()}
                </span>
                <Button 
                  onClick={() => checkGmailEmails(false)}
                  disabled={gmailLoading}
                  className="flex items-center gap-2"
                >
                  {gmailLoading ? (
                    <RefreshCw className="w-4 h-4 animate-spin" />
                  ) : (
                    <RefreshCw className="w-4 h-4" />
                  )}
                  Check Emails
                </Button>
                <Button 
                  size="sm" 
                  variant="outline"
                  onClick={() => window.open('/email/test', '_blank')}
                >
                  <ExternalLink className="w-4 h-4 mr-1" />
                  Advanced Testing
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>
      ) : (
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <div className="p-2 rounded-lg bg-yellow-100">
                  <AlertCircle className="w-5 h-5 text-yellow-600" />
                </div>
                <div>
                  <h3 className="font-semibold text-lg">Gmail AI Setup Required</h3>
                  <p className="text-sm text-gray-600">
                    Connect Gmail for AI-powered email automation
                  </p>
                </div>
              </div>
              <Button onClick={connectGmail} className="flex items-center gap-2">
                <LinkIcon className="w-4 h-4" />
                Connect Gmail
              </Button>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Metrics - Larger and cleaner */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">Total Conversations</p>
                <p className="text-3xl font-bold text-gray-900">{stats.totalConversations}</p>
              </div>
              <MessageSquare className="w-10 h-10 text-blue-500" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">Active Today</p>
                <p className="text-3xl font-bold text-gray-900">{stats.activeToday}</p>
              </div>
              <Zap className="w-10 h-10 text-green-500" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">Response Rate</p>
                <p className="text-3xl font-bold text-gray-900">{stats.responseRate}%</p>
              </div>
              <Target className="w-10 h-10 text-purple-500" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">Avg Response Time</p>
                <p className="text-3xl font-bold text-gray-900">{stats.avgResponseTime}m</p>
              </div>
              <Clock className="w-10 h-10 text-orange-500" />
            </div>
          </CardContent>
        </Card>
      </div>

      {/* IMPROVED Layout: 40% Conversations / 60% Email Preview */}
      <div className="grid grid-cols-1 lg:grid-cols-5 gap-6">
        {/* CONVERSATIONS LIST - NOW 40% WIDTH (2/5 columns) */}
        <div className="lg:col-span-2">
          <Card className="h-full">
            <CardHeader className="pb-4">
              <CardTitle className="flex items-center gap-3 text-xl">
                <Inbox className="w-6 h-6 text-blue-600" />
                Email Conversations ({gmailEmails.length + conversations.length})
              </CardTitle>
              <CardDescription className="text-base">
                Real-time Gmail monitoring with AI responses
              </CardDescription>
            </CardHeader>
            <CardContent className="p-0">
              {/* Loading State */}
              {(loading || gmailLoading) && (
                <div className="flex items-center justify-center py-16">
                  <div className="flex items-center gap-4">
                    <RefreshCw className="w-8 h-8 animate-spin text-blue-600" />
                    <span className="text-lg text-gray-600 font-medium">Loading conversations...</span>
                  </div>
                </div>
              )}

              {/* Gmail Emails */}
              {gmailEmails.length > 0 && !loading && (
                <div className="border-b">
                  <div className="px-6 py-4 bg-gradient-to-r from-blue-50 to-blue-100 border-b">
                    <div className="flex items-center gap-3">
                      <Globe className="w-5 h-5 text-blue-600" />
                      <span className="text-sm font-semibold text-blue-800 uppercase tracking-wide">
                        Gmail AI ({gmailEmails.length})
                      </span>
                      <Badge variant="secondary" className="bg-blue-200 text-blue-800">
                        Live Monitoring
                      </Badge>
                    </div>
                  </div>
                  <div className="space-y-0 max-h-96 overflow-y-auto">
                    {gmailEmails.map((email) => (
                      <div
                        key={email.id}
                        className={`p-6 border-b cursor-pointer transition-all duration-200 hover:bg-gray-50 hover:border-l-4 hover:border-l-blue-500 ${
                          selectedGmailEmail?.id === email.id 
                            ? 'bg-blue-50 border-l-4 border-l-blue-500 shadow-sm' 
                            : ''
                        }`}
                        onClick={() => {
                          setSelectedGmailEmail(email);
                          setSelectedConversation(null);
                        }}
                      >
                        <div className="flex items-center justify-between mb-3">
                          <h4 className="font-semibold text-lg text-gray-900 truncate">
                            {email.fromName || email.fromEmail}
                          </h4>
                          <Badge variant="default" className="bg-blue-100 text-blue-800 px-3 py-1">
                            Gmail
                          </Badge>
                        </div>
                        <p className="text-sm text-gray-700 font-medium mb-2 line-clamp-1">
                          {email.subject}
                        </p>
                        <div className="flex items-center justify-between">
                          <p className="text-xs text-gray-500">
                            Received: {email.receivedTime}
                          </p>
                          {selectedGmailEmail?.id === email.id && (
                            <Badge variant="outline" className="bg-blue-50 text-blue-700 border-blue-300">
                              Selected
                            </Badge>
                          )}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* Empty State */}
              {conversations.length === 0 && gmailEmails.length === 0 && !loading && (
                <div className="p-12 text-center">
                  <div className="w-24 h-24 mx-auto mb-6 bg-gray-100 rounded-full flex items-center justify-center">
                    <Mail className="w-12 h-12 text-gray-400" />
                  </div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-2">No email conversations yet</h3>
                  <p className="text-gray-600 mb-4 max-w-sm mx-auto">
                    {gmailConnection 
                      ? 'New emails will appear automatically when received'
                      : 'Connect your Gmail account to start receiving and managing conversations'
                    }
                  </p>
                  {!gmailConnection && (
                    <Button onClick={connectGmail} className="flex items-center gap-2">
                      <LinkIcon className="w-4 h-4" />
                      Connect Gmail Now
                    </Button>
                  )}
                </div>
              )}
            </CardContent>
          </Card>
        </div>

        {/* EMAIL PREVIEW/RESPONSE - NOW 60% WIDTH (3/5 columns) */}
        <div className="lg:col-span-3 space-y-6">
          {selectedGmailEmail ? (
            <Card className="h-full">
              <CardHeader className="pb-4">
                <CardTitle className="flex items-center gap-3 text-lg">
                  <Globe className="w-5 h-5 text-blue-600" />
                  <div className="flex-1 min-w-0">
                    <div className="font-semibold text-gray-900 truncate">
                      {selectedGmailEmail.fromName || selectedGmailEmail.fromEmail}
                    </div>
                  </div>
                </CardTitle>
                <CardDescription className="text-sm">
                  <span className="font-medium">Subject:</span> {selectedGmailEmail.subject}
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                {/* Email Content Preview - Much more space now! */}
                <div className="bg-gray-50 rounded-xl p-6 border">
                  <p className="text-sm font-medium text-gray-700 mb-4 flex items-center gap-2">
                    <Mail className="w-4 h-4" />
                    Email Content:
                  </p>
                  <div className="max-h-64 overflow-y-auto text-sm text-gray-600 leading-relaxed space-y-2">
                    {selectedGmailEmail.fullBody || selectedGmailEmail.body || 'No content preview available'}
                  </div>
                </div>

                {/* Action Buttons - Larger and better spaced */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <Button 
                    onClick={() => sendAIResponse(selectedGmailEmail.id, true)}
                    disabled={responding}
                    variant="outline"
                    className="h-14 flex items-center justify-center gap-3 text-base"
                  >
                    <Eye className="w-5 h-5" />
                    Preview AI Response
                  </Button>
                  <Button 
                    onClick={() => sendAIResponse(selectedGmailEmail.id, false)}
                    disabled={responding}
                    className="h-14 flex items-center justify-center gap-3 text-base bg-blue-600 hover:bg-blue-700"
                  >
                    {responding ? (
                      <>
                        <RefreshCw className="w-5 h-5 animate-spin" />
                        Sending Response...
                      </>
                    ) : (
                      <>
                        <Send className="w-5 h-5" />
                        Send AI Response
                      </>
                    )}
                  </Button>
                </div>

                {/* Info Box - More detailed */}
                <div className="bg-blue-50 border border-blue-200 rounded-xl p-6">
                  <div className="flex items-start gap-4">
                    <div className="w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center flex-shrink-0">
                      <Bot className="w-5 h-5 text-blue-600" />
                    </div>
                    <div className="flex-1">
                      <p className="text-base font-medium text-blue-900 mb-2">AI Response Ready</p>
                      <p className="text-sm text-blue-700 leading-relaxed">
                        The AI will generate a professional response based on your business knowledge and communication settings. 
                        You can preview the response before sending to ensure it meets your standards.
                      </p>
                    </div>
                  </div>
                </div>

                {/* Email metadata - More space for details */}
                <div className="bg-gray-50 rounded-xl p-4 space-y-3">
                  <h4 className="font-medium text-gray-900">Email Details</h4>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                    <div>
                      <span className="font-medium text-gray-600">From:</span>
                      <p className="text-gray-900">{selectedGmailEmail.fromEmail}</p>
                    </div>
                    <div>
                      <span className="font-medium text-gray-600">Received:</span>
                      <p className="text-gray-900">{selectedGmailEmail.receivedTime}</p>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          ) : (
            /* Empty Selection State - Better use of space */
            <Card className="h-full">
              <CardContent className="p-16 text-center flex flex-col items-center justify-center h-full min-h-[500px]">
                <div className="w-24 h-24 mx-auto mb-8 bg-gray-100 rounded-full flex items-center justify-center">
                  <MessageSquare className="w-12 h-12 text-gray-400" />
                </div>
                <h3 className="text-xl font-semibold text-gray-900 mb-3">Select a conversation</h3>
                <p className="text-gray-600 mb-8 max-w-md leading-relaxed">
                  Choose an email conversation from the list to view details and send AI responses. 
                  The AI will generate professional responses based on your business knowledge.
                </p>
                <div className="grid grid-cols-1 gap-3 text-sm text-gray-500 max-w-sm">
                  <div className="flex items-center gap-3">
                    <CheckCircle className="w-4 h-4 text-green-500 flex-shrink-0" />
                    <span>Preview AI responses before sending</span>
                  </div>
                  <div className="flex items-center gap-3">
                    <CheckCircle className="w-4 h-4 text-green-500 flex-shrink-0" />
                    <span>Automatic professional formatting</span>
                  </div>
                  <div className="flex items-center gap-3">
                    <CheckCircle className="w-4 h-4 text-green-500 flex-shrink-0" />
                    <span>Real-time conversation monitoring</span>
                  </div>
                </div>
              </CardContent>
            </Card>
          )}
        </div>
      </div>
    </div>
  );

  // 🤖 AI SETTINGS TAB - WITH KNOWLEDGE BASE (unchanged)
  const AISettingsTab = () => (
    <div className="space-y-6">
      {/* Business Profile */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Building className="w-5 h-5" />
            Business Profile
          </CardTitle>
          <CardDescription>Tell the AI about your business</CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div>
              <label className="block text-sm font-medium mb-2">Business Name</label>
              <Input
                value={businessProfile.name}
                onChange={(e) => setBusinessProfile(prev => ({ ...prev, name: e.target.value }))}
                placeholder="Your Business Name"
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-2">Industry</label>
              <Input
                value={businessProfile.industry}
                onChange={(e) => setBusinessProfile(prev => ({ ...prev, industry: e.target.value }))}
                placeholder="e.g., Real Estate, Consulting"
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-2">Expertise</label>
              <Input
                value={businessProfile.expertise}
                onChange={(e) => setBusinessProfile(prev => ({ ...prev, expertise: e.target.value }))}
                placeholder="What you specialize in"
              />
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Communication Tone */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <MessageCircle className="w-5 h-5" />
            Communication Tone
          </CardTitle>
          <CardDescription>How should the AI communicate with customers?</CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div>
            <label className="block text-sm font-medium mb-3">Select Tone</label>
            <div className="grid grid-cols-3 gap-3">
              {['professional', 'casual', 'formal'].map(tone => (
                <Button
                  key={tone}
                  variant={aiSettings.communicationTone === tone ? "default" : "outline"}
                  onClick={() => setAiSettings(prev => ({ ...prev, communicationTone: tone }))}
                  className="capitalize"
                >
                  {tone}
                </Button>
              ))}
            </div>
          </div>
        </CardContent>
      </Card>

      {/* KNOWLEDGE BASE - REPLACES RESPONSE STYLE */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <BookOpen className="w-5 h-5" />
            Business Knowledge Base
          </CardTitle>
          <CardDescription>
            Add specific information about your services, pricing, processes, and policies so the AI can answer customer questions accurately
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div>
            <label className="block text-sm font-medium mb-3">
              Business Information (200-1000 characters recommended)
            </label>
            <Textarea
              value={aiSettings.knowledgeBase}
              onChange={(e) => setAiSettings(prev => ({ ...prev, knowledgeBase: e.target.value }))}
              placeholder="Example: We offer full-service real estate including buying, selling, and property management in downtown and suburban areas. Our process includes free market analysis, professional photography, and 24/7 client support. We charge 3% commission for sellers and our buyers get services free. We specialize in first-time homebuyers and luxury properties over $500k. Our office hours are Monday-Friday 9am-6pm, weekends by appointment. We serve the Greater Metro area and surrounding counties..."
              rows={8}
              className="resize-none"
              maxLength={2000}
            />
            <div className="flex justify-between items-center mt-2">
              <p className="text-xs text-gray-500">
                Include: services offered, pricing, coverage areas, processes, specialties, contact hours
              </p>
              <p className="text-xs text-gray-400">
                {aiSettings.knowledgeBase.length}/2000 characters
              </p>
            </div>
          </div>
          
          {aiSettings.knowledgeBase.length > 0 && (
            <div className="bg-green-50 border border-green-200 rounded-lg p-3">
              <p className="text-sm text-green-700 font-medium">✅ Knowledge Base Active</p>
              <p className="text-xs text-green-600 mt-1">
                AI can now answer specific questions about your business based on this information
              </p>
            </div>
          )}
          
          {aiSettings.knowledgeBase.length === 0 && (
            <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-3">
              <p className="text-sm text-yellow-700 font-medium">⚠️ Knowledge Base Empty</p>
              <p className="text-xs text-yellow-600 mt-1">
                AI will give generic responses without business-specific knowledge
              </p>
            </div>
          )}
        </CardContent>
      </Card>

      {/* Hot Lead Keywords */}
      <Card>
        <CardHeader>
          <CardTitle>Hot Lead Keywords</CardTitle>
          <CardDescription>Keywords that indicate urgent, high-priority leads</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-3">
            <div className="flex flex-wrap gap-2">
              {aiSettings.hotLeadKeywords.map((keyword, index) => (
                <Badge key={index} variant="outline" className="cursor-pointer flex items-center gap-1"
                  onClick={() => removeHotLeadKeyword(index)}
                >
                  {keyword}
                  <X className="w-3 h-3" />
                </Badge>
              ))}
            </div>
            <div className="flex gap-2">
              <Input
                id="hotLeadKeywordInput"
                placeholder="Add keyword (press Enter)"
                onKeyPress={(e) => {
                  if (e.key === 'Enter') {
                    addHotLeadKeyword();
                  }
                }}
              />
              <Button onClick={addHotLeadKeyword} size="sm">Add</Button>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Behavior Toggles */}
      <Card>
        <CardHeader>
          <CardTitle>Behavior Toggles</CardTitle>
          <CardDescription>Control AI behavior and alerts</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {[
              { key: 'includeAvailability', label: 'Include Availability', desc: 'Mention scheduling availability' },
              { key: 'askQualifyingQuestions', label: 'Ask Qualifying Questions', desc: 'AI asks follow-up questions' },
              { key: 'hotLeadAlerts', label: 'Hot Lead Alerts', desc: 'Get notified about urgent inquiries' },
              { key: 'smsLeadAlerts', label: 'SMS Lead Alerts', desc: 'Send SMS for hot leads' }
            ].map(({ key, label, desc }) => (
              <div key={key} className="flex items-start space-x-3 p-3 border rounded-lg">
                <input
                  type="checkbox"
                  checked={aiSettings.behaviors[key]}
                  onChange={(e) => setAiSettings(prev => ({
                    ...prev,
                    behaviors: { ...prev.behaviors, [key]: e.target.checked }
                  }))}
                  className="mt-1 rounded border-gray-300"
                />
                <div>
                  <label className="text-sm font-medium">{label}</label>
                  <p className="text-xs text-gray-600">{desc}</p>
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Save Button */}
      <div className="flex justify-end">
        <Button onClick={saveAllSettings} disabled={saving} className="flex items-center gap-2">
          {saving ? <RefreshCw className="w-4 h-4 animate-spin" /> : <CheckCircle className="w-4 h-4" />}
          Save AI Settings
        </Button>
      </div>
    </div>
  );

  // 🔧 AUTOMATION TAB (unchanged)
  const AutomationTab = () => (
    <div className="space-y-6">
      {/* Gmail Connection */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Mail className="w-5 h-5" />
            Gmail Connection
          </CardTitle>
          <CardDescription>Status and reconnect options</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
            <div className="flex items-center gap-3">
              <div className={`w-3 h-3 rounded-full ${gmailConnection ? 'bg-green-500' : 'bg-red-500'}`}></div>
              <div>
                <span className="font-medium">
                  {gmailConnection ? `Connected to ${gmailConnection.email}` : 'Not Connected'}
                </span>
                <p className="text-sm text-gray-600">
                  {gmailConnection 
                    ? 'Gmail monitoring is active with AI responses' 
                    : 'Connect Gmail to enable email automation'
                  }
                </p>
              </div>
            </div>
            <Button variant="outline" onClick={connectGmail}>
              {gmailConnection ? 'Reconnect' : 'Connect Gmail'}
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* Response Control */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Bot className="w-5 h-5" />
            Response Control
          </CardTitle>
          <CardDescription>Configure when and how AI responds</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {[
              { key: 'aiResponses', label: 'AI Responses', desc: 'Enable AI-generated responses' },
              { key: 'autoSend', label: 'Auto-Send', desc: 'Automatically send AI responses' },
              { key: 'businessHours', label: 'Business Hours', desc: 'Only respond during business hours' },
              { key: 'urgentPriority', label: 'Urgent Priority', desc: 'Prioritize urgent emails' }
            ].map(({ key, label, desc }) => (
              <div key={key} className="flex items-start space-x-3 p-3 border rounded-lg">
                <input
                  type="checkbox"
                  checked={automationSettings.responseControl[key]}
                  onChange={(e) => setAutomationSettings(prev => ({
                    ...prev,
                    responseControl: { ...prev.responseControl, [key]: e.target.checked }
                  }))}
                  className="mt-1 rounded border-gray-300"
                />
                <div>
                  <label className="text-sm font-medium">{label}</label>
                  <p className="text-xs text-gray-600">{desc}</p>
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Email Filtering */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Filter className="w-5 h-5" />
            Email Filtering
          </CardTitle>
          <CardDescription>Automatically filter emails to focus on real inquiries</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {[
              { key: 'autoArchiveSpam', label: 'Auto-Archive Spam', desc: 'Automatically filter out spam emails' },
              { key: 'blockMassEmails', label: 'Block Mass Emails', desc: 'Filter newsletters and promotional emails' },
              { key: 'personalOnly', label: 'Personal Only', desc: 'Only process emails that appear personal' },
              { key: 'skipAutoGenerated', label: 'Skip Auto-Generated', desc: 'Ignore automated system emails' }
            ].map(({ key, label, desc }) => (
              <div key={key} className="flex items-start space-x-3 p-3 border rounded-lg">
                <input
                  type="checkbox"
                  checked={automationSettings.emailFiltering[key]}
                  onChange={(e) => setAutomationSettings(prev => ({
                    ...prev,
                    emailFiltering: { ...prev.emailFiltering, [key]: e.target.checked }
                  }))}
                  className="mt-1 rounded border-gray-300"
                />
                <div>
                  <label className="text-sm font-medium">{label}</label>
                  <p className="text-xs text-gray-600">{desc}</p>
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Business Rules */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Shield className="w-5 h-5" />
            Business Rules
          </CardTitle>
          <CardDescription>Blacklist, whitelist, and custom keywords</CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          {/* Blacklist */}
          <div>
            <label className="block text-sm font-medium mb-2">Blacklist (Block these emails/domains)</label>
            <div className="space-y-2">
              <div className="flex flex-wrap gap-2">
                {automationSettings.businessRules.blacklist.map((item, index) => (
                  <Badge key={index} variant="destructive" className="cursor-pointer flex items-center gap-1"
                    onClick={() => removeFromBlacklist(index)}
                  >
                    {item}
                    <X className="w-3 h-3" />
                  </Badge>
                ))}
              </div>
              <div className="flex gap-2">
                <Input
                  value={newBlacklistItem}
                  onChange={(e) => setNewBlacklistItem(e.target.value)}
                  placeholder="Add email or domain to blacklist"
                  onKeyPress={(e) => e.key === 'Enter' && addToBlacklist()}
                />
                <Button onClick={addToBlacklist} size="sm">Add</Button>
              </div>
            </div>
          </div>

          {/* Whitelist */}
          <div>
            <label className="block text-sm font-medium mb-2">Whitelist (Always allow these emails/domains)</label>
            <div className="space-y-2">
              <div className="flex flex-wrap gap-2">
                {automationSettings.businessRules.whitelist.map((item, index) => (
                  <Badge key={index} variant="secondary" className="cursor-pointer flex items-center gap-1"
                    onClick={() => removeFromWhitelist(index)}
                  >
                    {item}
                    <X className="w-3 h-3" />
                  </Badge>
                ))}
              </div>
              <div className="flex gap-2">
                <Input
                  value={newWhitelistItem}
                  onChange={(e) => setNewWhitelistItem(e.target.value)}
                  placeholder="Add email or domain to whitelist"
                  onKeyPress={(e) => e.key === 'Enter' && addToWhitelist()}
                />
                <Button onClick={addToWhitelist} size="sm">Add</Button>
              </div>
            </div>
          </div>

          {/* Custom Keywords */}
          <div>
            <label className="block text-sm font-medium mb-2">Custom Keywords (Additional filtering)</label>
            <div className="space-y-2">
              <div className="flex flex-wrap gap-2">
                {automationSettings.businessRules.customKeywords.map((keyword, index) => (
                  <Badge key={index} variant="outline" className="cursor-pointer flex items-center gap-1"
                    onClick={() => removeCustomKeyword(index)}
                  >
                    {keyword}
                    <X className="w-3 h-3" />
                  </Badge>
                ))}
              </div>
              <div className="flex gap-2">
                <Input
                  value={newCustomKeyword}
                  onChange={(e) => setNewCustomKeyword(e.target.value)}
                  placeholder="Add custom filtering keyword"
                  onKeyPress={(e) => e.key === 'Enter' && addCustomKeyword()}
                />
                <Button onClick={addCustomKeyword} size="sm">Add</Button>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Save Button */}
      <div className="flex justify-end">
        <Button onClick={saveAllSettings} disabled={saving} className="flex items-center gap-2">
          {saving ? <RefreshCw className="w-4 h-4 animate-spin" /> : <CheckCircle className="w-4 h-4" />}
          Save Automation Settings
        </Button>
      </div>
    </div>
  );

  if (loading) {
    return (
      <div className="p-6">
        <div className="animate-pulse space-y-4">
          <div className="h-8 bg-gray-200 rounded w-1/4"></div>
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            {[1,2,3,4].map(i => (
              <div key={i} className="h-24 bg-gray-200 rounded"></div>
            ))}
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="p-6 max-w-7xl mx-auto">
      {/* Header */}
      <div className="flex items-center gap-4 mb-6">
        <Button 
          variant="outline" 
          onClick={() => router.push('/dashboard')}
          className="flex items-center gap-2"
        >
          <ArrowLeft className="w-4 h-4" />
          Dashboard
        </Button>
        <div className="flex-1">
          <h1 className="text-2xl font-bold flex items-center gap-2">
            <Mail className="w-6 h-6" />
            Email AI Manager
          </h1>
          <p className="text-gray-600">Unified Gmail automation with smart AI responses and filtering</p>
        </div>
      </div>

      {/* Tab Navigation */}
      <div className="mb-6">
        <div className="border-b border-gray-200">
          <nav className="-mb-px flex space-x-8">
            {tabs.map(tab => {
              const Icon = tab.icon;
              return (
                <button
                  key={tab.id}
                  onClick={() => setActiveTab(tab.id)}
                  className={`whitespace-nowrap py-2 px-1 border-b-2 font-medium text-sm ${
                    activeTab === tab.id
                      ? 'border-blue-500 text-blue-600'
                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                  }`}
                >
                  <div className="flex items-center gap-2">
                    <Icon className="w-4 h-4" />
                    {tab.label}
                  </div>
                </button>
              );
            })}
          </nav>
        </div>
        <div className="mt-2">
          <p className="text-sm text-gray-600">
            {tabs.find(tab => tab.id === activeTab)?.description}
          </p>
        </div>
      </div>

      {/* Tab Content */}
      <div className="tab-content">
        {activeTab === 'dashboard' && <DashboardTab />}
        {activeTab === 'ai-settings' && <AISettingsTab />}
        {activeTab === 'automation' && <AutomationTab />}
        {activeTab === 'connections' && <ConnectionsTab />}
      </div>
    </div>
  );
}
