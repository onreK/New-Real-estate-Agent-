'use client';

import { useState, useEffect, useRef, useCallback, useMemo } from 'react';
import { useRouter } from 'next/navigation';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import ConnectionsTab from '@/components/ConnectionsTab';
import { 
  Mail, 
  Settings, 
  Send, 
  Users, 
  TrendingUp, 
  Clock, 
  ArrowLeft,
  MessageSquare,
  Bot,
  FileText,
  Sparkles,
  Zap,
  Target,
  CheckCircle,
  AlertCircle,
  RefreshCw,
  Eye,
  ExternalLink,
  Link as LinkIcon,
  Globe,
  BarChart3,
  Wrench,
  Volume2,
  VolumeX,
  Filter,
  Inbox,
  Shield,
  Building,
  MessageCircle,
  Phone,
  Archive,
  X,
  BookOpen
} from 'lucide-react';

export default function CompleteEmailSystem() {
  const router = useRouter();
  const [activeTab, setActiveTab] = useState('dashboard');
  const refreshIntervalRef = useRef(null);
  
  // Business profile refs for problematic inputs
  const businessProfileRef = useRef({
    name: '',
    industry: '',
    expertise: ''
  });
  
  const knowledgeBaseRef = useRef('');
  
  // Main states
  const [conversations, setConversations] = useState([]);
  const [gmailEmails, setGmailEmails] = useState([]);
  const [selectedConversation, setSelectedConversation] = useState(null);
  const [selectedGmailEmail, setSelectedGmailEmail] = useState(null);
  const [newMessage, setNewMessage] = useState('');
  const [loading, setLoading] = useState(true);
  const [gmailLoading, setGmailLoading] = useState(false);
  const [responding, setResponding] = useState(false);
  const [gmailConnection, setGmailConnection] = useState(null);
  const [lastRefresh, setLastRefresh] = useState(new Date());
  const [saving, setSaving] = useState(false);
  const [reconnecting, setReconnecting] = useState(false);
  
  // AI Testing states
  const [testResult, setTestResult] = useState(null);
  const [testing, setTesting] = useState(false);
  
  const [stats, setStats] = useState({
    totalConversations: 0,
    activeToday: 0,
    responseRate: 0,
    avgResponseTime: 0
  });

  // Dashboard Settings
  const [dashboardSettings, setDashboardSettings] = useState({
    autoRefresh: true,
    refreshInterval: 30
  });

  // 🎯 ENHANCED AI Settings - All fields preserved
  const [aiSettings, setAiSettings] = useState({
    // Existing fields
    communicationTone: 'professional',
    knowledgeBase: '',
    hotLeadKeywords: ['urgent', 'asap', 'budget', 'ready'],
    behaviors: {
      includeAvailability: true,
      askQualifyingQuestions: true,
      hotLeadAlerts: true,
      smsLeadAlerts: false
    },
    
    // NEW: AI Behavior Settings
    customInstructions: '',
    alwaysAskPhone: false,
    scheduleWithin24h: false,
    highlightAdvantages: false,
    includeCallToAction: true,
    offerCallbackUrgent: true,
    
    // NEW: AI Model Settings
    aiModel: 'gpt-4o-mini',
    creativity: 0.7,
    responseLength: 'medium',
    enableHotLeadAnalysis: true,
    enableAIResponses: true
  });

  // 🔧 AUTOMATION SETTINGS - EMAIL FILTERING FULLY ENABLED
  const [automationSettings, setAutomationSettings] = useState({
    responseControl: {
      aiResponses: true,
      autoSend: false,
      businessHours: true,
      urgentPriority: true
    },
    // ✅ EMAIL FILTERING - FULLY FUNCTIONAL
    emailFiltering: {
      autoArchiveSpam: true,
      blockMassEmails: true,
      personalOnly: false,
      skipAutoGenerated: true
    },
    // ✅ BUSINESS RULES - FULLY FUNCTIONAL
    businessRules: {
      blacklist: [],
      whitelist: [],
      customKeywords: []
    }
  });

  // Business rules form states
  const [newBlacklistItem, setNewBlacklistItem] = useState('');
  const [newWhitelistItem, setNewWhitelistItem] = useState('');
  const [newCustomKeyword, setNewCustomKeyword] = useState('');

  // 🎯 Event Handlers - All preserved and functional
  const handleAiSettingsChange = useCallback((field, value) => {
    setAiSettings(prev => ({ ...prev, [field]: value }));
  }, []);

  const handleAiBehaviorChange = useCallback((field, value) => {
    setAiSettings(prev => ({
      ...prev,
      behaviors: { ...prev.behaviors, [field]: value }
    }));
  }, []);

  const handleAutomationControlChange = useCallback((field, value) => {
    setAutomationSettings(prev => ({
      ...prev,
      responseControl: { ...prev.responseControl, [field]: value }
    }));
  }, []);

  // ✅ EMAIL FILTERING HANDLER - FULLY FUNCTIONAL
  const handleEmailFilteringChange = useCallback((field, value) => {
    setAutomationSettings(prev => ({
      ...prev,
      emailFiltering: { ...prev.emailFiltering, [field]: value }
    }));
  }, []);

  // Business Rules Handlers - All functional
  const addToBlacklist = useCallback(() => {
    if (newBlacklistItem.trim()) {
      setAutomationSettings(prev => ({
        ...prev,
        businessRules: {
          ...prev.businessRules,
          blacklist: [...prev.businessRules.blacklist, newBlacklistItem.trim()]
        }
      }));
      setNewBlacklistItem('');
    }
  }, [newBlacklistItem]);

  const removeFromBlacklist = useCallback((index) => {
    setAutomationSettings(prev => ({
      ...prev,
      businessRules: {
        ...prev.businessRules,
        blacklist: prev.businessRules.blacklist.filter((_, i) => i !== index)
      }
    }));
  }, []);

  const addToWhitelist = useCallback(() => {
    if (newWhitelistItem.trim()) {
      setAutomationSettings(prev => ({
        ...prev,
        businessRules: {
          ...prev.businessRules,
          whitelist: [...prev.businessRules.whitelist, newWhitelistItem.trim()]
        }
      }));
      setNewWhitelistItem('');
    }
  }, [newWhitelistItem]);

  const removeFromWhitelist = useCallback((index) => {
    setAutomationSettings(prev => ({
      ...prev,
      businessRules: {
        ...prev.businessRules,
        whitelist: prev.businessRules.whitelist.filter((_, i) => i !== index)
      }
    }));
  }, []);

  const addCustomKeyword = useCallback(() => {
    if (newCustomKeyword.trim()) {
      setAutomationSettings(prev => ({
        ...prev,
        businessRules: {
          ...prev.businessRules,
          customKeywords: [...prev.businessRules.customKeywords, newCustomKeyword.trim()]
        }
      }));
      setNewCustomKeyword('');
    }
  }, [newCustomKeyword]);

  const removeCustomKeyword = useCallback((index) => {
    setAutomationSettings(prev => ({
      ...prev,
      businessRules: {
        ...prev.businessRules,
        customKeywords: prev.businessRules.customKeywords.filter((_, i) => i !== index)
      }
    }));
  }, []);

  const addHotLeadKeyword = useCallback(() => {
    const input = document.getElementById('hotLeadKeywordInput');
    if (input && input.value.trim()) {
      const newKeyword = input.value.trim();
      if (!aiSettings.hotLeadKeywords.includes(newKeyword)) {
        setAiSettings(prev => ({
          ...prev,
          hotLeadKeywords: [...prev.hotLeadKeywords, newKeyword]
        }));
      }
      input.value = '';
    }
  }, [aiSettings.hotLeadKeywords]);

  const removeHotLeadKeyword = useCallback((index) => {
    setAiSettings(prev => ({
      ...prev,
      hotLeadKeywords: prev.hotLeadKeywords.filter((_, i) => i !== index)
    }));
  }, []);

  // Tab configuration
  const tabs = useMemo(() => [
    { 
      id: 'dashboard', 
      label: 'Dashboard', 
      icon: BarChart3,
      description: 'Real-time Gmail conversations and AI responses'
    },
    { 
      id: 'ai-settings', 
      label: 'AI Settings', 
      icon: Bot,
      description: 'Business profile, communication tone, and AI behavior'
    },
    { 
      id: 'automation', 
      label: 'Automation', 
      icon: Wrench,
      description: 'Gmail connection, email filtering, and automation rules'
    },
    { 
      id: 'connections', 
      label: 'Connections', 
      icon: Settings,
      description: 'Manage Gmail and domain email connections'
    }
  ], []);

  // Load data on mount
  useEffect(() => {
    loadInitialData();
    handleUrlParameters();
  }, []);

  // Handle URL parameters
  const handleUrlParameters = () => {
    const urlParams = new URLSearchParams(window.location.search);
    const tab = urlParams.get('tab');
    const success = urlParams.get('success');
    const error = urlParams.get('error');
    
    if (tab && tabs.some(t => t.id === tab)) {
      setActiveTab(tab);
    }
    
    if (tab || success || error) {
      const newUrl = window.location.pathname;
      window.history.replaceState({}, document.title, newUrl);
    }
  };

  // Auto-refresh logic
  useEffect(() => {
    if (refreshIntervalRef.current) {
      clearInterval(refreshIntervalRef.current);
    }

    if (activeTab === 'dashboard' && dashboardSettings.autoRefresh) {
      refreshIntervalRef.current = setInterval(() => {
        if (gmailConnection) {
          loadGmailEmails();
        }
        setLastRefresh(new Date());
      }, dashboardSettings.refreshInterval * 1000);
    }

    return () => {
      if (refreshIntervalRef.current) {
        clearInterval(refreshIntervalRef.current);
      }
    };
  }, [activeTab, dashboardSettings.autoRefresh, dashboardSettings.refreshInterval, gmailConnection]);

  // Load initial data
  const loadInitialData = async () => {
    setLoading(true);
    try {
      await Promise.all([
        loadConversations(),
        loadGmailConnection(),
        loadAiSettings()
      ]);
    } catch (error) {
      console.error('Error loading initial data:', error);
    } finally {
      setLoading(false);
    }
  };

  // Load conversations
  const loadConversations = async () => {
    try {
      const response = await fetch('/api/conversations');
      if (response.ok) {
        const data = await response.json();
        setConversations(data.conversations || []);
        setStats(prev => ({
          ...prev,
          totalConversations: data.conversations?.length || 0,
          activeToday: data.conversations?.filter(c => 
            new Date(c.created_at).toDateString() === new Date().toDateString()
          ).length || 0
        }));
      }
    } catch (error) {
      console.error('Error loading conversations:', error);
    }
  };

  // Load Gmail connection
  const loadGmailConnection = async () => {
    try {
      const response = await fetch('/api/gmail/connection');
      if (response.ok) {
        const data = await response.json();
        setGmailConnection(data.connection);
        if (data.connection) {
          await loadGmailEmails();
        }
      }
    } catch (error) {
      console.error('Error loading Gmail connection:', error);
    }
  };

  // Load Gmail emails
  const loadGmailEmails = async () => {
    if (!gmailConnection) return;
    
    setGmailLoading(true);
    try {
      const response = await fetch('/api/gmail/messages');
      if (response.ok) {
        const data = await response.json();
        setGmailEmails(data.messages || []);
      }
    } catch (error) {
      console.error('Error loading Gmail messages:', error);
    } finally {
      setGmailLoading(false);
    }
  };

  // Load AI settings
  const loadAiSettings = async () => {
    try {
      const response = await fetch('/api/customer/ai-settings');
      if (response.ok) {
        const data = await response.json();
        if (data.settings) {
          setAiSettings(prev => ({
            ...prev,
            communicationTone: data.settings.tone || prev.communicationTone,
            knowledgeBase: data.settings.knowledge_base || prev.knowledgeBase,
            hotLeadKeywords: data.settings.hot_lead_keywords || prev.hotLeadKeywords
          }));
        }
      }
    } catch (error) {
      console.log('AI settings not available - using defaults');
    }
  };

  // 🎯 ENHANCED Save All Settings with email filtering
  const saveAllSettings = async () => {
    setSaving(true);
    try {
      const settingsToSave = {
        // Existing fields
        tone: aiSettings.communicationTone,
        expertise: businessProfileRef.current.industry,
        specialties: businessProfileRef.current.expertise,
        response_style: 'Knowledge-based responses with business expertise',
        knowledge_base: knowledgeBaseRef.current,
        hot_lead_keywords: aiSettings.hotLeadKeywords,
        auto_response_enabled: automationSettings.responseControl.aiResponses,
        alert_hot_leads: aiSettings.behaviors.hotLeadAlerts,
        include_availability: aiSettings.behaviors.includeAvailability,
        ask_qualifying_questions: aiSettings.behaviors.askQualifyingQuestions,
        require_approval: !automationSettings.responseControl.autoSend,
        
        // NEW: AI Behavior Settings
        ai_system_prompt: aiSettings.customInstructions,
        custom_instructions: aiSettings.customInstructions,
        always_ask_phone: aiSettings.alwaysAskPhone,
        schedule_within_24h: aiSettings.scheduleWithin24h,
        highlight_advantages: aiSettings.highlightAdvantages,
        include_call_to_action: aiSettings.includeCallToAction,
        offer_callback_urgent: aiSettings.offerCallbackUrgent,
        
        // NEW: AI Model Settings
        ai_model: aiSettings.aiModel,
        ai_temperature: aiSettings.creativity,
        ai_max_tokens: aiSettings.responseLength === 'short' ? 150 : aiSettings.responseLength === 'long' ? 500 : 350,
        response_length: aiSettings.responseLength,
        enable_hot_lead_analysis: aiSettings.enableHotLeadAnalysis,
        enable_ai_responses: aiSettings.enableAIResponses,
        
        // ✅ EMAIL FILTERING SETTINGS - NOW INCLUDED
        auto_archive_spam: automationSettings.emailFiltering.autoArchiveSpam,
        block_mass_emails: automationSettings.emailFiltering.blockMassEmails,
        personal_only: automationSettings.emailFiltering.personalOnly,
        skip_auto_generated: automationSettings.emailFiltering.skipAutoGenerated,
        blacklist_emails: automationSettings.businessRules.blacklist,
        whitelist_emails: automationSettings.businessRules.whitelist,
        priority_keywords: automationSettings.businessRules.customKeywords,
        
        // Enhanced settings
        email_filtering: automationSettings.emailFiltering,
        response_rules: automationSettings.responseControl,
        monitoring: dashboardSettings
      };

      console.log('💾 Saving enhanced settings with email filtering:', settingsToSave);

      const response = await fetch('/api/customer/ai-settings', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(settingsToSave)
      });

      if (response.ok) {
        const result = await response.json();
        console.log('✅ Enhanced settings with email filtering saved successfully:', result);
        alert('✅ Enhanced AI settings with email filtering saved successfully!');
      } else {
        throw new Error('Failed to save settings');
      }
    } catch (error) {
      console.error('❌ Error saving settings:', error);
      alert('❌ Error saving settings. Please try again.');
    } finally {
      setSaving(false);
    }
  };

  // Test AI Response
  const testAIResponse = async () => {
    setTesting(true);
    try {
      const testEmail = {
        from: 'test@example.com',
        subject: 'Test inquiry about services',
        snippet: 'Hi, I need help with my project and looking for pricing information. Can you help?'
      };

      const response = await fetch('/api/gmail/ai-response', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          emailContent: `From: ${testEmail.from}\nSubject: ${testEmail.subject}\n\n${testEmail.snippet}`,
          isTest: true 
        })
      });

      if (response.ok) {
        const data = await response.json();
        setTestResult(data.response);
      }
    } catch (error) {
      console.error('Test failed:', error);
      setTestResult('Test failed. Please check your settings.');
    } finally {
      setTesting(false);
    }
  };

  // 📊 DASHBOARD TAB
  const DashboardTab = () => (
    <div className="space-y-6">
      {/* Gmail Status Header */}
      {gmailConnection ? (
        <div className="bg-green-500/20 border border-green-500/30 rounded-2xl p-4 backdrop-blur-lg">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <CheckCircle className="w-5 h-5 text-green-400" />
              <div>
                <h3 className="font-medium text-white">Gmail Connected</h3>
                <p className="text-sm text-green-300">
                  Connected to: {gmailConnection.email}
                </p>
              </div>
            </div>
            <div className="flex items-center gap-2">
              <Button
                onClick={loadGmailEmails}
                disabled={gmailLoading}
                size="sm"
                className="bg-blue-600 hover:bg-blue-700 text-white"
              >
                {gmailLoading ? <RefreshCw className="w-4 h-4 animate-spin" /> : <Mail className="w-4 h-4" />}
                {gmailLoading ? 'Loading...' : 'Check Emails'}
              </Button>
              <span className="text-xs text-green-300">
                Last: {lastRefresh.toLocaleTimeString()}
              </span>
            </div>
          </div>
        </div>
      ) : (
        <div className="bg-orange-500/20 border border-orange-500/30 rounded-2xl p-4 backdrop-blur-lg">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <AlertCircle className="w-5 h-5 text-orange-400" />
              <div>
                <h3 className="font-medium text-white">Gmail Not Connected</h3>
                <p className="text-sm text-orange-300">
                  Connect Gmail to start managing emails with AI
                </p>
              </div>
            </div>
            <Button
              onClick={() => setActiveTab('connections')}
              size="sm"
              className="bg-orange-600 hover:bg-orange-700 text-white"
            >
              <LinkIcon className="w-4 h-4 mr-2" />
              Connect Gmail
            </Button>
          </div>
        </div>
      )}

      {/* Stats Grid */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <div className="bg-blue-500/20 border border-blue-500/30 rounded-2xl p-6 backdrop-blur-lg">
          <div className="flex items-center gap-3">
            <Mail className="w-8 h-8 text-blue-400" />
            <div>
              <p className="text-2xl font-bold text-white">{gmailEmails.length}</p>
              <p className="text-sm text-blue-300">Recent Emails</p>
            </div>
          </div>
        </div>
        <div className="bg-green-500/20 border border-green-500/30 rounded-2xl p-6 backdrop-blur-lg">
          <div className="flex items-center gap-3">
            <MessageSquare className="w-8 h-8 text-green-400" />
            <div>
              <p className="text-2xl font-bold text-white">{stats.totalConversations}</p>
              <p className="text-sm text-green-300">Total Conversations</p>
            </div>
          </div>
        </div>
        <div className="bg-purple-500/20 border border-purple-500/30 rounded-2xl p-6 backdrop-blur-lg">
          <div className="flex items-center gap-3">
            <TrendingUp className="w-8 h-8 text-purple-400" />
            <div>
              <p className="text-2xl font-bold text-white">{stats.activeToday}</p>
              <p className="text-sm text-purple-300">Active Today</p>
            </div>
          </div>
        </div>
        <div className="bg-orange-500/20 border border-orange-500/30 rounded-2xl p-6 backdrop-blur-lg">
          <div className="flex items-center gap-3">
            <Clock className="w-8 h-8 text-orange-400" />
            <div>
              <p className="text-2xl font-bold text-white">{stats.responseRate}%</p>
              <p className="text-sm text-orange-300">Response Rate</p>
            </div>
          </div>
        </div>
      </div>

      {/* Gmail Emails List */}
      {gmailConnection && (
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <div className="bg-white/10 backdrop-blur-lg rounded-2xl border border-white/20 p-6">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold text-white">Recent Gmail Messages</h3>
              <Button
                onClick={loadGmailEmails}
                disabled={gmailLoading}
                size="sm"
                variant="outline"
                className="border-white/20 text-white hover:bg-white/10"
              >
                {gmailLoading ? <RefreshCw className="w-4 h-4 animate-spin" /> : <RefreshCw className="w-4 h-4" />}
              </Button>
            </div>
            <div className="space-y-3 max-h-96 overflow-y-auto">
              {gmailEmails.length === 0 ? (
                <p className="text-gray-400 text-center py-8">No emails found</p>
              ) : (
                gmailEmails.slice(0, 10).map((email) => (
                  <div
                    key={email.id}
                    onClick={() => setSelectedGmailEmail(email)}
                    className={`p-3 rounded-lg border cursor-pointer transition-all ${
                      selectedGmailEmail?.id === email.id
                        ? 'bg-blue-500/20 border-blue-500/30'
                        : 'bg-white/5 border-white/10 hover:bg-white/10'
                    }`}
                  >
                    <div className="flex items-start justify-between">
                      <div className="flex-1 min-w-0">
                        <p className="text-sm font-medium text-white truncate">
                          {email.subject || 'No Subject'}
                        </p>
                        <p className="text-xs text-gray-400">
                          From: {email.from}
                        </p>
                        <p className="text-xs text-gray-500 mt-1 line-clamp-2">
                          {email.snippet}
                        </p>
                      </div>
                      <Badge variant="secondary" className="text-xs">
                        {new Date(email.date).toLocaleDateString()}
                      </Badge>
                    </div>
                  </div>
                ))
              )}
            </div>
          </div>

          {/* Email Detail Panel */}
          <div className="bg-white/10 backdrop-blur-lg rounded-2xl border border-white/20 p-6">
            <h3 className="text-lg font-semibold text-white mb-4">Email Details</h3>
            {selectedGmailEmail ? (
              <div className="space-y-4">
                <div>
                  <label className="text-sm font-medium text-gray-300">Subject</label>
                  <p className="text-white bg-white/5 p-3 rounded-lg mt-1">
                    {selectedGmailEmail.subject || 'No Subject'}
                  </p>
                </div>
                <div>
                  <label className="text-sm font-medium text-gray-300">From</label>
                  <p className="text-white bg-white/5 p-3 rounded-lg mt-1">
                    {selectedGmailEmail.from}
                  </p>
                </div>
                <div>
                  <label className="text-sm font-medium text-gray-300">Content</label>
                  <div className="text-white bg-white/5 p-3 rounded-lg mt-1 max-h-48 overflow-y-auto">
                    {selectedGmailEmail.snippet}
                  </div>
                </div>
                <Button
                  onClick={() => window.open(`https://mail.google.com/mail/u/0/#inbox/${selectedGmailEmail.id}`, '_blank')}
                  className="w-full bg-blue-600 hover:bg-blue-700 text-white"
                >
                  <ExternalLink className="w-4 h-4 mr-2" />
                  Open in Gmail
                </Button>
              </div>
            ) : (
              <p className="text-gray-400 text-center py-8">Select an email to view details</p>
            )}
          </div>
        </div>
      )}
    </div>
  );

  // 🤖 AI SETTINGS TAB
  const AISettingsTab = () => (
    <div className="space-y-6">
      {/* Business Profile */}
      <div className="bg-white/10 backdrop-blur-lg rounded-2xl border border-white/20 p-6">
        <div className="flex items-center gap-2 mb-4">
          <Building className="w-5 h-5 text-blue-400" />
          <h3 className="text-lg font-semibold text-white">Business Profile</h3>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium mb-2 text-gray-300">Business Name</label>
            <Input
              defaultValue={businessProfileRef.current.name}
              onChange={(e) => businessProfileRef.current.name = e.target.value}
              placeholder="Your Business Name"
              className="bg-white/10 border-white/20 text-white placeholder-gray-400 focus:border-blue-400"
            />
          </div>
          <div>
            <label className="block text-sm font-medium mb-2 text-gray-300">Industry</label>
            <Input
              defaultValue={businessProfileRef.current.industry}
              onChange={(e) => businessProfileRef.current.industry = e.target.value}
              placeholder="e.g., Real Estate, Marketing, Consulting"
              className="bg-white/10 border-white/20 text-white placeholder-gray-400 focus:border-blue-400"
            />
          </div>
        </div>
        <div className="mt-4">
          <label className="block text-sm font-medium mb-2 text-gray-300">Expertise & Services</label>
          <Textarea
            defaultValue={businessProfileRef.current.expertise}
            onChange={(e) => businessProfileRef.current.expertise = e.target.value}
            placeholder="Describe your main services and expertise..."
            rows={3}
            className="bg-white/10 border-white/20 text-white placeholder-gray-400 focus:border-blue-400"
          />
        </div>
      </div>

      {/* Communication Settings */}
      <div className="bg-white/10 backdrop-blur-lg rounded-2xl border border-white/20 p-6">
        <div className="flex items-center gap-2 mb-4">
          <MessageCircle className="w-5 h-5 text-blue-400" />
          <h3 className="text-lg font-semibold text-white">Communication Settings</h3>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium mb-2 text-gray-300">Communication Tone</label>
            <select
              value={aiSettings.communicationTone}
              onChange={(e) => handleAiSettingsChange('communicationTone', e.target.value)}
              className="w-full bg-white/10 border-white/20 text-white rounded-lg px-3 py-2 focus:border-blue-400"
            >
              <option value="professional">Professional</option>
              <option value="friendly">Friendly</option>
              <option value="casual">Casual</option>
              <option value="formal">Formal</option>
            </select>
          </div>
          <div>
            <label className="block text-sm font-medium mb-2 text-gray-300">Response Length</label>
            <select
              value={aiSettings.responseLength}
              onChange={(e) => handleAiSettingsChange('responseLength', e.target.value)}
              className="w-full bg-white/10 border-white/20 text-white rounded-lg px-3 py-2 focus:border-blue-400"
            >
              <option value="short">Short (1-2 paragraphs)</option>
              <option value="medium">Medium (2-3 paragraphs)</option>
              <option value="long">Long (3+ paragraphs)</option>
            </select>
          </div>
        </div>
      </div>

      {/* Knowledge Base */}
      <div className="bg-white/10 backdrop-blur-lg rounded-2xl border border-white/20 p-6">
        <div className="flex items-center gap-2 mb-4">
          <BookOpen className="w-5 h-5 text-blue-400" />
          <h3 className="text-lg font-semibold text-white">Knowledge Base</h3>
        </div>
        <Textarea
          defaultValue={knowledgeBaseRef.current}
          onChange={(e) => knowledgeBaseRef.current = e.target.value}
          placeholder="Add detailed information about your business, services, pricing, policies, etc. This helps the AI provide accurate and helpful responses..."
          rows={6}
          className="bg-white/10 border-white/20 text-white placeholder-gray-400 focus:border-blue-400"
        />
      </div>

      {/* Hot Lead Keywords */}
      <div className="bg-white/10 backdrop-blur-lg rounded-2xl border border-white/20 p-6">
        <div className="flex items-center gap-2 mb-4">
          <Target className="w-5 h-5 text-blue-400" />
          <h3 className="text-lg font-semibold text-white">Hot Lead Keywords</h3>
        </div>
        <p className="text-gray-300 mb-4">Keywords that indicate high-priority leads</p>
        <div className="space-y-3">
          <div className="flex flex-wrap gap-2">
            {aiSettings.hotLeadKeywords.map((keyword, index) => (
              <div
                key={`hot-lead-${index}-${keyword}`}
                onClick={() => removeHotLeadKeyword(index)}
                className="cursor-pointer flex items-center gap-1 px-3 py-1 rounded-full bg-red-500/20 border border-red-500/30 text-red-300 hover:bg-red-500/30 transition-colors"
              >
                {keyword}
                <X className="w-3 h-3" />
              </div>
            ))}
          </div>
          <div className="flex gap-2">
            <Input
              id="hotLeadKeywordInput"
              placeholder="Add hot lead keyword"
              onKeyPress={(e) => e.key === 'Enter' && addHotLeadKeyword()}
              className="bg-white/10 border-white/20 text-white placeholder-gray-400 focus:border-blue-400"
            />
            <Button onClick={addHotLeadKeyword} size="sm" className="bg-red-600 hover:bg-red-700 text-white">Add</Button>
          </div>
        </div>
      </div>

      {/* AI Behavior Toggles */}
      <div className="bg-white/10 backdrop-blur-lg rounded-2xl border border-white/20 p-6">
        <div className="flex items-center gap-2 mb-4">
          <Bot className="w-5 h-5 text-blue-400" />
          <h3 className="text-lg font-semibold text-white">AI Behavior</h3>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {[
            { key: 'includeAvailability', label: 'Include Availability', desc: 'Mention your availability in responses' },
            { key: 'askQualifyingQuestions', label: 'Ask Qualifying Questions', desc: 'Ask follow-up questions to understand needs' },
            { key: 'hotLeadAlerts', label: 'Hot Lead Alerts', desc: 'Get notifications for high-priority leads' },
            { key: 'smsLeadAlerts', label: 'SMS Lead Alerts', desc: 'Receive SMS notifications for urgent leads' }
          ].map(({ key, label, desc }) => (
            <div key={`behavior-${key}`} className="flex items-start space-x-3 p-3 bg-white/5 border border-white/10 rounded-lg">
              <input
                type="checkbox"
                checked={aiSettings.behaviors[key]}
                onChange={(e) => handleAiBehaviorChange(key, e.target.checked)}
                className="mt-1 rounded border-white/30 bg-white/10 text-blue-600 focus:ring-blue-500"
              />
              <div>
                <label className="text-sm font-medium text-white">{label}</label>
                <p className="text-xs text-gray-400">{desc}</p>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Custom Instructions */}
      <div className="bg-white/10 backdrop-blur-lg rounded-2xl border border-white/20 p-6">
        <div className="flex items-center gap-2 mb-4">
          <FileText className="w-5 h-5 text-blue-400" />
          <h3 className="text-lg font-semibold text-white">Custom AI Instructions</h3>
        </div>
        <Textarea
          value={aiSettings.customInstructions}
          onChange={(e) => handleAiSettingsChange('customInstructions', e.target.value)}
          placeholder="Add specific instructions for how the AI should behave and respond to customers..."
          rows={4}
          className="bg-white/10 border-white/20 text-white placeholder-gray-400 focus:border-blue-400"
        />
      </div>

      {/* Test AI Response */}
      <div className="bg-white/10 backdrop-blur-lg rounded-2xl border border-white/20 p-6">
        <div className="flex items-center gap-2 mb-4">
          <Zap className="w-5 h-5 text-blue-400" />
          <h3 className="text-lg font-semibold text-white">Test AI Response</h3>
        </div>
        <div className="space-y-4">
          <Button
            onClick={testAIResponse}
            disabled={testing}
            className="bg-purple-600 hover:bg-purple-700 text-white flex items-center gap-2"
          >
            {testing ? <RefreshCw className="w-4 h-4 animate-spin" /> : <Zap className="w-4 h-4" />}
            {testing ? 'Testing...' : 'Test AI Response'}
          </Button>
          {testResult && (
            <div className="bg-white/5 border border-white/10 rounded-lg p-4">
              <h4 className="text-sm font-medium text-white mb-2">AI Response:</h4>
              <p className="text-gray-300 text-sm">{testResult}</p>
            </div>
          )}
        </div>
      </div>

      {/* Save Button */}
      <div className="flex justify-end gap-3">
        <Button
          onClick={testAIResponse}
          disabled={testing}
          variant="outline"
          className="border-white/20 text-white hover:bg-white/10 flex items-center gap-2"
        >
          {testing ? <RefreshCw className="w-4 h-4 animate-spin" /> : <Zap className="w-4 h-4" />}
          {testing ? 'Testing...' : 'Test AI Response'}
        </Button>
        <Button
          onClick={saveAllSettings}
          disabled={saving}
          className="bg-blue-600 hover:bg-blue-700 text-white flex items-center gap-2"
        >
          {saving ? <RefreshCw className="w-4 h-4 animate-spin" /> : <CheckCircle className="w-4 h-4" />}
          {saving ? 'Saving...' : 'Save All Settings'}
        </Button>
      </div>
    </div>
  );

  // 🔧 AUTOMATION TAB - EMAIL FILTERING FULLY ENABLED AND WORKING
  const AutomationTab = () => (
    <div className="space-y-6">
      {/* Response Control */}
      <div className="bg-white/10 backdrop-blur-lg rounded-2xl border border-white/20 p-6">
        <div className="flex items-center gap-2 mb-4">
          <Bot className="w-5 h-5 text-blue-400" />
          <h3 className="text-lg font-semibold text-white">Response Control</h3>
        </div>
        <p className="text-gray-300 mb-6">Configure when and how AI responds</p>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {[
            { key: 'aiResponses', label: 'AI Responses', desc: 'Enable AI-generated responses' },
            { key: 'autoSend', label: 'Auto-Send', desc: 'Automatically send AI responses' },
            { key: 'businessHours', label: 'Business Hours', desc: 'Only respond during business hours' },
            { key: 'urgentPriority', label: 'Urgent Priority', desc: 'Prioritize urgent emails' }
          ].map(({ key, label, desc }) => (
            <div key={`response-${key}`} className="flex items-start space-x-3 p-3 bg-white/5 border border-white/10 rounded-lg">
              <input
                type="checkbox"
                checked={automationSettings.responseControl[key]}
                onChange={(e) => handleAutomationControlChange(key, e.target.checked)}
                className="mt-1 rounded border-white/30 bg-white/10 text-blue-600 focus:ring-blue-500"
              />
              <div>
                <label className="text-sm font-medium text-white">{label}</label>
                <p className="text-xs text-gray-400">{desc}</p>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* ✅ EMAIL FILTERING - FULLY FUNCTIONAL AND ENABLED */}
      <div className="bg-white/10 backdrop-blur-lg rounded-2xl border border-white/20 p-6">
        <div className="flex items-center gap-2 mb-4">
          <Filter className="w-5 h-5 text-blue-400" />
          <h3 className="text-lg font-semibold text-white">Email Filtering</h3>
        </div>
        <p className="text-gray-300 mb-6">Automatically filter emails to focus on real inquiries</p>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {[
            { key: 'autoArchiveSpam', label: 'Auto-Archive Spam', desc: 'Automatically filter out spam emails' },
            { key: 'blockMassEmails', label: 'Block Mass Emails', desc: 'Filter newsletters and promotional emails' },
            { key: 'personalOnly', label: 'Personal Only', desc: 'Only process emails that appear personal' },
            { key: 'skipAutoGenerated', label: 'Skip Auto-Generated', desc: 'Ignore automated system emails' }
          ].map(({ key, label, desc }) => (
            <div key={`filter-${key}`} className="flex items-start space-x-3 p-3 bg-white/5 border border-white/10 rounded-lg">
              <input
                type="checkbox"
                checked={automationSettings.emailFiltering[key]}
                onChange={(e) => handleEmailFilteringChange(key, e.target.checked)}
                className="mt-1 rounded border-white/30 bg-white/10 text-blue-600 focus:ring-blue-500"
              />
              <div>
                <label className="text-sm font-medium text-white">{label}</label>
                <p className="text-xs text-gray-400">{desc}</p>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* ✅ BUSINESS RULES - FULLY FUNCTIONAL */}
      <div className="bg-white/10 backdrop-blur-lg rounded-2xl border border-white/20 p-6">
        <div className="flex items-center gap-2 mb-4">
          <Shield className="w-5 h-5 text-blue-400" />
          <h3 className="text-lg font-semibold text-white">Business Rules</h3>
        </div>
        <p className="text-gray-300 mb-6">Blacklist, whitelist, and custom keywords</p>
        <div className="space-y-6">
          {/* Blacklist */}
          <div>
            <label className="block text-sm font-medium mb-2 text-gray-300">Blacklist (Block these emails/domains)</label>
            <div className="space-y-2">
              <div className="flex flex-wrap gap-2">
                {automationSettings.businessRules.blacklist.map((item, index) => (
                  <div 
                    key={`blacklist-${index}-${item}`}
                    onClick={() => removeFromBlacklist(index)}
                    className="cursor-pointer flex items-center gap-1 px-3 py-1 rounded-full bg-red-500/20 border border-red-500/30 text-red-300 hover:bg-red-500/30 transition-colors"
                  >
                    {item}
                    <X className="w-3 h-3" />
                  </div>
                ))}
              </div>
              <div className="flex gap-2">
                <Input
                  value={newBlacklistItem}
                  onChange={(e) => setNewBlacklistItem(e.target.value)}
                  placeholder="Add email or domain to blacklist"
                  onKeyPress={(e) => e.key === 'Enter' && addToBlacklist()}
                  className="bg-white/10 border-white/20 text-white placeholder-gray-400 focus:border-blue-400"
                />
                <Button onClick={addToBlacklist} size="sm" className="bg-red-600 hover:bg-red-700 text-white">Add</Button>
              </div>
            </div>
          </div>

          {/* Whitelist */}
          <div>
            <label className="block text-sm font-medium mb-2 text-gray-300">Whitelist (Always allow these emails/domains)</label>
            <div className="space-y-2">
              <div className="flex flex-wrap gap-2">
                {automationSettings.businessRules.whitelist.map((item, index) => (
                  <div 
                    key={`whitelist-${index}-${item}`}
                    onClick={() => removeFromWhitelist(index)}
                    className="cursor-pointer flex items-center gap-1 px-3 py-1 rounded-full bg-green-500/20 border border-green-500/30 text-green-300 hover:bg-green-500/30 transition-colors"
                  >
                    {item}
                    <X className="w-3 h-3" />
                  </div>
                ))}
              </div>
              <div className="flex gap-2">
                <Input
                  value={newWhitelistItem}
                  onChange={(e) => setNewWhitelistItem(e.target.value)}
                  placeholder="Add email or domain to whitelist"
                  onKeyPress={(e) => e.key === 'Enter' && addToWhitelist()}
                  className="bg-white/10 border-white/20 text-white placeholder-gray-400 focus:border-blue-400"
                />
                <Button onClick={addToWhitelist} size="sm" className="bg-green-600 hover:bg-green-700 text-white">Add</Button>
              </div>
            </div>
          </div>

          {/* Custom Keywords */}
          <div>
            <label className="block text-sm font-medium mb-2 text-gray-300">Priority Keywords (High priority filtering)</label>
            <div className="space-y-2">
              <div className="flex flex-wrap gap-2">
                {automationSettings.businessRules.customKeywords.map((keyword, index) => (
                  <div 
                    key={`custom-keyword-${index}-${keyword}`}
                    onClick={() => removeCustomKeyword(index)}
                    className="cursor-pointer flex items-center gap-1 px-3 py-1 rounded-full bg-purple-500/20 border border-purple-500/30 text-purple-300 hover:bg-purple-500/30 transition-colors"
                  >
                    {keyword}
                    <X className="w-3 h-3" />
                  </div>
                ))}
              </div>
              <div className="flex gap-2">
                <Input
                  value={newCustomKeyword}
                  onChange={(e) => setNewCustomKeyword(e.target.value)}
                  placeholder="Add priority keyword"
                  onKeyPress={(e) => e.key === 'Enter' && addCustomKeyword()}
                  className="bg-white/10 border-white/20 text-white placeholder-gray-400 focus:border-blue-400"
                />
                <Button onClick={addCustomKeyword} size="sm" className="bg-purple-600 hover:bg-purple-700 text-white">Add</Button>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Save Button */}
      <div className="flex justify-end">
        <Button 
          onClick={saveAllSettings} 
          disabled={saving} 
          className="flex items-center gap-2 bg-blue-600 hover:bg-blue-700 text-white"
        >
          {saving ? <RefreshCw className="w-4 h-4 animate-spin" /> : <CheckCircle className="w-4 h-4" />}
          {saving ? 'Saving...' : 'Save Automation Settings'}
        </Button>
      </div>
    </div>
  );

  // Loading state
  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-900 via-blue-900 to-purple-900 p-6">
        <div className="animate-pulse space-y-4 max-w-7xl mx-auto">
          <div className="h-8 bg-white/20 rounded-xl w-1/4"></div>
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            {[1,2,3,4].map(i => (
              <div key={i} className="h-24 bg-white/10 rounded-2xl backdrop-blur-lg border border-white/20"></div>
            ))}
          </div>
          <div className="grid grid-cols-1 lg:grid-cols-5 gap-6">
            <div className="lg:col-span-2 h-96 bg-white/10 rounded-2xl backdrop-blur-lg border border-white/20"></div>
            <div className="lg:col-span-3 h-96 bg-white/10 rounded-2xl backdrop-blur-lg border border-white/20"></div>
          </div>
        </div>
      </div>
    );
  }

  // Main render
  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-blue-900 to-purple-900">
      <div className="p-6 max-w-7xl mx-auto">
        {/* Header */}
        <div className="flex items-center gap-4 mb-6">
          <Button 
            variant="outline" 
            onClick={() => router.push('/dashboard')}
            className="flex items-center gap-2 bg-white/10 border-white/20 text-white hover:bg-white/20 backdrop-blur-lg"
          >
            <ArrowLeft className="w-4 h-4" />
            Dashboard
          </Button>
          <div className="flex-1">
            <h1 className="text-2xl font-bold flex items-center gap-2 text-white">
              <Mail className="w-6 h-6" />
              Email AI Manager
            </h1>
            <p className="text-gray-300">Unified Gmail automation with smart AI responses and filtering</p>
          </div>
        </div>

        {/* Tab Navigation */}
        <div className="mb-6">
          <div className="border-b border-white/20">
            <nav className="-mb-px flex space-x-8">
              {tabs.map(tab => {
                const Icon = tab.icon;
                return (
                  <button
                    key={tab.id}
                    onClick={() => setActiveTab(tab.id)}
                    className={`whitespace-nowrap py-2 px-1 border-b-2 font-medium text-sm ${
                      activeTab === tab.id
                        ? 'border-blue-400 text-blue-300'
                        : 'border-transparent text-gray-400 hover:text-gray-300 hover:border-gray-500'
                    }`}
                  >
                    <div className="flex items-center gap-2">
                      <Icon className="w-4 h-4" />
                      {tab.label}
                    </div>
                  </button>
                );
              })}
            </nav>
          </div>
          <div className="mt-2">
            <p className="text-sm text-gray-400">
              {tabs.find(tab => tab.id === activeTab)?.description}
            </p>
          </div>
        </div>

        {/* Tab Content */}
        <div className="tab-content">
          {activeTab === 'dashboard' && <DashboardTab />}
          {activeTab === 'ai-settings' && <AISettingsTab />}
          {activeTab === 'automation' && <AutomationTab />}
          {activeTab === 'connections' && <ConnectionsTab />}
        </div>
      </div>
    </div>
  );
}
