'use client';

import { useState, useEffect, useRef, useCallback, useMemo } from 'react';
import { useRouter } from 'next/navigation';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import ConnectionsTab from '@/components/ConnectionsTab';
import { 
  Mail, 
  Settings, 
  Send, 
  Users, 
  TrendingUp, 
  Clock, 
  ArrowLeft,
  MessageSquare,
  Bot,
  FileText,
  Sparkles,
  Zap,
  Target,
  CheckCircle,
  AlertCircle,
  RefreshCw,
  Eye,
  ExternalLink,
  Link as LinkIcon,
  Globe,
  BarChart3,
  Wrench,
  Volume2,
  VolumeX,
  Filter,
  Inbox,
  Shield,
  Building,
  MessageCircle,
  Phone,
  Archive,
  X,
  BookOpen,
  Power,
  Brain,
  Info,
  UserCheck,
  Play,
  Pause,
  Square,
  Calendar,
  DollarSign,
  TrendingDown,
  Activity
} from 'lucide-react';

export default function CompleteEmailSystem() {
  const router = useRouter();
  const [activeTab, setActiveTab] = useState('dashboard');
  const refreshIntervalRef = useRef(null);
  const autoPollIntervalRef = useRef(null);
  
  const businessProfileRef = useRef({
    name: '',
    industry: '',
    expertise: ''
  });
  
  const knowledgeBaseRef = useRef('');
  
  // 🎯 ADDED: Preview state and ref for the textarea
  const [showingPreview, setShowingPreview] = useState(false);
  const [previewResponse, setPreviewResponse] = useState(null);
  const [generatingPreview, setGeneratingPreview] = useState(false);
  const previewTextareaRef = useRef(null);
  
  // 🎯 UNIFIED: Single auto-poll state that controls everything
  // FIXED: Set interval to 30 seconds permanently
  const [autoPollStatus, setAutoPollStatus] = useState({
    isRunning: false,
    isEnabled: false,
    lastPoll: null,
    interval: 30, // Fixed at 30 seconds
    totalEmailsProcessed: 0,
    totalResponsesSent: 0
  });
  
  const [conversations, setConversations] = useState([]);
  const [gmailEmails, setGmailEmails] = useState([]);
  const [selectedConversation, setSelectedConversation] = useState(null);
  const [selectedGmailEmail, setSelectedGmailEmail] = useState(null);
  const [newMessage, setNewMessage] = useState('');
  const [loading, setLoading] = useState(true);
  const [gmailLoading, setGmailLoading] = useState(false);
  const [responding, setResponding] = useState(false);
  const [gmailConnection, setGmailConnection] = useState(null);
  const [lastRefresh, setLastRefresh] = useState(new Date());
  const [saving, setSaving] = useState(false);
  const [reconnecting, setReconnecting] = useState(false);
  
  const [testResult, setTestResult] = useState(null);
  const [testing, setTesting] = useState(false);

  const [activeEmailView, setActiveEmailView] = useState('inbox');
  const [sentEmails, setSentEmails] = useState([]);
  
  // UPDATED STATS - Only the 4 metrics you want
  const [stats, setStats] = useState({
    totalResponsesSent: 0,      // AI Responses Sent
    totalLeadsCaptured: 0,      // Leads Captured
    meetingsBooked: 0,          // Meetings Booked
    avgResponseTimeMinutes: 0   // Response Time
  });

  const formatTime = (minutes) => {
    if (!minutes || minutes === 0) return '0m';
    if (minutes < 60) return `${Math.round(minutes)}m`;
    const hours = Math.floor(minutes / 60);
    const mins = Math.round(minutes % 60);
    return mins > 0 ? `${hours}h ${mins}m` : `${hours}h`;
  };

  const [dashboardSettings, setDashboardSettings] = useState({
    autoRefresh: true,
    refreshInterval: 30
  });

  // 🎯 SIMPLIFIED: AI settings without the conflicting toggle
  const [aiSettings, setAiSettings] = useState({
    communicationTone: 'professional',
    knowledgeBase: '',
    hotLeadKeywords: ['urgent', 'asap', 'budget', 'ready'],
    customInstructions: '',
    aiModel: 'gpt-4o-mini',
    creativity: 0.7,
    responseLength: 'medium',
    behaviors: {
      hotLeadAlerts: true,
      smsLeadAlerts: false
    }
  });

  const [automationSettings, setAutomationSettings] = useState({
    emailFiltering: {
      autoArchiveSpam: true,
      blockMassEmails: true,
      personalOnly: false,
      skipAutoGenerated: true
    },
    businessRules: {
      blacklist: [],
      whitelist: [],
      customKeywords: []
    }
  });

  const [newBlacklistItem, setNewBlacklistItem] = useState('');
  const [newWhitelistItem, setNewWhitelistItem] = useState('');
  const [newCustomKeyword, setNewCustomKeyword] = useState('');

  // 🎯 ADDED: Handle preview generation
  const handlePreviewAIResponse = async (emailId) => {
    if (!gmailConnection) return;
    
    setGeneratingPreview(true);
    setShowingPreview(false);
    setPreviewResponse(null);
    
    try {
      console.log('🚀 Generating AI preview for email:', emailId);
      
      const response = await fetch('/api/gmail/monitor', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'respond',
          emailAddress: gmailConnection.email,
          emailId: emailId,
          actualSend: false  // Preview only
        })
      });

      if (response.ok) {
        const data = await response.json();
        console.log('📧 Preview generated:', data);
        
        const generatedResponse = data.response || data.aiResponse || 'No response generated';
        setPreviewResponse(generatedResponse);
        
        // Show the preview section first
        setShowingPreview(true);
        
        // Then set the textarea value after a tiny delay
        setTimeout(() => {
          if (previewTextareaRef.current) {
            previewTextareaRef.current.value = generatedResponse;
            previewTextareaRef.current.focus();
          }
        }, 10);
        
        return data;
      }
    } catch (error) {
      console.error('❌ Error generating preview:', error);
      alert('Failed to generate preview. Please try again.');
    } finally {
      setGeneratingPreview(false);
    }
  };

  // 🎯 ADDED: Send edited response
  const sendEditedResponse = async () => {
    if (!gmailConnection || !selectedGmailEmail || !previewTextareaRef.current) return;
    
    const editedResponse = previewTextareaRef.current.value;
    if (!editedResponse.trim()) {
      alert('Please enter a response message');
      return;
    }
    
    setResponding(true);
    try {
      console.log('🚀 Sending edited response:', editedResponse);
      
      const response = await fetch('/api/gmail/monitor', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'respond',
          emailAddress: gmailConnection.email,
          emailId: selectedGmailEmail.id,
          actualSend: true,
          customResponse: editedResponse  // Send the edited text
        })
      });

      if (response.ok) {
        const data = await response.json();
        console.log('✅ Response sent successfully');
        
        // Add to sent emails
        const sentEmail = {
          id: `sent-${Date.now()}-${selectedGmailEmail.id}`,
          originalEmailId: selectedGmailEmail.id,
          to: selectedGmailEmail.fromEmail || 'unknown@example.com',
          toName: selectedGmailEmail.fromName || selectedGmailEmail.fromEmail || 'Unknown',
          originalSubject: selectedGmailEmail.subject || 'No Subject',
          response: editedResponse,
          sentTime: new Date().toLocaleString(),
          timestamp: new Date(),
          status: 'sent'
        };
        
        setSentEmails(prev => [sentEmail, ...prev]);
        
        // Update stats - increment responses sent
        setStats(prev => ({
          ...prev,
          totalResponsesSent: prev.totalResponsesSent + 1
        }));
        
        // Hide preview and switch to sent tab
        setShowingPreview(false);
        setPreviewResponse(null);
        setTimeout(() => {
          setActiveEmailView('sent');
          checkGmailEmails(false);
        }, 500);
        
        alert('✅ Response sent successfully!');
      } else {
        throw new Error('Failed to send response');
      }
    } catch (error) {
      console.error('❌ Error sending response:', error);
      alert('Failed to send response. Please try again.');
    } finally {
      setResponding(false);
    }
  };

  // 🎯 UNIFIED: Toggle that controls both auto-polling AND AI responses
  const toggleAutoPoll = useCallback(async () => {
    const newState = !autoPollStatus.isRunning;
    const newEnabled = !autoPollStatus.isEnabled;
    
    console.log(`🔄 Toggling Auto-Poll: ${newState ? 'ON' : 'OFF'}`);
    console.log(`🤖 AI Responses will be: ${newEnabled ? 'ENABLED' : 'DISABLED'}`);
    
    // Update local state immediately for responsive UI
    setAutoPollStatus(prev => ({ 
      ...prev, 
      isRunning: newState,
      isEnabled: newEnabled
    }));
    
    // Save to database
    setSaving(true);
    try {
      // 🎯 UPDATED: Use the new save endpoint for business rules
      const response = await fetch('/api/email-settings/save', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          enable_ai_responses: newEnabled,
          tone: aiSettings.communicationTone,
          ai_model: aiSettings.aiModel,
          response_length: aiSettings.responseLength,
          custom_instructions: aiSettings.customInstructions,
          knowledge_base: knowledgeBaseRef.current,
          expertise: businessProfileRef.current.industry,
          specialties: businessProfileRef.current.expertise,
          hot_lead_keywords: aiSettings.hotLeadKeywords,
          alert_hot_leads: aiSettings.behaviors.hotLeadAlerts,
          sms_lead_alerts: aiSettings.behaviors.smsLeadAlerts,
          ai_temperature: aiSettings.creativity,
          ai_max_tokens: 500,
          auto_archive_spam: automationSettings.emailFiltering.autoArchiveSpam,
          block_mass_emails: automationSettings.emailFiltering.blockMassEmails,
          personal_only: automationSettings.emailFiltering.personalOnly,
          skip_auto_generated: automationSettings.emailFiltering.skipAutoGenerated,
          blacklist_emails: automationSettings.businessRules.blacklist,
          whitelist_emails: automationSettings.businessRules.whitelist,
          priority_keywords: automationSettings.businessRules.customKeywords
        })
      });

      if (response.ok) {
        console.log('✅ AI settings saved successfully');
        
        if (newState) {
          // Start polling
          if (autoPollIntervalRef.current) {
            clearInterval(autoPollIntervalRef.current);
          }
          
          // Fixed 30 second interval
          const effectiveInterval = 30;
          console.log('🚀 Starting auto-poll with interval:', effectiveInterval, 'seconds');
          
          // Delay first run by 3 seconds
          setTimeout(() => {
            runAutoPoll();
          }, 3000);
          
          // Set up interval
          autoPollIntervalRef.current = setInterval(() => {
            runAutoPoll();
          }, effectiveInterval * 1000);
        } else {
          // Stop polling
          console.log('🛑 Stopping auto-poll');
          if (autoPollIntervalRef.current) {
            clearInterval(autoPollIntervalRef.current);
            autoPollIntervalRef.current = null;
          }
        }
      } else {
        throw new Error('Failed to save settings');
      }
    } catch (error) {
      console.error('❌ Error saving settings:', error);
      // Revert on error
      setAutoPollStatus(prev => ({ 
        ...prev, 
        isRunning: !newState,
        isEnabled: !newEnabled
      }));
      alert('Failed to save settings. Please try again.');
    } finally {
      setSaving(false);
    }
  }, [autoPollStatus, aiSettings, automationSettings]);

  // 🎯 FIXED: Client-side auto-poll that calls monitor API directly
  const runAutoPoll = useCallback(async () => {
    if (!gmailConnection?.email) return;
    
    console.log('🔄 Running auto-poll cycle...');
    
    try {
      // Step 1: Check for emails directly (not through auto-poll API)
      console.log('📬 Checking for new emails...');
      
      const checkResponse = await fetch('/api/gmail/monitor', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'check',
          emailAddress: gmailConnection.email
        })
      });

      if (!checkResponse.ok) {
        console.error('❌ Monitor check failed:', checkResponse.status);
        return;
      }

      const emailData = await checkResponse.json();
      const emails = emailData.emails || [];
      console.log('📊 Found', emails.length, 'emails');
      
      // Update the email list in UI
      setGmailEmails(emails);
      
      // Step 2: If enabled and we have emails, send AI responses
      if (autoPollStatus.isEnabled && emails.length > 0) {
        console.log('🤖 Processing emails with AI responses...');
        
        // Process up to 2 emails at a time
        const emailsToProcess = emails.slice(0, 2);
        let responsesGenerated = 0;
        
        for (let i = 0; i < emailsToProcess.length; i++) {
          const email = emailsToProcess[i];
          console.log(`📧 Processing email ${i + 1}: "${email.subject}"`);
          
          try {
            const respondResponse = await fetch('/api/gmail/monitor', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({
                action: 'respond',
                emailAddress: gmailConnection.email,
                emailId: email.id,
                actualSend: true
              })
            });

            if (respondResponse.ok) {
              const responseData = await respondResponse.json();
              if (responseData.success) {
                responsesGenerated++;
                console.log(`✅ AI response sent for email ${i + 1}`);
                
                // Add to sent emails list
                const sentEmail = {
                  id: `sent-${Date.now()}-${email.id}`,
                  originalEmailId: email.id,
                  to: email.fromEmail || 'unknown@example.com',
                  toName: email.fromName || email.fromEmail || 'Unknown',
                  originalSubject: email.subject || 'No Subject',
                  response: responseData.response || responseData.aiResponse || 'Response sent',
                  sentTime: new Date().toLocaleString(),
                  timestamp: new Date(),
                  status: 'sent'
                };
                
                setSentEmails(prev => [sentEmail, ...prev]);
                
                // Update stats
                setStats(prev => ({
                  ...prev,
                  totalResponsesSent: prev.totalResponsesSent + 1
                }));
              } else {
                console.log(`⚠️ Response not sent for email ${i + 1}:`, responseData.error);
              }
            } else {
              console.error(`❌ Failed to respond to email ${i + 1}:`, respondResponse.status);
            }
            
            // Wait 1 second between responses
            if (i < emailsToProcess.length - 1) {
              await new Promise(resolve => setTimeout(resolve, 1000));
            }
          } catch (err) {
            console.error(`❌ Failed to respond to email ${i + 1}:`, err);
          }
        }
        
        // Update counters
        setAutoPollStatus(prev => ({
          ...prev,
          lastPoll: new Date(),
          totalEmailsProcessed: prev.totalEmailsProcessed + emails.length,
          totalResponsesSent: prev.totalResponsesSent + responsesGenerated
        }));
        
        console.log(`🎉 Auto-poll completed: ${responsesGenerated} responses sent`);
      } else {
        // Just update the last poll time
        setAutoPollStatus(prev => ({
          ...prev,
          lastPoll: new Date(),
          totalEmailsProcessed: prev.totalEmailsProcessed + emails.length
        }));
        
        console.log('🔭 No emails to process or AI disabled');
      }
      
      // Refresh the UI
      setLastRefresh(new Date());
      
    } catch (error) {
      console.error('❌ Auto-poll error:', error);
    }
  }, [gmailConnection?.email, autoPollStatus.isEnabled]);

  // Stop auto-poll function
  const stopAutoPoll = useCallback(() => {
    console.log('🛑 Stopping auto-poll');
    
    if (autoPollIntervalRef.current) {
      clearInterval(autoPollIntervalRef.current);
      autoPollIntervalRef.current = null;
    }
    
    setAutoPollStatus(prev => ({ ...prev, isRunning: false }));
  }, []);

  const handleAiBehaviorChange = useCallback((field, value) => {
    setAiSettings(prev => ({
      ...prev,
      behaviors: { ...prev.behaviors, [field]: value }
    }));
  }, []);

  const handleEmailFilteringChange = useCallback((field, value) => {
    setAutomationSettings(prev => ({
      ...prev,
      emailFiltering: { ...prev.emailFiltering, [field]: value }
    }));
  }, []);

  const tabs = useMemo(() => [
    { 
      id: 'dashboard', 
      label: 'Dashboard', 
      icon: BarChart3,
      description: 'Real-time Gmail conversations and AI responses'
    },
    { 
      id: 'ai-settings', 
      label: 'AI Settings', 
      icon: Bot,
      description: 'Business profile, communication tone, and AI behavior'
    },
    { 
      id: 'automation', 
      label: 'Automation', 
      icon: Wrench,
      description: 'Email filtering rules and business controls'
    },
    { 
      id: 'connections', 
      label: 'Connections', 
      icon: Settings,
      description: 'Manage Gmail and domain email connections'
    }
  ], []);

  useEffect(() => {
    loadInitialData();
    handleUrlParameters();
  }, []);

  const handleUrlParameters = () => {
    const urlParams = new URLSearchParams(window.location.search);
    const tab = urlParams.get('tab');
    const success = urlParams.get('success');
    const error = urlParams.get('error');
    
    console.log('🔍 URL Parameters:', { tab, success, error });
    
    if (tab && tabs.some(t => t.id === tab)) {
      console.log('🎯 Setting active tab to:', tab);
      setActiveTab(tab);
    }
    
    if (success === 'gmail_connected') {
      console.log('✅ Gmail connection successful');
    }
    
    if (error) {
      console.log('❌ OAuth error:', error);
    }
    
    if (tab || success || error) {
      const newUrl = window.location.pathname;
      window.history.replaceState({}, document.title, newUrl);
      console.log('🧹 Cleaned URL parameters');
    }
  };

  useEffect(() => {
    console.log('📊 Sent emails state changed:', sentEmails);
  }, [sentEmails]);

  useEffect(() => {
    if (refreshIntervalRef.current) {
      clearInterval(refreshIntervalRef.current);
      refreshIntervalRef.current = null;
    }

    if (activeTab === 'dashboard' && gmailConnection && !loading && !autoPollStatus.isRunning) {
      refreshIntervalRef.current = setInterval(() => {
        checkGmailEmails(true);
        setLastRefresh(new Date());
      }, dashboardSettings.refreshInterval * 1000);
    }

    return () => {
      if (refreshIntervalRef.current) {
        clearInterval(refreshIntervalRef.current);
        refreshIntervalRef.current = null;
      }
    };
  }, [activeTab, gmailConnection?.email, dashboardSettings.refreshInterval, loading, autoPollStatus.isRunning]);

  useEffect(() => {
    return () => {
      if (autoPollIntervalRef.current) {
        clearInterval(autoPollIntervalRef.current);
      }
    };
  }, []);

  const loadInitialData = async () => {
    setLoading(true);
    try {
      await Promise.all([
        loadEmailData(),
        checkGmailConnection(),
        loadAISettings(),
        loadEmailSettings()  // 🎯 NEW: Load email settings separately
      ]);
    } catch (error) {
      console.error('Error loading initial data:', error);
    } finally {
      setLoading(false);
    }
  };

  const loadEmailData = async () => {
    try {
      const convResponse = await fetch('/api/customer/email-conversations');
      if (convResponse.ok) {
        const convData = await convResponse.json();
        setConversations(convData.conversations || []);
      }

      const statsResponse = await fetch('/api/customer/email-stats');
      if (statsResponse.ok) {
        const statsData = await statsResponse.json();
        if (statsData.success && statsData.stats) {
          // Map to our simplified 4 metrics
          setStats({
            totalResponsesSent: statsData.stats.totalResponsesSent || autoPollStatus.totalResponsesSent || 0,
            totalLeadsCaptured: statsData.stats.totalLeadsCaptured || 0,
            meetingsBooked: statsData.stats.meetingsBooked || 0,
            avgResponseTimeMinutes: statsData.stats.avgResponseTimeMinutes || 0
          });
        }
      }
    } catch (error) {
      console.error('Error loading email data:', error);
    }
  };

  const checkGmailConnection = async () => {
    try {
      const response = await fetch('/api/gmail/status');
      if (response.ok) {
        const data = await response.json();
        
        if (data.connected && data.connection) {
          setGmailConnection(data.connection);
        } else {
          setGmailConnection(null);
        }
      }
    } catch (error) {
      console.error('Error checking Gmail connection:', error);
      setGmailConnection(null);
    }
  };

  const loadAISettings = async () => {
    try {
      const response = await fetch('/api/customer/ai-settings');
      if (response.ok) {
        const data = await response.json();
        if (data.settings) {
          businessProfileRef.current = {
            name: data.customer?.business_name || '',
            industry: data.settings.expertise || '',
            expertise: data.settings.specialties || ''
          };
          
          knowledgeBaseRef.current = data.settings.knowledge_base || '';
          
          // 🎯 IMPORTANT: Load the enabled state from database
          const isEnabled = data.settings.enable_ai_responses !== false;
          setAutoPollStatus(prev => ({
            ...prev,
            isEnabled: isEnabled
          }));
          
          setAiSettings(prev => ({
            ...prev,
            communicationTone: data.settings.tone || 'professional',
            knowledgeBase: data.settings.knowledge_base || '',
            customInstructions: data.settings.custom_instructions || data.settings.ai_system_prompt || '',
            aiModel: data.settings.ai_model || 'gpt-4o-mini',
            creativity: parseFloat(data.settings.ai_temperature) || 0.7,
            responseLength: data.settings.response_length || 'medium',
            behaviors: {
              hotLeadAlerts: data.settings.alert_hot_leads !== false,
              smsLeadAlerts: data.settings.sms_lead_alerts === true
            }
          }));

          if (data.settings.hot_lead_keywords) {
            setAiSettings(prev => ({
              ...prev,
              hotLeadKeywords: Array.isArray(data.settings.hot_lead_keywords) 
                ? data.settings.hot_lead_keywords 
                : prev.hotLeadKeywords
            }));
          }
        }
      } else if (response.status === 404) {
        console.log('AI settings API not found - using defaults');
      }
    } catch (error) {
      console.log('AI settings not available - using defaults');
    }
  };

  // 🎯 NEW: Load email settings (business rules) separately
  const loadEmailSettings = async () => {
    try {
      const response = await fetch('/api/email-settings/save', {
        method: 'GET'
      });
      
      if (response.ok) {
        const data = await response.json();
        if (data.settings) {
          // Load blacklist/whitelist/priority keywords
          setAutomationSettings(prev => ({
            ...prev,
            emailFiltering: {
              autoArchiveSpam: data.settings.auto_archive_spam !== false,
              blockMassEmails: data.settings.block_mass_emails !== false,
              personalOnly: data.settings.personal_only || false,
              skipAutoGenerated: data.settings.skip_auto_generated !== false
            },
            businessRules: {
              blacklist: data.settings.blacklist_emails || [],
              whitelist: data.settings.whitelist_emails || [],
              customKeywords: data.settings.priority_keywords || []
            }
          }));
          
          console.log('✅ Loaded email settings with business rules');
        }
      }
    } catch (error) {
      console.error('Error loading email settings:', error);
    }
  };

  // 🎯 UPDATED: Save all settings using the new endpoint
  const saveAllSettings = async () => {
    setSaving(true);
    try {
      // Prepare all settings for saving
      const settingsToSave = {
        // AI Response settings
        enable_ai_responses: autoPollStatus.isEnabled,
        tone: aiSettings.communicationTone,
        expertise: businessProfileRef.current.industry,
        specialties: businessProfileRef.current.expertise,
        knowledge_base: knowledgeBaseRef.current,
        custom_instructions: aiSettings.customInstructions,
        ai_system_prompt: aiSettings.customInstructions,
        ai_model: aiSettings.aiModel,
        ai_temperature: aiSettings.creativity,
        ai_max_tokens: 500,
        response_length: aiSettings.responseLength,
        alert_hot_leads: aiSettings.behaviors.hotLeadAlerts,
        sms_lead_alerts: aiSettings.behaviors.smsLeadAlerts,
        hot_lead_keywords: aiSettings.hotLeadKeywords,
        
        // Email filtering settings
        auto_archive_spam: automationSettings.emailFiltering.autoArchiveSpam,
        block_mass_emails: automationSettings.emailFiltering.blockMassEmails,
        personal_only: automationSettings.emailFiltering.personalOnly,
        skip_auto_generated: automationSettings.emailFiltering.skipAutoGenerated,
        
        // Business rules - THESE ARE THE KEY ONES!
        blacklist_emails: automationSettings.businessRules.blacklist,
        whitelist_emails: automationSettings.businessRules.whitelist,
        priority_keywords: automationSettings.businessRules.customKeywords
      };

      console.log('💾 Saving all settings with business rules:', settingsToSave);

      // 🎯 CRITICAL: Use the new endpoint that properly handles JSONB
      const response = await fetch('/api/email-settings/save', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(settingsToSave)
      });

      if (response.ok) {
        const result = await response.json();
        console.log('✅ Settings saved successfully:', result);
        
        // Show what was actually saved
        if (result.processed) {
          console.log('📋 Saved business rules:', {
            blacklist: result.processed.blacklist_emails,
            whitelist: result.processed.whitelist_emails,
            priority: result.processed.priority_keywords
          });
        }
        
        alert('✅ Settings saved successfully!');
      } else {
        const errorData = await response.json();
        console.error('❌ Failed to save settings:', errorData);
        alert(`❌ Failed to save settings: ${errorData.error || 'Unknown error'}`);
      }
    } catch (error) {
      console.error('❌ Error saving settings:', error);
      alert('❌ Error saving settings. Please try again.');
    } finally {
      setSaving(false);
    }
  };

  const testAIResponse = async () => {
    setTesting(true);
    setTestResult(null);
    try {
      const response = await fetch('/api/customer/test-ai-response', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          message: "Hi, I'm urgently looking for a 3-bedroom house under $500K. Can you help me find something ASAP? I'm ready to buy immediately.",
          settings: {
            ...aiSettings,
            business_name: businessProfileRef.current.name,
            knowledge_base: knowledgeBaseRef.current,
            custom_instructions: aiSettings.customInstructions,
            ai_model: aiSettings.aiModel,
            ai_temperature: aiSettings.creativity,
            response_length: aiSettings.responseLength,
            enable_ai_responses: autoPollStatus.isEnabled // Use unified state
          }
        })
      });

      const data = await response.json();
      if (data.success) {
        setTestResult(data);
      } else {
        alert('Error testing AI: ' + data.error);
      }
    } catch (error) {
      console.error('Error testing AI:', error);
      alert('Error testing AI response');
    } finally {
      setTesting(false);
    }
  };

  const connectGmail = () => {
    if (gmailConnection) {
      setReconnecting(true);
      console.log('🔗 Reconnecting Gmail account...');
    } else {
      console.log('🔗 Connecting Gmail account...');
    }
    window.location.href = '/api/auth/google';
  };

  const checkGmailEmails = async (silent = false) => {
    if (!gmailConnection) {
      console.log('No Gmail connection available');
      return;
    }
    
    if (!silent) setGmailLoading(true);
    try {
      const response = await fetch('/api/gmail/monitor', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'check',
          emailAddress: gmailConnection.email
        })
      });

      if (response.ok) {
        const data = await response.json();
        setGmailEmails(data.emails || []);
        
        if (!silent) setLastRefresh(new Date());
        
        // 🎯 NEW: Show blacklist status if any were filtered
        if (data.blacklistedCount > 0) {
          console.log(`🚫 ${data.blacklistedCount} blacklisted emails were archived`);
        }
      } else if (response.status === 401) {
        console.log('⚠️ Gmail authentication expired - please reconnect');
        setGmailConnection(null);
      } else if (response.status === 404) {
        console.log('⚠️ Gmail monitor API not available');
      } else {
        console.error('Gmail check failed:', response.status);
      }
    } catch (error) {
      console.error('Error checking Gmail emails:', error);
    } finally {
      if (!silent) setGmailLoading(false);
    }
  };

  const sendAIResponse = async (emailId, preview = false) => {
    if (!gmailConnection) return;
    
    setResponding(true);
    try {
      console.log('🚀 Sending AI response:', { emailId, preview, selectedEmail: selectedGmailEmail });
      
      const response = await fetch('/api/gmail/monitor', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'respond',
          emailAddress: gmailConnection.email,
          emailId: emailId,
          actualSend: !preview
        })
      });

      if (response.ok) {
        const data = await response.json();
        console.log('📧 API Response:', data);
        
        // 🎯 NEW: Check if email was blacklisted
        if (data.filtered && data.isBlacklisted) {
          alert(`🚫 This email is blacklisted. No response will be sent.`);
          return data;
        }
        
        if (!preview && data.success) {
          const sentEmail = {
            id: `sent-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
            originalEmailId: emailId,
            to: selectedGmailEmail?.fromEmail || 'unknown@example.com',
            toName: selectedGmailEmail?.fromName || selectedGmailEmail?.fromEmail || 'Unknown Contact',
            originalSubject: selectedGmailEmail?.subject || 'No Subject',
            response: data.response || data.aiResponse || 'Response sent successfully',
            sentTime: new Date().toLocaleString(),
            timestamp: new Date(),
            status: 'sent'
          };
          
          console.log('📤 Adding sent email to state:', sentEmail);
          setSentEmails(prev => {
            const updated = [sentEmail, ...prev];
            console.log('📋 Updated sent emails:', updated);
            return updated;
          });
          
          // Update stats
          setStats(prev => ({
            ...prev,
            totalResponsesSent: prev.totalResponsesSent + 1
          }));
          
          setTimeout(() => {
            setActiveEmailView('sent');
            console.log('🔄 Switched to sent tab');
          }, 500);
        }
        
        if (!preview) {
          setTimeout(() => checkGmailEmails(false), 1000);
        }
        return data;
      } else {
        console.error('❌ API response not ok:', response.status, response.statusText);
      }
    } catch (error) {
      console.error('❌ Error sending AI response:', error);
    } finally {
      setResponding(false);
    }
  };

  const addToBlacklist = useCallback(() => {
    if (newBlacklistItem.trim()) {
      setAutomationSettings(prev => ({
        ...prev,
        businessRules: {
          ...prev.businessRules,
          blacklist: [...prev.businessRules.blacklist, newBlacklistItem.trim()]
        }
      }));
      setNewBlacklistItem('');
    }
  }, [newBlacklistItem]);

  const removeFromBlacklist = useCallback((index) => {
    setAutomationSettings(prev => ({
      ...prev,
      businessRules: {
        ...prev.businessRules,
        blacklist: prev.businessRules.blacklist.filter((_, i) => i !== index)
      }
    }));
  }, []);

  const addToWhitelist = useCallback(() => {
    if (newWhitelistItem.trim()) {
      setAutomationSettings(prev => ({
        ...prev,
        businessRules: {
          ...prev.businessRules,
          whitelist: [...prev.businessRules.whitelist, newWhitelistItem.trim()]
        }
      }));
      setNewWhitelistItem('');
    }
  }, [newWhitelistItem]);

  const removeFromWhitelist = useCallback((index) => {
    setAutomationSettings(prev => ({
      ...prev,
      businessRules: {
        ...prev.businessRules,
        whitelist: prev.businessRules.whitelist.filter((_, i) => i !== index)
      }
    }));
  }, []);

  const addCustomKeyword = useCallback(() => {
    if (newCustomKeyword.trim()) {
      setAutomationSettings(prev => ({
        ...prev,
        businessRules: {
          ...prev.businessRules,
          customKeywords: [...prev.businessRules.customKeywords, newCustomKeyword.trim()]
        }
      }));
      setNewCustomKeyword('');
    }
  }, [newCustomKeyword]);

  const removeCustomKeyword = useCallback((index) => {
    setAutomationSettings(prev => ({
      ...prev,
      businessRules: {
        ...prev.businessRules,
        customKeywords: prev.businessRules.customKeywords.filter((_, i) => i !== index)
      }
    }));
  }, []);

  const addHotLeadKeyword = useCallback(() => {
    const input = document.getElementById('hotLeadKeywordInput');
    if (input && input.value.trim()) {
      const newKeyword = input.value.trim();
      if (!aiSettings.hotLeadKeywords.includes(newKeyword)) {
        setAiSettings(prev => ({
          ...prev,
          hotLeadKeywords: [...prev.hotLeadKeywords, newKeyword]
        }));
      }
      input.value = '';
    }
  }, [aiSettings.hotLeadKeywords]);

  const removeHotLeadKeyword = useCallback((index) => {
    setAiSettings(prev => ({
      ...prev,
      hotLeadKeywords: prev.hotLeadKeywords.filter((_, i) => i !== index)
    }));
  }, []);

  // UPDATED DashboardTab Component with cleaner UI
  const DashboardTab = () => (
    <div className="space-y-6">
      {/* CONSOLIDATED: Professional Gmail AI Control Panel */}
      {gmailConnection ? (
        <div className="bg-gradient-to-r from-purple-600/5 to-blue-600/5 backdrop-blur-lg rounded-2xl border border-white/10 p-6">
          <div className="flex items-center justify-between">
            {/* Left Section: Status & Connection Info */}
            <div className="flex items-center gap-4">
              <div className="flex items-center gap-3">
                <CheckCircle className="w-5 h-5 text-green-400" />
                <div>
                  <h3 className="font-medium text-white flex items-center gap-2">
                    AI Auto-Responses
                    {autoPollStatus.isRunning ? (
                      <span className="px-2 py-0.5 rounded-md bg-green-500/20 text-green-400 text-xs font-medium">
                        ACTIVE
                      </span>
                    ) : (
                      <span className="px-2 py-0.5 rounded-md bg-gray-500/20 text-gray-400 text-xs font-medium">
                        STOPPED
                      </span>
                    )}
                  </h3>
                  <p className="text-xs text-gray-400 mt-0.5">
                    {gmailConnection.email} • Auto-monitoring active
                  </p>
                </div>
              </div>
            </div>
            
            {/* Right Section: Action Buttons */}
            <div className="flex items-center gap-2">
              <span className="text-xs text-gray-500 mr-2">
                Last refreshed: {lastRefresh.toLocaleTimeString()}
              </span>
              <Button 
                onClick={() => checkGmailEmails(false)}
                disabled={gmailLoading}
                size="sm"
                variant="outline"
                className="bg-white/5 border-white/10 text-white hover:bg-white/10 text-xs px-3 py-1.5"
              >
                {gmailLoading ? (
                  <>
                    <RefreshCw className="w-3 h-3 animate-spin mr-1" />
                    Checking...
                  </>
                ) : (
                  <>
                    <RefreshCw className="w-3 h-3 mr-1" />
                    Check Emails
                  </>
                )}
              </Button>
              <Button 
                onClick={toggleAutoPoll}
                disabled={saving || !gmailConnection}
                size="sm"
                className={`px-4 py-1.5 text-xs font-medium transition-all ${
                  autoPollStatus.isRunning
                    ? 'bg-red-600 hover:bg-red-700 text-white'
                    : 'bg-green-600 hover:bg-green-700 text-white'
                }`}
              >
                {saving ? (
                  'Saving...'
                ) : autoPollStatus.isRunning ? (
                  'Stop Auto-Responses'
                ) : (
                  'Start Auto-Responses'
                )}
              </Button>
            </div>
          </div>
          
          {/* Bottom Stats Bar - Only show when there's activity */}
          {(autoPollStatus.lastPoll || autoPollStatus.totalEmailsProcessed > 0) && (
            <div className="mt-4 pt-3 border-t border-white/5 flex items-center justify-between text-xs">
              <div className="flex items-center gap-4 text-gray-400">
                {autoPollStatus.lastPoll && (
                  <span>
                    Last checked: {autoPollStatus.lastPoll.toLocaleTimeString()}
                  </span>
                )}
              </div>
              <div className="flex gap-4">
                <span className="text-gray-400">
                  <span className="font-medium text-white">{autoPollStatus.totalEmailsProcessed}</span> Emails Checked
                </span>
                <span className="text-gray-400">
                  <span className="font-medium text-white">{autoPollStatus.totalResponsesSent}</span> AI Responses Sent
                </span>
              </div>
            </div>
          )}
        </div>
      ) : (
        <div className="bg-yellow-500/10 backdrop-blur-lg rounded-2xl border border-yellow-500/20 p-6">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <AlertCircle className="w-5 h-5 text-yellow-400" />
              <div>
                <h3 className="font-medium text-white">Gmail AI Setup Required</h3>
                <p className="text-sm text-gray-400 mt-0.5">
                  Connect Gmail for AI-powered email automation
                </p>
              </div>
            </div>
            <Button 
              onClick={connectGmail} 
              className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 text-sm"
            >
              <LinkIcon className="w-3.5 h-3.5 mr-1.5" />
              Connect Gmail
            </Button>
          </div>
        </div>
      )}

      {/* UPDATED: New 4-Metric Stats Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        {/* AI Responses Sent */}
        <div className="bg-white/5 backdrop-blur-lg rounded-xl border border-white/10 p-5">
          <div className="flex items-start justify-between">
            <div>
              <p className="text-xs font-medium text-gray-400 uppercase tracking-wider">AI Responses</p>
              <p className="text-2xl font-bold text-white mt-1">{stats.totalResponsesSent || autoPollStatus.totalResponsesSent}</p>
              <p className="text-xs text-gray-500 mt-1">Total sent</p>
            </div>
            <div className="p-2 rounded-lg bg-green-500/10">
              <Send className="w-5 h-5 text-green-400" />
            </div>
          </div>
        </div>

        {/* Leads Captured */}
        <div className="bg-white/5 backdrop-blur-lg rounded-xl border border-white/10 p-5">
          <div className="flex items-start justify-between">
            <div>
              <p className="text-xs font-medium text-gray-400 uppercase tracking-wider">Leads Captured</p>
              <p className="text-2xl font-bold text-white mt-1">{stats.totalLeadsCaptured}</p>
              <p className="text-xs text-gray-500 mt-1">With contact info</p>
            </div>
            <div className="p-2 rounded-lg bg-blue-500/10">
              <UserCheck className="w-5 h-5 text-blue-400" />
            </div>
          </div>
        </div>

        {/* Meetings Booked */}
        <div className="bg-white/5 backdrop-blur-lg rounded-xl border border-white/10 p-5">
          <div className="flex items-start justify-between">
            <div>
              <p className="text-xs font-medium text-gray-400 uppercase tracking-wider">Meetings Booked</p>
              <p className="text-2xl font-bold text-white mt-1">{stats.meetingsBooked}</p>
              <p className="text-xs text-gray-500 mt-1">This month</p>
            </div>
            <div className="p-2 rounded-lg bg-purple-500/10">
              <Calendar className="w-5 h-5 text-purple-400" />
            </div>
          </div>
        </div>

        {/* Response Time */}
        <div className="bg-white/5 backdrop-blur-lg rounded-xl border border-white/10 p-5">
          <div className="flex items-start justify-between">
            <div>
              <p className="text-xs font-medium text-gray-400 uppercase tracking-wider">Response Time</p>
              <p className="text-2xl font-bold text-white mt-1">{formatTime(stats.avgResponseTimeMinutes)}</p>
              <p className="text-xs text-gray-500 mt-1">Average speed</p>
            </div>
            <div className="p-2 rounded-lg bg-orange-500/10">
              <Clock className="w-5 h-5 text-orange-400" />
            </div>
          </div>
        </div>
      </div>

      {/* Email Lists - Keep all existing email list code */}
      <div className="grid grid-cols-1 lg:grid-cols-5 gap-6">
        {/* Keep all the existing email list JSX here - not changed */}
        <div className="lg:col-span-2">
          <div className="bg-white/10 backdrop-blur-lg rounded-2xl border border-white/20 h-[calc(100vh-480px)] min-h-[600px] flex flex-col">
            {/* All existing inbox/sent tabs code */}
            <div className="p-6 pb-0 flex-shrink-0 border-b border-white/10">
              <div className="flex items-center gap-3 mb-4">
                <Inbox className="w-6 h-6 text-blue-400" />
                <h3 className="text-xl font-semibold text-white">Email Conversations</h3>
                <div className="ml-auto px-3 py-1 rounded-full bg-blue-500/20 text-blue-300 text-sm font-medium">
                  {gmailEmails.length + sentEmails.length} Total
                </div>
              </div>
              
              <div className="w-full mb-4">
                <div className="grid grid-cols-2 gap-0 bg-white/5 rounded-xl p-1 border border-white/10">
                  <button
                    onClick={() => setActiveEmailView('inbox')}
                    className={`relative px-4 py-3 rounded-lg font-medium text-sm transition-all duration-300 ${
                      activeEmailView === 'inbox' 
                        ? 'bg-blue-600 text-white shadow-xl transform scale-[0.98]' 
                        : 'text-gray-300 hover:text-white hover:bg-white/10'
                    }`}
                  >
                    <div className="flex items-center justify-center gap-2">
                      <Inbox className="w-4 h-4" />
                      <span>Inbox</span>
                      <div className={`px-2 py-1 rounded-full text-xs font-bold ${
                        activeEmailView === 'inbox' 
                          ? 'bg-white/20 text-white' 
                          : 'bg-blue-500/20 text-blue-300'
                      }`}>
                        {gmailEmails.length}
                      </div>
                    </div>
                    {activeEmailView === 'inbox' && (
                      <div className="absolute bottom-0 left-1/2 transform -translate-x-1/2 w-8 h-0.5 bg-white rounded-full"></div>
                    )}
                  </button>
                  
                  <button
                    onClick={() => setActiveEmailView('sent')}
                    className={`relative px-4 py-3 rounded-lg font-medium text-sm transition-all duration-300 ${
                      activeEmailView === 'sent' 
                        ? 'bg-green-600 text-white shadow-xl transform scale-[0.98]' 
                        : 'text-gray-300 hover:text-white hover:bg-white/10'
                    }`}
                  >
                    <div className="flex items-center justify-center gap-2">
                      <Send className="w-4 h-4" />
                      <span>Sent</span>
                      <div className={`px-2 py-1 rounded-full text-xs font-bold ${
                        activeEmailView === 'sent' 
                          ? 'bg-white/20 text-white' 
                          : 'bg-green-500/20 text-green-300'
                      }`}>
                        {sentEmails.length}
                      </div>
                    </div>
                    {activeEmailView === 'sent' && (
                      <div className="absolute bottom-0 left-1/2 transform -translate-x-1/2 w-8 h-0.5 bg-white rounded-full"></div>
                    )}
                  </button>
                </div>
                
                <div className="flex items-center justify-between mt-3 text-sm text-gray-400">
                  <span>
                    {activeEmailView === 'inbox' 
                      ? 'Real-time Gmail monitoring with AI responses'
                      : 'AI responses sent to customers'
                    }
                  </span>
                  <div className="flex gap-2">
                    <button
                      onClick={() => {
                        const testEmail = {
                          id: `test-${Date.now()}`,
                          to: 'test@example.com',
                          toName: 'Test Customer',
                          originalSubject: 'Test Inquiry',
                          response: 'This is a test AI response to demonstrate the sent email functionality.',
                          sentTime: new Date().toLocaleString(),
                          timestamp: new Date(),
                          status: 'sent'
                        };
                        setSentEmails(prev => [testEmail, ...prev]);
                        setActiveEmailView('sent');
                      }}
                      className="px-2 py-1 rounded-md bg-yellow-600/20 text-yellow-400 text-xs hover:bg-yellow-600/30 transition-colors"
                    >
                      🧪 Add Test
                    </button>
                  </div>
                </div>
              </div>
            </div>

            <div className="flex-1 flex flex-col overflow-hidden">
              {activeEmailView === 'inbox' && (
                <div className="flex-1 flex flex-col h-full">
                  <div className="flex-1 overflow-y-auto custom-scrollbar">
                    <style jsx>{`
                      .custom-scrollbar {
                        scrollbar-width: auto;
                        scrollbar-color: rgba(59, 130, 246, 0.6) rgba(255, 255, 255, 0.1);
                      }
                      .custom-scrollbar::-webkit-scrollbar {
                        width: 14px;
                      }
                      .custom-scrollbar::-webkit-scrollbar-track {
                        background: rgba(255, 255, 255, 0.05);
                        border-radius: 10px;
                        margin: 6px;
                        border: 1px solid rgba(255, 255, 255, 0.1);
                      }
                      .custom-scrollbar::-webkit-scrollbar-thumb {
                        background: linear-gradient(180deg, rgba(59, 130, 246, 0.8), rgba(37, 99, 235, 0.8));
                        border-radius: 10px;
                        border: 2px solid rgba(255, 255, 255, 0.1);
                        box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.2);
                      }
                      .custom-scrollbar::-webkit-scrollbar-thumb:hover {
                        background: linear-gradient(180deg, rgba(59, 130, 246, 1), rgba(37, 99, 235, 1));
                        box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.3);
                      }
                      .custom-scrollbar::-webkit-scrollbar-thumb:active {
                        background: linear-gradient(180deg, rgba(37, 99, 235, 1), rgba(29, 78, 216, 1));
                      }
                      .custom-scrollbar::-webkit-scrollbar-corner {
                        background: transparent;
                      }
                    `}</style>
                    
                    {gmailEmails.length === 0 ? (
                      <div className="p-8 text-center h-full flex flex-col items-center justify-center">
                        <div className="w-16 h-16 bg-blue-500/20 rounded-full flex items-center justify-center mb-4">
                          <Mail className="w-8 h-8 text-blue-400" />
                        </div>
                        <h4 className="text-lg font-medium text-white mb-2">No emails yet</h4>
                        <p className="text-gray-400 text-center max-w-sm">
                          {gmailConnection 
                            ? 'New emails will appear here automatically when received'
                            : 'Connect Gmail to start monitoring your emails'
                          }
                        </p>
                        {gmailConnection && (
                          <Button 
                            onClick={() => checkGmailEmails(false)}
                            disabled={gmailLoading}
                            className="mt-4 bg-blue-600 hover:bg-blue-700 text-white"
                          >
                            {gmailLoading ? (
                              <RefreshCw className="w-4 h-4 animate-spin mr-2" />
                            ) : (
                              <RefreshCw className="w-4 h-4 mr-2" />
                            )}
                            Check for emails
                          </Button>
                        )}
                      </div>
                    ) : (
                      <div className="space-y-0">
                        {gmailEmails.map((email, index) => (
                          <div
                            key={email.id}
                            className={`p-4 border-b border-white/5 cursor-pointer transition-all duration-200 hover:bg-white/5 ${
                              selectedGmailEmail?.id === email.id 
                                ? 'bg-blue-500/20 border-l-4 border-l-blue-400 shadow-lg' 
                                : ''
                            } ${index === 0 ? 'border-t-0' : ''}`}
                            onClick={() => {
                              setSelectedGmailEmail(email);
                              setSelectedConversation(null);
                              setShowingPreview(false);  // Hide preview when selecting new email
                              setPreviewResponse(null);
                            }}
                          >
                            <div className="flex items-center justify-between mb-2">
                              <h4 className="font-semibold text-sm text-white truncate flex-1 mr-2">
                                {email.fromName || email.fromEmail}
                              </h4>
                              <div className="flex items-center gap-2">
                                <div className="px-2 py-1 rounded-full bg-blue-500/20 text-blue-300 text-xs font-medium">
                                  Gmail
                                </div>
                                {selectedGmailEmail?.id === email.id && (
                                  <div className="w-2 h-2 rounded-full bg-blue-400"></div>
                                )}
                              </div>
                            </div>
                            <p className="text-xs text-gray-300 font-medium mb-1 truncate">
                              {email.subject}
                            </p>
                            <p className="text-xs text-gray-400 line-clamp-2 mb-2 leading-relaxed">
                              {email.snippet || email.body}
                            </p>
                            <div className="flex items-center justify-between">
                              <p className="text-xs text-gray-500">
                                {email.receivedTime}
                              </p>
                              <div className="text-xs text-gray-500">
                                from {email.fromEmail?.split('@')[1] || 'unknown'}
                              </div>
                            </div>
                          </div>
                        ))}
                      </div>
                    )}
                  </div>
                </div>
              )}

              {activeEmailView === 'sent' && (
                <div className="flex-1 flex flex-col h-full">
                  <div className="flex-1 overflow-y-auto custom-scrollbar-green">
                    <style jsx>{`
                      .custom-scrollbar-green {
                        scrollbar-width: auto;
                        scrollbar-color: rgba(34, 197, 94, 0.6) rgba(255, 255, 255, 0.1);
                      }
                      .custom-scrollbar-green::-webkit-scrollbar {
                        width: 14px;
                      }
                      .custom-scrollbar-green::-webkit-scrollbar-track {
                        background: rgba(255, 255, 255, 0.05);
                        border-radius: 10px;
                        margin: 6px;
                        border: 1px solid rgba(255, 255, 255, 0.1);
                      }
                      .custom-scrollbar-green::-webkit-scrollbar-thumb {
                        background: linear-gradient(180deg, rgba(34, 197, 94, 0.8), rgba(21, 128, 61, 0.8));
                        border-radius: 10px;
                        border: 2px solid rgba(255, 255, 255, 0.1);
                        box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.2);
                      }
                      .custom-scrollbar-green::-webkit-scrollbar-thumb:hover {
                        background: linear-gradient(180deg, rgba(34, 197, 94, 1), rgba(21, 128, 61, 1));
                        box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.3);
                      }
                      .custom-scrollbar-green::-webkit-scrollbar-thumb:active {
                        background: linear-gradient(180deg, rgba(21, 128, 61, 1), rgba(20, 83, 45, 1));
                      }
                    `}</style>
                    
                    {sentEmails.length === 0 ? (
                      <div className="p-8 text-center h-full flex flex-col items-center justify-center">
                        <div className="w-16 h-16 bg-green-500/20 rounded-full flex items-center justify-center mb-4">
                          <Send className="w-8 h-8 text-green-400" />
                        </div>
                        <h4 className="text-lg font-medium text-white mb-2">No responses sent yet</h4>
                        <p className="text-gray-400 text-center max-w-sm leading-relaxed">
                          AI responses will appear here after you send them to customers. 
                          Select an email from the inbox and use the AI response feature.
                        </p>
                        <div className="mt-6 p-4 bg-green-500/10 border border-green-500/20 rounded-lg max-w-sm">
                          <p className="text-green-300 text-sm">
                            💡 <strong>Tip:</strong> Use the "🧪 Add Test" button above to see how sent emails will look
                          </p>
                        </div>
                      </div>
                    ) : (
                      <div className="space-y-0">
                        {sentEmails.map((sentEmail, index) => (
                          <div
                            key={sentEmail.id}
                            className={`p-4 border-b border-white/5 cursor-pointer hover:bg-white/5 transition-all duration-200 ${
                              selectedConversation?.id === sentEmail.id 
                                ? 'bg-green-500/20 border-l-4 border-l-green-400 shadow-lg' 
                                : ''
                            } ${index === 0 ? 'border-t-0' : ''}`}
                            onClick={() => {
                              console.log('📧 Clicked sent email:', sentEmail);
                              setSelectedGmailEmail(null);
                              setSelectedConversation(sentEmail);
                            }}
                          >
                            <div className="flex items-center justify-between mb-2">
                              <h4 className="font-semibold text-sm text-white truncate flex-1 mr-2">
                                To: {sentEmail.toName || sentEmail.to}
                              </h4>
                              <div className="flex items-center gap-2">
                                <div className="px-2 py-1 rounded-full bg-green-500/20 text-green-300 text-xs font-medium">
                                  ✓ Sent
                                </div>
                                {selectedConversation?.id === sentEmail.id && (
                                  <div className="w-2 h-2 rounded-full bg-green-400"></div>
                                )}
                              </div>
                            </div>
                            <p className="text-xs text-gray-300 mb-1 truncate">
                              Re: {sentEmail.originalSubject}
                            </p>
                            <p className="text-xs text-gray-400 line-clamp-2 mb-2 leading-relaxed">
                              {sentEmail.response?.substring(0, 100)}...
                            </p>
                            <div className="flex items-center justify-between">
                              <p className="text-xs text-gray-500">
                                {sentEmail.sentTime}
                              </p>
                              <div className="text-xs text-gray-500">
                                to {sentEmail.to.split('@')[1] || 'unknown'}
                              </div>
                            </div>
                          </div>
                        ))}
                      </div>
                    )}
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>

        {/* Email Details Panel - Keep all existing code */}
        <div className="lg:col-span-3 space-y-6">
          {selectedGmailEmail ? (
            <div className="bg-white/10 backdrop-blur-lg rounded-2xl border border-white/20 h-[calc(100vh-480px)] min-h-[600px] flex flex-col">
              <div className="p-6 pb-4 border-b border-white/10 flex-shrink-0">
                <div className="flex items-center gap-3 text-lg font-semibold text-white mb-2">
                  <Globe className="w-5 h-5 text-blue-400" />
                  <div className="flex-1 min-w-0">
                    <div className="text-white truncate">
                      {selectedGmailEmail.fromName || selectedGmailEmail.fromEmail}
                    </div>
                  </div>
                  <Badge className="bg-blue-500/20 text-blue-300 border-blue-500/30">
                    Gmail Inbox
                  </Badge>
                </div>
                <p className="text-sm text-gray-300">
                  <span className="font-medium">Subject:</span> {selectedGmailEmail.subject}
                </p>
              </div>
              
              <div className="flex-1 p-6 space-y-6 overflow-y-auto">
                <div className="bg-white/5 rounded-xl p-6 border border-white/10 backdrop-blur-sm">
                  <p className="text-sm font-medium text-gray-300 mb-4 flex items-center gap-2">
                    <Mail className="w-4 h-4" />
                    Email Content:
                  </p>
                  <div className="max-h-64 overflow-y-auto text-sm text-gray-300 leading-relaxed space-y-2 custom-scrollbar">
                    {selectedGmailEmail.fullBody || selectedGmailEmail.body || 'No content preview available'}
                  </div>
                </div>

                {/* 🎯 ADDED: Preview section - Always rendered but conditionally visible */}
                <div 
                  className={`bg-purple-500/10 rounded-xl p-6 border border-purple-500/20 backdrop-blur-sm ${
                    showingPreview && previewResponse ? 'block' : 'hidden'
                  }`}
                >
                  <p className="text-sm font-medium text-purple-300 mb-4 flex items-center gap-2">
                    <Eye className="w-4 h-4" />
                    AI Response Preview (Editable):
                  </p>
                  <textarea
                    ref={previewTextareaRef}
                    className="w-full h-48 px-3 py-2 bg-white/10 border border-white/20 rounded-md text-white placeholder-gray-400 focus:border-purple-400 focus:outline-none resize-none"
                    placeholder="AI response will appear here..."
                  />
                  <div className="mt-4 flex gap-2">
                    <Button
                      onClick={() => {
                        if (previewTextareaRef.current && previewResponse) {
                          previewTextareaRef.current.value = previewResponse;
                        }
                      }}
                      size="sm"
                      variant="outline"
                      className="bg-white/10 border-white/20 text-white hover:bg-white/20"
                    >
                      Reset to Original
                    </Button>
                    <Button
                      onClick={sendEditedResponse}
                      disabled={responding}
                      size="sm"
                      className="bg-purple-600 hover:bg-purple-700 text-white"
                    >
                      {responding ? (
                        <>
                          <RefreshCw className="w-4 h-4 animate-spin mr-1" />
                          Sending...
                        </>
                      ) : (
                        <>
                          <Send className="w-4 h-4 mr-1" />
                          Send Edited Response
                        </>
                      )}
                    </Button>
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <Button 
                    onClick={() => handlePreviewAIResponse(selectedGmailEmail.id)}
                    disabled={generatingPreview || !autoPollStatus.isEnabled}
                    variant="outline"
                    className="h-14 flex items-center justify-center gap-3 text-base bg-white/10 border-white/20 text-white hover:bg-white/20 backdrop-blur-lg disabled:opacity-50"
                  >
                    {generatingPreview ? (
                      <>
                        <RefreshCw className="w-5 h-5 animate-spin" />
                        Generating Preview...
                      </>
                    ) : (
                      <>
                        <Eye className="w-5 h-5" />
                        Preview AI Response
                      </>
                    )}
                  </Button>
                  <Button 
                    onClick={() => sendAIResponse(selectedGmailEmail.id, false)}
                    disabled={responding || !autoPollStatus.isEnabled}
                    className="h-14 flex items-center justify-center gap-3 text-base bg-blue-600 hover:bg-blue-700 text-white disabled:opacity-50"
                  >
                    {responding ? (
                      <>
                        <RefreshCw className="w-5 h-5 animate-spin" />
                        Sending Response...
                      </>
                    ) : (
                      <>
                        <Send className="w-5 h-5" />
                        Send AI Response
                      </>
                    )}
                  </Button>
                </div>

                {!autoPollStatus.isEnabled && (
                  <div className="bg-yellow-500/20 border border-yellow-500/30 rounded-xl p-4">
                    <div className="flex items-center gap-2">
                      <AlertCircle className="w-5 h-5 text-yellow-400" />
                      <p className="text-yellow-300 text-sm">
                        AI responses are currently disabled. Click "Start Auto-Responses" to enable.
                      </p>
                    </div>
                  </div>
                )}

                <div className="bg-blue-500/20 border border-blue-500/30 rounded-xl p-6 backdrop-blur-sm">
                  <div className="flex items-start gap-4">
                    <div className="w-10 h-10 bg-blue-500/30 rounded-full flex items-center justify-center flex-shrink-0">
                      <Bot className="w-5 h-5 text-blue-300" />
                    </div>
                    <div className="flex-1">
                      <p className="text-base font-medium text-blue-200 mb-2">AI Response Ready</p>
                      <p className="text-sm text-blue-300 leading-relaxed">
                        The AI will generate a professional response based on your business knowledge and custom instructions. 
                        You can preview the response before sending to ensure it meets your standards.
                      </p>
                    </div>
                  </div>
                </div>

                <div className="bg-white/5 rounded-xl p-4 space-y-3 backdrop-blur-sm border border-white/10">
                  <h4 className="font-medium text-white">Email Details</h4>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                    <div>
                      <span className="font-medium text-gray-400">From:</span>
                      <p className="text-gray-300">{selectedGmailEmail.fromEmail}</p>
                    </div>
                    <div>
                      <span className="font-medium text-gray-400">Received:</span>
                      <p className="text-gray-300">{selectedGmailEmail.receivedTime}</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          ) : selectedConversation ? (
            <div className="bg-white/10 backdrop-blur-lg rounded-2xl border border-white/20 h-[calc(100vh-480px)] min-h-[600px] flex flex-col">
              <div className="p-6 pb-4 border-b border-white/10 flex-shrink-0">
                <div className="flex items-center gap-3 text-lg font-semibold text-white mb-2">
                  <Send className="w-5 h-5 text-green-400" />
                  <div className="flex-1 min-w-0">
                    <div className="text-white">AI Response Sent</div>
                  </div>
                  <Badge className="bg-green-500/20 text-green-300 border-green-500/30">
                    Successfully Sent
                  </Badge>
                </div>
                <p className="text-sm text-gray-300">
                  <span className="font-medium">To:</span> {selectedConversation.to} •
                  <span className="font-medium"> Subject:</span> Re: {selectedConversation.originalSubject}
                </p>
              </div>
              
              <div className="flex-1 p-6 space-y-6 overflow-y-auto">
                <div className="bg-green-500/10 rounded-xl p-6 border border-green-500/20 backdrop-blur-sm">
                  <p className="text-sm font-medium text-green-300 mb-4 flex items-center gap-2">
                    <Send className="w-4 h-4" />
                    AI Response Sent:
                  </p>
                  <div className="text-sm text-green-100 leading-relaxed custom-scrollbar">
                    {selectedConversation.response}
                  </div>
                </div>

                <div className="bg-green-500/20 border border-green-500/30 rounded-xl p-6 backdrop-blur-sm">
                  <div className="flex items-start gap-4">
                    <div className="w-10 h-10 bg-green-500/30 rounded-full flex items-center justify-center flex-shrink-0">
                      <CheckCircle className="w-5 h-5 text-green-300" />
                    </div>
                    <div className="flex-1">
                      <p className="text-base font-medium text-green-200 mb-2">Response Delivered Successfully</p>
                      <p className="text-sm text-green-300 leading-relaxed">
                        Your AI-generated response has been sent to the customer. The conversation will continue to be monitored for any replies.
                      </p>
                    </div>
                  </div>
                </div>

                <div className="bg-white/5 rounded-xl p-4 space-y-3 backdrop-blur-sm border border-white/10">
                  <h4 className="font-medium text-white">Response Details</h4>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                    <div>
                      <span className="font-medium text-gray-400">Sent to:</span>
                      <p className="text-gray-300">{selectedConversation.to}</p>
                    </div>
                    <div>
                      <span className="font-medium text-gray-400">Sent at:</span>
                      <p className="text-gray-300">{selectedConversation.sentTime}</p>
                    </div>
                    <div>
                      <span className="font-medium text-gray-400">Response ID:</span>
                      <p className="text-gray-300 font-mono text-xs">{selectedConversation.id}</p>
                    </div>
                    <div>
                      <span className="font-medium text-gray-400">Status:</span>
                      <p className="text-green-300 font-medium">✓ Delivered</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          ) : (
            <div className="bg-white/10 backdrop-blur-lg rounded-2xl border border-white/20 h-[calc(100vh-480px)] min-h-[600px] flex flex-col">
              <div className="flex-1 p-16 text-center flex flex-col items-center justify-center">
                <div className="w-24 h-24 mx-auto mb-8 bg-white/10 rounded-full flex items-center justify-center backdrop-blur-sm">
                  <MessageSquare className="w-12 h-12 text-gray-400" />
                </div>
                <h3 className="text-xl font-semibold text-white mb-3">Select a conversation</h3>
                <p className="text-gray-300 mb-8 max-w-md leading-relaxed">
                  Choose an email from the {activeEmailView} to view details and manage responses.
                </p>
                <div className="grid grid-cols-1 gap-3 text-sm text-gray-400 max-w-sm">
                  <div className="flex items-center gap-3">
                    <CheckCircle className="w-4 h-4 text-green-400 flex-shrink-0" />
                    <span>Preview AI responses before sending</span>
                  </div>
                  <div className="flex items-center gap-3">
                    <CheckCircle className="w-4 h-4 text-green-400 flex-shrink-0" />
                    <span>Track all sent responses</span>
                  </div>
                  <div className="flex items-center gap-3">
                    <CheckCircle className="w-4 h-4 text-green-400 flex-shrink-0" />
                    <span>Real-time conversation monitoring</span>
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );

  // Keep AISettingsTab exactly the same
  const AISettingsTab = () => (
    <div className="space-y-6">
      {/* ALL OTHER AI SETTINGS SECTIONS REMAIN EXACTLY THE SAME */}
      {/* Business Profile */}
      <div className="bg-white/10 backdrop-blur-lg rounded-2xl border border-white/20 p-6">
        <div className="flex items-center gap-2 mb-4">
          <Building className="w-5 h-5 text-blue-400" />
          <h3 className="text-lg font-semibold text-white">Business Profile</h3>
        </div>
        <p className="text-gray-300 mb-6">Tell the AI about your business</p>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div>
            <label className="block text-sm font-medium mb-2 text-gray-300">Business Name</label>
            <input
              type="text"
              defaultValue={businessProfileRef.current.name}
              onChange={(e) => {
                businessProfileRef.current.name = e.target.value;
              }}
              placeholder="Your Business Name"
              className="w-full px-3 py-2 bg-white/10 border border-white/20 rounded-md text-white placeholder-gray-400 focus:border-blue-400 focus:outline-none"
            />
          </div>
          <div>
            <label className="block text-sm font-medium mb-2 text-gray-300">Industry</label>
            <input
              type="text"
              defaultValue={businessProfileRef.current.industry}
              onChange={(e) => {
                businessProfileRef.current.industry = e.target.value;
              }}
              placeholder="e.g., Real Estate, Consulting"
              className="w-full px-3 py-2 bg-white/10 border border-white/20 rounded-md text-white placeholder-gray-400 focus:border-blue-400 focus:outline-none"
            />
          </div>
          <div>
            <label className="block text-sm font-medium mb-2 text-gray-300">Expertise</label>
            <input
              type="text"
              defaultValue={businessProfileRef.current.expertise}
              onChange={(e) => {
                businessProfileRef.current.expertise = e.target.value;
              }}
              placeholder="What you specialize in"
              className="w-full px-3 py-2 bg-white/10 border border-white/20 rounded-md text-white placeholder-gray-400 focus:border-blue-400 focus:outline-none"
            />
          </div>
        </div>
      </div>

      {/* Communication Settings */}
      <div className="bg-white/10 backdrop-blur-lg rounded-2xl border border-white/20 p-6">
        <div className="flex items-center gap-2 mb-4">
          <MessageCircle className="w-5 h-5 text-blue-400" />
          <h3 className="text-lg font-semibold text-white">Communication Settings</h3>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <label className="block text-sm font-medium mb-3 text-gray-300">Tone</label>
            <div className="grid grid-cols-3 gap-3">
              {['professional', 'casual', 'formal'].map(tone => (
                <Button
                  key={tone}
                  variant={aiSettings.communicationTone === tone ? "default" : "outline"}
                  onClick={() => setAiSettings(prev => ({ ...prev, communicationTone: tone }))}
                  className={`capitalize ${
                    aiSettings.communicationTone === tone
                      ? 'bg-blue-600 hover:bg-blue-700 text-white border-blue-600'
                      : 'bg-white/10 border-white/20 text-white hover:bg-white/20'
                  }`}
                >
                  {tone}
                </Button>
              ))}
            </div>
          </div>
          
          <div>
            <label className="block text-sm font-medium mb-3 text-gray-300">Response Length</label>
            <div className="grid grid-cols-3 gap-3">
              {[
                { value: 'short', label: 'Short' },
                { value: 'medium', label: 'Medium' },
                { value: 'long', label: 'Long' }
              ].map((length) => (
                <Button
                  key={length.value}
                  variant={aiSettings.responseLength === length.value ? "default" : "outline"}
                  onClick={() => setAiSettings(prev => ({ ...prev, responseLength: length.value }))}
                  className={`${
                    aiSettings.responseLength === length.value
                      ? 'bg-blue-600 hover:bg-blue-700 text-white border-blue-600'
                      : 'bg-white/10 border-white/20 text-white hover:bg-white/20'
                  }`}
                >
                  {length.label}
                </Button>
              ))}
            </div>
          </div>
        </div>
      </div>

      {/* 📚 KNOWLEDGE BASE SECTION */}
      <div className="bg-white/10 backdrop-blur-lg rounded-2xl border border-white/20 p-6">
        <div className="flex items-center gap-2 mb-4">
          <Brain className="w-5 h-5 text-purple-400" />
          <h3 className="text-lg font-semibold text-white">📚 Business Knowledge Base</h3>
        </div>
        
        <p className="text-gray-300 mb-4">
          Add specific information about your business that the AI should know. 
          This includes facts, services, prices, policies, FAQs, and any other business-specific information.
        </p>
        
        <textarea
          defaultValue={knowledgeBaseRef.current}
          onChange={(e) => {
            knowledgeBaseRef.current = e.target.value;
          }}
          rows={8}
          className="w-full px-3 py-2 bg-white/10 border border-white/20 rounded-md text-white placeholder-gray-400 focus:border-purple-400 focus:outline-none"
          placeholder={`Example business information:
            
COMPANY: ABC Real Estate Agency
FOUNDED: 2010
LOCATION: Downtown Chicago, IL

SERVICES:
- Residential home buying/selling
- Commercial property leasing
- Property management services
- Real estate investment consulting

PRICING:
- Buyer's agent commission: 2.5%
- Seller's agent commission: 3%
- Property management: 8% of monthly rent

OFFICE HOURS: Monday-Friday 9AM-6PM, Saturday 10AM-4PM
EMERGENCY LINE: Available 24/7 for property management clients

SPECIALTIES:
- Luxury condos in downtown area
- First-time home buyers
- Investment properties
- Corporate relocations

KEY DIFFERENTIATORS:
- 15+ years of local market expertise
- Average home sells in 21 days (market average: 45 days)
- 98% client satisfaction rate
- Bilingual agents (English/Spanish)

CURRENT PROMOTIONS:
- Free home staging for listings over $500K
- First-time buyer rebate program (1% cash back at closing)`}
        />
        
        <div className="mt-4 p-3 bg-purple-500/10 border border-purple-500/30 rounded-lg">
          <p className="text-purple-400 text-sm flex items-center gap-2">
            <Info className="w-4 h-4" />
            This information will be used by the AI to answer customer questions accurately.
          </p>
        </div>
      </div>

      {/* 🎯 CUSTOM AI INSTRUCTIONS SECTION */}
      <div className="bg-white/10 backdrop-blur-lg rounded-2xl border border-white/20 p-6">
        <div className="flex items-center gap-2 mb-4">
          <Brain className="w-5 h-5 text-green-400" />
          <h3 className="text-lg font-semibold text-white">🎯 Custom AI Instructions</h3>
        </div>
        <p className="text-gray-300 mb-4">
          Tell the AI exactly how to behave and respond to customers. 
          Be specific about when to ask for phone numbers, schedule appointments, identify hot leads, etc.
        </p>
        
        <textarea
          value={aiSettings.customInstructions || ''}
          onChange={(e) => setAiSettings(prev => ({ ...prev, customInstructions: e.target.value }))}
          rows={8}
          className="w-full px-3 py-2 bg-white/10 border border-white/20 rounded-md text-white placeholder-gray-400 focus:border-blue-400 focus:outline-none"
          placeholder={`Example AI behavior instructions:

RESPONSE BEHAVIOR:
- Always ask for phone numbers when someone expresses interest
- Schedule appointments within 24 hours when possible
- Keep initial responses under 3 sentences unless detailed info is requested
- Always end responses with a clear call-to-action

LEAD QUALIFICATION:
- Mark as HOT LEAD if they mention: urgent, ASAP, immediately, ready to buy
- Ask qualifying questions about budget and timeline
- For hot leads, offer immediate callback within 1 hour

SCHEDULING:
- Always suggest 3 specific time slots when scheduling
- Prioritize morning appointments (higher show rate)
- For urgent requests, offer same-day or next-day appointments

OBJECTION HANDLING:
- If price concerns: Emphasize value and ROI, offer payment plans
- If timing concerns: Create urgency with limited availability
- If comparing competitors: Highlight our unique advantages

SPECIAL INSTRUCTIONS:
- Never discuss pricing in first response - build value first
- Always mention our 5-star Google reviews
- For after-hours inquiries, promise response within 1 hour next business day
- If technical questions, offer free consultation call
- Always collect email AND phone for lead capture`}
        />
        
        <div className="mt-4 p-3 bg-blue-500/10 border border-blue-500/30 rounded-lg">
          <p className="text-blue-400 text-sm flex items-center gap-2">
            <Info className="w-4 h-4" />
            The AI will follow these instructions for every email response. Be clear and specific.
          </p>
        </div>
      </div>

      {/* Test Results */}
      {testResult && (
        <div className="bg-white/10 backdrop-blur-lg rounded-2xl border border-white/20 p-6">
          <h3 className="text-lg font-semibold text-white mb-4">🧪 AI Test Results</h3>
          
          <div className="mb-4">
            <label className="block text-sm font-medium text-gray-300 mb-2">AI Response</label>
            <div className="bg-blue-500/10 border border-blue-500/20 rounded-lg p-3 text-sm text-blue-200">
              {testResult.response}
            </div>
          </div>

          <div className="grid grid-cols-2 md:grid-cols-4 gap-3 text-xs">
            <div className="bg-white/5 p-2 rounded border border-white/10">
              <div className="font-medium text-gray-300">Status</div>
              <div className="text-gray-400">{autoPollStatus.isEnabled ? '✅ Enabled' : '❌ Disabled'}</div>
            </div>
            <div className="bg-white/5 p-2 rounded border border-white/10">
              <div className="font-medium text-gray-300">Model</div>
              <div className="text-gray-400">{aiSettings.aiModel}</div>
            </div>
            <div className="bg-white/5 p-2 rounded border border-white/10">
              <div className="font-medium text-gray-300">Creativity</div>
              <div className="text-gray-400">{aiSettings.creativity}</div>
            </div>
            <div className="bg-white/5 p-2 rounded border border-white/10">
              <div className="font-medium text-gray-300">Length</div>
              <div className="text-gray-400">{aiSettings.responseLength}</div>
            </div>
          </div>
        </div>
      )}

      <div className="flex gap-4 pt-4">
        <Button
          onClick={testAIResponse}
          disabled={testing}
          className="bg-green-600 hover:bg-green-700 text-white flex items-center gap-2"
        >
          {testing ? <RefreshCw className="w-4 h-4 animate-spin" /> : <Zap className="w-4 h-4" />}
          {testing ? 'Testing...' : 'Test AI Response'}
        </Button>
        <Button
          onClick={saveAllSettings}
          disabled={saving}
          className="bg-blue-600 hover:bg-blue-700 text-white flex items-center gap-2"
        >
          {saving ? <RefreshCw className="w-4 h-4 animate-spin" /> : <CheckCircle className="w-4 h-4" />}
          {saving ? 'Saving...' : 'Save All Settings'}
        </Button>
      </div>
    </div>
  );

  // Keep AutomationTab exactly the same
  const AutomationTab = () => (
    <div className="space-y-6">
      {/* ALL AUTOMATION TAB CONTENT REMAINS EXACTLY THE SAME */}
      <div className="bg-white/10 backdrop-blur-lg rounded-2xl border border-white/20 p-6">
        <div className="flex items-center gap-2 mb-4">
          <Filter className="w-5 h-5 text-blue-400" />
          <h3 className="text-lg font-semibold text-white">Email Filtering</h3>
        </div>
        <p className="text-gray-300 mb-6">Automatically filter emails to focus on real inquiries</p>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {[
            { key: 'autoArchiveSpam', label: 'Auto-Archive Spam', desc: 'Automatically filter out spam emails' },
            { key: 'blockMassEmails', label: 'Block Mass Emails', desc: 'Filter newsletters and promotional emails' },
            { key: 'personalOnly', label: 'Personal Only', desc: 'Only process emails that appear personal' },
            { key: 'skipAutoGenerated', label: 'Skip Auto-Generated', desc: 'Ignore automated system emails' }
          ].map(({ key, label, desc }) => (
            <div key={`filter-${key}`} className="flex items-start space-x-3 p-3 bg-white/5 border border-white/10 rounded-lg">
              <input
                type="checkbox"
                checked={automationSettings.emailFiltering[key]}
                onChange={(e) => handleEmailFilteringChange(key, e.target.checked)}
                className="mt-1 rounded border-white/30 bg-white/10 text-blue-600 focus:ring-blue-500"
              />
              <div>
                <label className="text-sm font-medium text-white">{label}</label>
                <p className="text-xs text-gray-400">{desc}</p>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Keep all business rules sections */}
      <div className="bg-white/10 backdrop-blur-lg rounded-2xl border border-white/20 p-6">
        <div className="flex items-center gap-2 mb-4">
          <Shield className="w-5 h-5 text-blue-400" />
          <h3 className="text-lg font-semibold text-white">Business Rules</h3>
        </div>
        <p className="text-gray-300 mb-6">Control which emails get AI responses</p>
        <div className="space-y-6">
          <div>
            <label className="block text-sm font-medium mb-2 text-gray-300">Blacklist (Never respond to these)</label>
            <div className="space-y-2">
              <div className="flex flex-wrap gap-2">
                {automationSettings.businessRules.blacklist.map((item, index) => (
                  <div 
                    key={`blacklist-${index}-${item}`}
                    onClick={() => removeFromBlacklist(index)}
                    className="cursor-pointer flex items-center gap-1 px-3 py-1 rounded-full bg-red-500/20 border border-red-500/30 text-red-300 hover:bg-red-500/30 transition-colors"
                  >
                    {item}
                    <X className="w-3 h-3" />
                  </div>
                ))}
              </div>
              <div className="flex gap-2">
                <Input
                  value={newBlacklistItem}
                  onChange={(e) => setNewBlacklistItem(e.target.value)}
                  placeholder="Add email or domain to blacklist"
                  onKeyPress={(e) => e.key === 'Enter' && addToBlacklist()}
                  className="bg-white/10 border-white/20 text-white placeholder-gray-400 focus:border-blue-400"
                />
                <Button onClick={addToBlacklist} size="sm" className="bg-red-600 hover:bg-red-700 text-white">Add</Button>
              </div>
            </div>
          </div>

          <div>
            <label className="block text-sm font-medium mb-2 text-gray-300">Whitelist (Always respond to these)</label>
            <div className="space-y-2">
              <div className="flex flex-wrap gap-2">
                {automationSettings.businessRules.whitelist.map((item, index) => (
                  <div 
                    key={`whitelist-${index}-${item}`}
                    onClick={() => removeFromWhitelist(index)}
                    className="cursor-pointer flex items-center gap-1 px-3 py-1 rounded-full bg-green-500/20 border border-green-500/30 text-green-300 hover:bg-green-500/30 transition-colors"
                  >
                    {item}
                    <X className="w-3 h-3" />
                  </div>
                ))}
              </div>
              <div className="flex gap-2">
                <Input
                  value={newWhitelistItem}
                  onChange={(e) => setNewWhitelistItem(e.target.value)}
                  placeholder="Add email or domain to whitelist"
                  onKeyPress={(e) => e.key === 'Enter' && addToWhitelist()}
                  className="bg-white/10 border-white/20 text-white placeholder-gray-400 focus:border-blue-400"
                />
                <Button onClick={addToWhitelist} size="sm" className="bg-green-600 hover:bg-green-700 text-white">Add</Button>
              </div>
            </div>
          </div>

          <div>
            <label className="block text-sm font-medium mb-2 text-gray-300">Priority Keywords (Respond to these first)</label>
            <div className="space-y-2">
              <div className="flex flex-wrap gap-2">
                {automationSettings.businessRules.customKeywords.map((keyword, index) => (
                  <div 
                    key={`custom-keyword-${index}-${keyword}`}
                    onClick={() => removeCustomKeyword(index)}
                    className="cursor-pointer flex items-center gap-1 px-3 py-1 rounded-full bg-white/20 border border-white/30 text-white hover:bg-purple-500/20 hover:border-purple-500/30 transition-colors"
                  >
                    {keyword}
                    <X className="w-3 h-3" />
                  </div>
                ))}
              </div>
              <div className="flex gap-2">
                <Input
                  value={newCustomKeyword}
                  onChange={(e) => setNewCustomKeyword(e.target.value)}
                  placeholder="Add priority keyword"
                  onKeyPress={(e) => e.key === 'Enter' && addCustomKeyword()}
                  className="bg-white/10 border-white/20 text-white placeholder-gray-400 focus:border-blue-400"
                />
                <Button onClick={addCustomKeyword} size="sm" className="bg-purple-600 hover:bg-purple-700 text-white">Add</Button>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div className="flex justify-end">
        <Button 
          onClick={saveAllSettings} 
          disabled={saving} 
          className="flex items-center gap-2 bg-blue-600 hover:bg-blue-700 text-white"
        >
          {saving ? <RefreshCw className="w-4 h-4 animate-spin" /> : <CheckCircle className="w-4 h-4" />}
          Save Automation Settings
        </Button>
      </div>
    </div>
  );

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-900 via-blue-900 to-purple-900 p-6">
        <div className="animate-pulse space-y-4 max-w-7xl mx-auto">
          <div className="h-8 bg-white/20 rounded-xl w-1/4"></div>
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            {[1,2,3,4].map(i => (
              <div key={i} className="h-24 bg-white/10 rounded-2xl backdrop-blur-lg border border-white/20"></div>
            ))}
          </div>
          <div className="grid grid-cols-1 lg:grid-cols-5 gap-6">
            <div className="lg:col-span-2 h-96 bg-white/10 rounded-2xl backdrop-blur-lg border border-white/20"></div>
            <div className="lg:col-span-3 h-96 bg-white/10 rounded-2xl backdrop-blur-lg border border-white/20"></div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-blue-900 to-purple-900">
      <div className="p-6 max-w-7xl mx-auto">
        <div className="flex items-center gap-4 mb-6">
          <Button 
            variant="outline" 
            onClick={() => router.push('/dashboard')}
            className="flex items-center gap-2 bg-white/10 border-white/20 text-white hover:bg-white/20 backdrop-blur-lg"
          >
            <ArrowLeft className="w-4 h-4" />
            Dashboard
          </Button>
          <div className="flex-1">
            <h1 className="text-2xl font-bold flex items-center gap-2 text-white">
              <Mail className="w-6 h-6" />
              Email AI Manager
            </h1>
            <p className="text-gray-300">Unified Gmail automation with smart AI responses and filtering</p>
          </div>
        </div>

        <div className="mb-6">
          <div className="border-b border-white/20">
            <nav className="-mb-px flex space-x-8">
              {tabs.map(tab => {
                const Icon = tab.icon;
                return (
                  <button
                    key={tab.id}
                    onClick={() => setActiveTab(tab.id)}
                    className={`whitespace-nowrap py-2 px-1 border-b-2 font-medium text-sm ${
                      activeTab === tab.id
                        ? 'border-blue-400 text-blue-300'
                        : 'border-transparent text-gray-400 hover:text-gray-300 hover:border-gray-500'
                    }`}
                  >
                    <div className="flex items-center gap-2">
                      <Icon className="w-4 h-4" />
                      {tab.label}
                    </div>
                  </button>
                );
              })}
            </nav>
          </div>
          <div className="mt-2">
            <p className="text-sm text-gray-400">
              {tabs.find(tab => tab.id === activeTab)?.description}
            </p>
          </div>
        </div>

        <div className="tab-content">
          {activeTab === 'dashboard' && <DashboardTab />}
          {activeTab === 'ai-settings' && <AISettingsTab />}
          {activeTab === 'automation' && <AutomationTab />}
          {activeTab === 'connections' && <ConnectionsTab />}
        </div>
      </div>
    </div>
  );
}
