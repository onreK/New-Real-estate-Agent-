'use client';

import { useState, useEffect, useRef, useCallback, useMemo } from 'react';
import { useRouter } from 'next/navigation';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import ConnectionsTab from '@/components/ConnectionsTab';
import { 
  Mail, 
  Settings, 
  Send, 
  Users, 
  TrendingUp, 
  Clock, 
  ArrowLeft,
  MessageSquare,
  Bot,
  FileText,
  Sparkles,
  Zap,
  Target,
  CheckCircle,
  AlertCircle,
  RefreshCw,
  Eye,
  ExternalLink,
  Link as LinkIcon,
  Globe,
  BarChart3,
  Wrench,
  Volume2,
  VolumeX,
  Filter,
  Inbox,
  Shield,
  Building,
  MessageCircle,
  Phone,
  Archive,
  X,
  BookOpen
} from 'lucide-react';

export default function CompleteEmailSystem() {
  const router = useRouter();
  const [activeTab, setActiveTab] = useState('dashboard');
  const refreshIntervalRef = useRef(null);
  
  // 🚨 AGGRESSIVE FIX: Separate state management for input fields to prevent re-renders
  const businessProfileRef = useRef({
    name: '',
    industry: '',
    expertise: ''
  });
  
  const aiSettingsRef = useRef({
    communicationTone: 'professional',
    knowledgeBase: '',
    hotLeadKeywords: ['urgent', 'asap', 'budget', 'ready'],
    behaviors: {
      includeAvailability: true,
      askQualifyingQuestions: true,
      hotLeadAlerts: true,
      smsLeadAlerts: false
    }
  });
  
  // 🚨 AGGRESSIVE FIX: Only update state for non-input related data
  const [conversations, setConversations] = useState([]);
  const [gmailEmails, setGmailEmails] = useState([]);
  const [selectedConversation, setSelectedConversation] = useState(null);
  const [selectedGmailEmail, setSelectedGmailEmail] = useState(null);
  const [newMessage, setNewMessage] = useState('');
  const [loading, setLoading] = useState(true);
  const [gmailLoading, setGmailLoading] = useState(false);
  const [responding, setResponding] = useState(false);
  const [gmailConnection, setGmailConnection] = useState(null);
  const [saving, setSaving] = useState(false);
  const [reconnecting, setReconnecting] = useState(false);
  
  // 🚨 AGGRESSIVE FIX: Use ref for lastRefresh to prevent re-renders
  const lastRefreshRef = useRef(new Date());
  const [lastRefreshDisplay, setLastRefreshDisplay] = useState(new Date());
  
  const [stats, setStats] = useState({
    totalConversations: 0,
    activeToday: 0,
    responseRate: 0,
    avgResponseTime: 0
  });

  // Dashboard Settings (simplified)
  const [dashboardSettings, setDashboardSettings] = useState({
    autoRefresh: true,
    refreshInterval: 30
  });

  // Automation Settings
  const [automationSettings, setAutomationSettings] = useState({
    responseControl: {
      aiResponses: true,
      autoSend: false,
      businessHours: true,
      urgentPriority: true
    },
    emailFiltering: {
      autoArchiveSpam: true,
      blockMassEmails: true,
      personalOnly: false,
      skipAutoGenerated: true
    },
    businessRules: {
      blacklist: [],
      whitelist: [],
      customKeywords: []
    }
  });

  // Form states for business rules
  const [newBlacklistItem, setNewBlacklistItem] = useState('');
  const [newWhitelistItem, setNewWhitelistItem] = useState('');
  const [newCustomKeyword, setNewCustomKeyword] = useState('');

  // Tab configuration - memoized to prevent re-creation
  const tabs = useMemo(() => [
    { 
      id: 'dashboard', 
      label: 'Dashboard', 
      icon: BarChart3,
      description: 'Real-time Gmail conversations and AI responses'
    },
    { 
      id: 'ai-settings', 
      label: 'AI Settings', 
      icon: Bot,
      description: 'Business profile, communication tone, and AI behavior'
    },
    { 
      id: 'automation', 
      label: 'Automation', 
      icon: Wrench,
      description: 'Gmail connection, email filtering, and automation rules'
    },
    { 
      id: 'connections', 
      label: 'Connections', 
      icon: Settings,
      description: 'Manage Gmail and domain email connections'
    }
  ], []);

  // Load data only once on mount and handle URL parameters
  useEffect(() => {
    loadInitialData();
    handleUrlParameters();
  }, []);

  // Handle URL parameters for tab activation and messages
  const handleUrlParameters = () => {
    const urlParams = new URLSearchParams(window.location.search);
    const tab = urlParams.get('tab');
    const success = urlParams.get('success');
    const error = urlParams.get('error');
    
    console.log('🔍 URL Parameters:', { tab, success, error });
    
    // Set active tab if specified in URL
    if (tab && tabs.some(t => t.id === tab)) {
      console.log('🎯 Setting active tab to:', tab);
      setActiveTab(tab);
    }
    
    // Handle success messages
    if (success === 'gmail_connected') {
      console.log('✅ Gmail connection successful');
    }
    
    // Handle error messages
    if (error) {
      console.log('❌ OAuth error:', error);
    }
    
    // Clear URL parameters after processing to clean up the URL
    if (tab || success || error) {
      const newUrl = window.location.pathname;
      window.history.replaceState({}, document.title, newUrl);
      console.log('🧹 Cleaned URL parameters');
    }
  };

  // 🚨 AGGRESSIVE FIX: Auto-refresh COMPLETELY isolated and only affects dashboard
  useEffect(() => {
    // Clear any existing interval
    if (refreshIntervalRef.current) {
      clearInterval(refreshIntervalRef.current);
      refreshIntervalRef.current = null;
    }

    // ONLY set up auto-refresh for dashboard tab when Gmail connected
    if (activeTab === 'dashboard' && gmailConnection && !loading) {
      refreshIntervalRef.current = setInterval(() => {
        console.log('⏱️ AUTO-REFRESH TRIGGERED - Dashboard only');
        checkGmailEmails(true); // Silent refresh
        lastRefreshRef.current = new Date();
        // Only update display state if we're still on dashboard
        if (activeTab === 'dashboard') {
          setLastRefreshDisplay(new Date());
        }
      }, dashboardSettings.refreshInterval * 1000);
    }

    // Cleanup
    return () => {
      if (refreshIntervalRef.current) {
        clearInterval(refreshIntervalRef.current);
        refreshIntervalRef.current = null;
      }
    };
  }, [activeTab, gmailConnection?.email, dashboardSettings.refreshInterval, loading]);

  const loadInitialData = async () => {
    setLoading(true);
    try {
      await Promise.all([
        loadEmailData(),
        checkGmailConnection(),
        loadAISettings()
      ]);
    } catch (error) {
      console.error('Error loading initial data:', error);
    } finally {
      setLoading(false);
    }
  };

  const loadEmailData = async () => {
    try {
      const convResponse = await fetch('/api/customer/email-conversations');
      if (convResponse.ok) {
        const convData = await convResponse.json();
        setConversations(convData.conversations || []);
      }

      const statsResponse = await fetch('/api/customer/email-stats');
      if (statsResponse.ok) {
        const statsData = await statsResponse.json();
        setStats(statsData.stats || stats);
      }
    } catch (error) {
      console.error('Error loading email data:', error);
    }
  };

  const checkGmailConnection = async () => {
    try {
      const response = await fetch('/api/gmail/status');
      if (response.ok) {
        const data = await response.json();
        
        if (data.connected && data.connection) {
          setGmailConnection(data.connection);
          setStats(prev => ({ ...prev, responseRate: 95 }));
        } else {
          setGmailConnection(null);
        }
      }
    } catch (error) {
      console.error('Error checking Gmail connection:', error);
      setGmailConnection(null);
    }
  };

  const loadAISettings = async () => {
    try {
      const response = await fetch('/api/customer/ai-settings');
      if (response.ok) {
        const data = await response.json();
        if (data.settings) {
          // Update refs instead of state to prevent re-renders
          businessProfileRef.current = {
            name: data.customer?.business_name || '',
            industry: data.settings.expertise || '',
            expertise: data.settings.specialties || ''
          };
          
          aiSettingsRef.current = {
            ...aiSettingsRef.current,
            communicationTone: data.settings.tone || 'professional',
            knowledgeBase: data.settings.knowledge_base || '',
            behaviors: {
              ...aiSettingsRef.current.behaviors,
              includeAvailability: data.settings.include_availability !== false,
              askQualifyingQuestions: data.settings.ask_qualifying_questions !== false,
              hotLeadAlerts: data.settings.alert_hot_leads !== false
            }
          };

          if (data.settings.hot_lead_keywords) {
            aiSettingsRef.current.hotLeadKeywords = Array.isArray(data.settings.hot_lead_keywords) 
              ? data.settings.hot_lead_keywords 
              : aiSettingsRef.current.hotLeadKeywords;
          }
        }
      } else if (response.status === 404) {
        console.log('AI settings API not found - using defaults');
      }
    } catch (error) {
      console.log('AI settings not available - using defaults');
    }
  };

  // 🚨 AGGRESSIVE FIX: Save function using refs instead of state
  const saveAllSettings = async () => {
    setSaving(true);
    try {
      // Prepare the settings using refs
      const settingsToSave = {
        tone: aiSettingsRef.current.communicationTone,
        expertise: businessProfileRef.current.industry,
        specialties: businessProfileRef.current.expertise,
        response_style: 'Knowledge-based responses with business expertise',
        knowledge_base: aiSettingsRef.current.knowledgeBase,
        hot_lead_keywords: aiSettingsRef.current.hotLeadKeywords,
        auto_response_enabled: automationSettings.responseControl.aiResponses,
        alert_hot_leads: aiSettingsRef.current.behaviors.hotLeadAlerts,
        include_availability: aiSettingsRef.current.behaviors.includeAvailability,
        ask_qualifying_questions: aiSettingsRef.current.behaviors.askQualifyingQuestions,
        require_approval: !automationSettings.responseControl.autoSend,
        
        // Enhanced settings
        email_filtering: automationSettings.emailFiltering,
        response_rules: automationSettings.responseControl,
        monitoring: dashboardSettings
      };

      console.log('💾 Saving settings:', settingsToSave);

      const response = await fetch('/api/customer/ai-settings', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(settingsToSave)
      });

      if (response.ok) {
        const result = await response.json();
        console.log('✅ Settings saved successfully:', result);
        alert('✅ Settings saved successfully! Your AI now has your business knowledge.');
      } else {
        const errorData = await response.json();
        console.error('❌ Failed to save settings:', errorData);
        if (errorData.missing_column === 'knowledge_base') {
          alert('❌ Database needs to be updated! Please contact support.');
        } else {
          alert(`❌ Failed to save settings: ${errorData.error || 'Unknown error'}`);
        }
      }
    } catch (error) {
      console.error('❌ Error saving settings:', error);
      alert('❌ Error saving settings. Please try again.');
    } finally {
      setSaving(false);
    }
  };

  const connectGmail = () => {
    if (gmailConnection) {
      setReconnecting(true);
      console.log('🔗 Reconnecting Gmail account...');
    } else {
      console.log('🔗 Connecting Gmail account...');
    }
    window.location.href = '/api/auth/google';
  };

  const checkGmailEmails = async (silent = false) => {
    if (!gmailConnection) {
      console.log('No Gmail connection available');
      return;
    }
    
    if (!silent) setGmailLoading(true);
    try {
      const response = await fetch('/api/gmail/monitor', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'check',
          emailAddress: gmailConnection.email
        })
      });

      if (response.ok) {
        const data = await response.json();
        setGmailEmails(data.emails || []);
        setStats(prev => ({
          ...prev,
          totalConversations: (data.emails?.length || 0) + conversations.length,
          activeToday: data.emails?.length || 0
        }));
        
        if (!silent) {
          lastRefreshRef.current = new Date();
          setLastRefreshDisplay(new Date());
        }
      } else if (response.status === 401) {
        console.log('⚠️ Gmail authentication expired - please reconnect');
        setGmailConnection(null);
      } else if (response.status === 404) {
        console.log('⚠️ Gmail monitor API not available');
      } else {
        console.error('Gmail check failed:', response.status);
      }
    } catch (error) {
      console.error('Error checking Gmail emails:', error);
    } finally {
      if (!silent) setGmailLoading(false);
    }
  };

  const sendAIResponse = async (emailId, preview = false) => {
    if (!gmailConnection) return;
    
    setResponding(true);
    try {
      const response = await fetch('/api/gmail/monitor', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'respond',
          emailAddress: gmailConnection.email,
          emailId: emailId,
          actualSend: !preview
        })
      });

      if (response.ok) {
        const data = await response.json();
        if (!preview) {
          setTimeout(() => checkGmailEmails(false), 1000);
        }
        return data;
      }
    } catch (error) {
      console.error('Error sending AI response:', error);
    } finally {
      setResponding(false);
    }
  };

  // Helper functions for business rules - using useCallback to prevent re-renders
  const addToBlacklist = useCallback(() => {
    if (newBlacklistItem.trim()) {
      setAutomationSettings(prev => ({
        ...prev,
        businessRules: {
          ...prev.businessRules,
          blacklist: [...prev.businessRules.blacklist, newBlacklistItem.trim()]
        }
      }));
      setNewBlacklistItem('');
    }
  }, [newBlacklistItem]);

  const removeFromBlacklist = useCallback((index) => {
    setAutomationSettings(prev => ({
      ...prev,
      businessRules: {
        ...prev.businessRules,
        blacklist: prev.businessRules.blacklist.filter((_, i) => i !== index)
      }
    }));
  }, []);

  const addToWhitelist = useCallback(() => {
    if (newWhitelistItem.trim()) {
      setAutomationSettings(prev => ({
        ...prev,
        businessRules: {
          ...prev.businessRules,
          whitelist: [...prev.businessRules.whitelist, newWhitelistItem.trim()]
        }
      }));
      setNewWhitelistItem('');
    }
  }, [newWhitelistItem]);

  const removeFromWhitelist = useCallback((index) => {
    setAutomationSettings(prev => ({
      ...prev,
      businessRules: {
        ...prev.businessRules,
        whitelist: prev.businessRules.whitelist.filter((_, i) => i !== index)
      }
    }));
  }, []);

  const addCustomKeyword = useCallback(() => {
    if (newCustomKeyword.trim()) {
      setAutomationSettings(prev => ({
        ...prev,
        businessRules: {
          ...prev.businessRules,
          customKeywords: [...prev.businessRules.customKeywords, newCustomKeyword.trim()]
        }
      }));
      setNewCustomKeyword('');
    }
  }, [newCustomKeyword]);

  const removeCustomKeyword = useCallback((index) => {
    setAutomationSettings(prev => ({
      ...prev,
      businessRules: {
        ...prev.businessRules,
        customKeywords: prev.businessRules.customKeywords.filter((_, i) => i !== index)
      }
    }));
  }, []);

  const addHotLeadKeyword = useCallback(() => {
    const input = document.getElementById('hotLeadKeywordInput');
    if (input && input.value.trim()) {
      const newKeyword = input.value.trim();
      if (!aiSettingsRef.current.hotLeadKeywords.includes(newKeyword)) {
        aiSettingsRef.current.hotLeadKeywords = [...aiSettingsRef.current.hotLeadKeywords, newKeyword];
      }
      input.value = '';
    }
  }, []);

  const removeHotLeadKeyword = useCallback((index) => {
    aiSettingsRef.current.hotLeadKeywords = aiSettingsRef.current.hotLeadKeywords.filter((_, i) => i !== index);
    // Force re-render for this specific change
    setActiveTab(prev => prev);
  }, []);

  // 📊 STREAMLINED DASHBOARD TAB
  const DashboardTab = () => (
    <div className="space-y-6">
      {/* STREAMLINED Header - Gmail Status + Check Emails + Last Refresh */}
      {gmailConnection ? (
        <div className="bg-white/10 backdrop-blur-lg rounded-2xl border border-white/20 p-6 mb-6">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <div className="p-3 rounded-xl bg-green-500/20 backdrop-blur-sm border border-green-500/30">
                <CheckCircle className="w-6 h-6 text-green-400" />
              </div>
              <div>
                <h3 className="font-semibold text-xl text-white">Gmail AI Connected</h3>
                <p className="text-gray-300">
                  Connected to {gmailConnection.email} • Auto-monitoring active
                </p>
              </div>
            </div>
            <div className="flex items-center gap-4">
              <span className="text-sm text-gray-400">
                Last refreshed: {lastRefreshDisplay.toLocaleTimeString()}
              </span>
              <Button 
                onClick={() => checkGmailEmails(false)}
                disabled={gmailLoading}
                className="flex items-center gap-2 bg-blue-600 hover:bg-blue-700 text-white"
              >
                {gmailLoading ? (
                  <RefreshCw className="w-4 h-4 animate-spin" />
                ) : (
                  <RefreshCw className="w-4 h-4" />
                )}
                Check Emails
              </Button>
              <Button 
                size="sm" 
                variant="outline"
                onClick={() => window.open('/email/test', '_blank')}
                className="bg-white/10 border-white/20 text-white hover:bg-white/20 backdrop-blur-lg"
              >
                <ExternalLink className="w-4 h-4 mr-1" />
                Advanced Testing
              </Button>
            </div>
          </div>
        </div>
      ) : (
        <div className="bg-white/10 backdrop-blur-lg rounded-2xl border border-white/20 p-6 mb-6">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <div className="p-3 rounded-xl bg-yellow-500/20 backdrop-blur-sm border border-yellow-500/30">
                <AlertCircle className="w-6 h-6 text-yellow-400" />
              </div>
              <div>
                <h3 className="font-semibold text-xl text-white">Gmail AI Setup Required</h3>
                <p className="text-gray-300">
                  Connect Gmail for AI-powered email automation
                </p>
              </div>
            </div>
            <Button onClick={connectGmail} className="flex items-center gap-2 bg-blue-600 hover:bg-blue-700 text-white">
              <LinkIcon className="w-4 h-4" />
              Connect Gmail
            </Button>
          </div>
        </div>
      )}

      {/* Metrics - Larger and cleaner */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
        <div className="bg-white/10 backdrop-blur-lg rounded-2xl border border-white/20 p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-300">Total Conversations</p>
              <p className="text-3xl font-bold text-white">{stats.totalConversations}</p>
            </div>
            <div className="p-3 rounded-xl bg-blue-500/20">
              <MessageSquare className="w-8 h-8 text-blue-400" />
            </div>
          </div>
        </div>

        <div className="bg-white/10 backdrop-blur-lg rounded-2xl border border-white/20 p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-300">Active Today</p>
              <p className="text-3xl font-bold text-white">{stats.activeToday}</p>
            </div>
            <div className="p-3 rounded-xl bg-green-500/20">
              <Zap className="w-8 h-8 text-green-400" />
            </div>
          </div>
        </div>

        <div className="bg-white/10 backdrop-blur-lg rounded-2xl border border-white/20 p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-300">Response Rate</p>
              <p className="text-3xl font-bold text-white">{stats.responseRate}%</p>
            </div>
            <div className="p-3 rounded-xl bg-purple-500/20">
              <Target className="w-8 h-8 text-purple-400" />
            </div>
          </div>
        </div>

        <div className="bg-white/10 backdrop-blur-lg rounded-2xl border border-white/20 p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-300">Avg Response Time</p>
              <p className="text-3xl font-bold text-white">{stats.avgResponseTime}m</p>
            </div>
            <div className="p-3 rounded-xl bg-orange-500/20">
              <Clock className="w-8 h-8 text-orange-400" />
            </div>
          </div>
        </div>
      </div>

      {/* Dashboard content */}
      <div className="bg-white/10 backdrop-blur-lg rounded-2xl border border-white/20 p-6">
        <h3 className="text-lg font-semibold text-white mb-4">Email Dashboard</h3>
        <p className="text-gray-300">Dashboard functionality will be here</p>
      </div>
    </div>
  );

  // 🚨 AGGRESSIVE FIX: AI Settings tab with NO state updates during typing
  const AISettingsTab = () => {
    // 🚨 CRITICAL: This component uses refs and direct DOM manipulation to prevent re-renders
    
    // Handle input changes without triggering React re-renders
    const handleDirectInputChange = (field, value) => {
      businessProfileRef.current[field] = value;
      console.log(`📝 Direct input change: ${field} = "${value}"`);
      // No setState calls = No re-renders = No focus loss
    };
    
    const handleDirectAiChange = (field, value) => {
      aiSettingsRef.current[field] = value;
      console.log(`📝 Direct AI change: ${field} = "${value}"`);
      // No setState calls = No re-renders = No focus loss
    };

    const handleDirectTextareaChange = (value) => {
      aiSettingsRef.current.knowledgeBase = value;
      console.log(`📝 Direct textarea change: length = ${value.length}`);
      // No setState calls = No re-renders = No focus loss
    };

    return (
      <div className="space-y-6">
        {/* Business Profile with ZERO re-render inputs */}
        <div className="bg-white/10 backdrop-blur-lg rounded-2xl border border-white/20 p-6">
          <div className="flex items-center gap-2 mb-4">
            <Building className="w-5 h-5 text-blue-400" />
            <h3 className="text-lg font-semibold text-white">Business Profile</h3>
          </div>
          <p className="text-gray-300 mb-6">Tell the AI about your business</p>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div>
              <label className="block text-sm font-medium mb-2 text-gray-300">Business Name</label>
              <input
                type="text"
                defaultValue={businessProfileRef.current.name}
                onChange={(e) => handleDirectInputChange('name', e.target.value)}
                placeholder="Your Business Name"
                className="w-full px-3 py-2 bg-white/10 border border-white/20 rounded-md text-white placeholder-gray-400 focus:border-blue-400 focus:outline-none"
                style={{ color: 'white' }}
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-2 text-gray-300">Industry</label>
              <input
                type="text"
                defaultValue={businessProfileRef.current.industry}
                onChange={(e) => handleDirectInputChange('industry', e.target.value)}
                placeholder="e.g., Real Estate, Consulting"
                className="w-full px-3 py-2 bg-white/10 border border-white/20 rounded-md text-white placeholder-gray-400 focus:border-blue-400 focus:outline-none"
                style={{ color: 'white' }}
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-2 text-gray-300">Expertise</label>
              <input
                type="text"
                defaultValue={businessProfileRef.current.expertise}
                onChange={(e) => handleDirectInputChange('expertise', e.target.value)}
                placeholder="What you specialize in"
                className="w-full px-3 py-2 bg-white/10 border border-white/20 rounded-md text-white placeholder-gray-400 focus:border-blue-400 focus:outline-none"
                style={{ color: 'white' }}
              />
            </div>
          </div>
        </div>

        {/* Communication Tone */}
        <div className="bg-white/10 backdrop-blur-lg rounded-2xl border border-white/20 p-6">
          <div className="flex items-center gap-2 mb-4">
            <MessageCircle className="w-5 h-5 text-blue-400" />
            <h3 className="text-lg font-semibold text-white">Communication Tone</h3>
          </div>
          <p className="text-gray-300 mb-6">How should the AI communicate with customers?</p>
          <div>
            <label className="block text-sm font-medium mb-3 text-gray-300">Select Tone</label>
            <div className="grid grid-cols-3 gap-3">
              {['professional', 'casual', 'formal'].map(tone => (
                <button
                  key={tone}
                  onClick={() => {
                    handleDirectAiChange('communicationTone', tone);
                    // Force a minimal re-render to update button appearance
                    setActiveTab(prev => prev);
                  }}
                  className={`capitalize px-4 py-2 rounded-md border-2 transition-colors ${
                    aiSettingsRef.current.communicationTone === tone
                      ? 'bg-blue-600 hover:bg-blue-700 text-white border-blue-600'
                      : 'bg-white/10 border-white/20 text-white hover:bg-white/20'
                  }`}
                >
                  {tone}
                </button>
              ))}
            </div>
          </div>
        </div>

        {/* FIXED KNOWLEDGE BASE with ZERO re-renders */}
        <div className="bg-white/10 backdrop-blur-lg rounded-2xl border border-white/20 p-6">
          <div className="flex items-center gap-2 mb-4">
            <BookOpen className="w-5 h-5 text-blue-400" />
            <h3 className="text-lg font-semibold text-white">Business Knowledge Base</h3>
          </div>
          <p className="text-gray-300 mb-6">
            Add specific information about your services, pricing, processes, and policies
          </p>
          <div>
            <label className="block text-sm font-medium mb-3 text-gray-300">
              Business Information (200-1000 characters recommended)
            </label>
            <textarea
              defaultValue={aiSettingsRef.current.knowledgeBase}
              onChange={(e) => handleDirectTextareaChange(e.target.value)}
              placeholder="Example: We offer full-service real estate including buying, selling, and property management..."
              rows={8}
              maxLength={2000}
              className="w-full px-3 py-2 bg-white/10 border border-white/20 rounded-md text-white placeholder-gray-400 focus:border-blue-400 focus:outline-none resize-none"
              style={{ color: 'white' }}
            />
            <div className="flex justify-between items-center mt-2">
              <p className="text-xs text-gray-400">
                Include: services offered, pricing, coverage areas, processes, specialties, contact hours
              </p>
              <p className="text-xs text-gray-500">
                {aiSettingsRef.current.knowledgeBase.length}/2000 characters
              </p>
            </div>
          </div>
          
          {aiSettingsRef.current.knowledgeBase.length > 0 && (
            <div className="bg-green-500/20 border border-green-500/30 rounded-lg p-3 mt-4">
              <p className="text-sm text-green-300 font-medium">✅ Knowledge Base Active</p>
              <p className="text-xs text-green-400 mt-1">
                AI can now answer specific questions about your business based on this information
              </p>
            </div>
          )}
          
          {aiSettingsRef.current.knowledgeBase.length === 0 && (
            <div className="bg-yellow-500/20 border border-yellow-500/30 rounded-lg p-3 mt-4">
              <p className="text-sm text-yellow-300 font-medium">⚠️ Knowledge Base Empty</p>
              <p className="text-xs text-yellow-400 mt-1">
                AI will give generic responses without business-specific knowledge
              </p>
            </div>
          )}
        </div>

        {/* Hot Lead Keywords */}
        <div className="bg-white/10 backdrop-blur-lg rounded-2xl border border-white/20 p-6">
          <h3 className="text-lg font-semibold text-white mb-2">Hot Lead Keywords</h3>
          <p className="text-gray-300 mb-6">Keywords that indicate urgent, high-priority leads</p>
          <div className="space-y-3">
            <div className="flex flex-wrap gap-2">
              {aiSettingsRef.current.hotLeadKeywords.map((keyword, index) => (
                <div 
                  key={`keyword-${index}-${keyword}`}
                  onClick={() => removeHotLeadKeyword(index)}
                  className="cursor-pointer flex items-center gap-1 px-3 py-1 rounded-full bg-white/20 border border-white/30 text-white hover:bg-red-500/20 hover:border-red-500/30 transition-colors"
                >
                  {keyword}
                  <X className="w-3 h-3" />
                </div>
              ))}
            </div>
            <div className="flex gap-2">
              <input
                id="hotLeadKeywordInput"
                type="text"
                placeholder="Add keyword (press Enter)"
                onKeyPress={(e) => {
                  if (e.key === 'Enter') {
                    addHotLeadKeyword();
                  }
                }}
                className="flex-1 px-3 py-2 bg-white/10 border border-white/20 rounded-md text-white placeholder-gray-400 focus:border-blue-400 focus:outline-none"
                style={{ color: 'white' }}
              />
              <button 
                onClick={addHotLeadKeyword}
                className="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-md text-sm"
              >
                Add
              </button>
            </div>
          </div>
        </div>

        {/* Save Button */}
        <div className="flex justify-end">
          <button
            onClick={saveAllSettings} 
            disabled={saving} 
            className="flex items-center gap-2 px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white rounded-md disabled:opacity-50"
          >
            {saving ? <RefreshCw className="w-4 h-4 animate-spin" /> : <CheckCircle className="w-4 h-4" />}
            Save AI Settings
          </button>
        </div>
      </div>
    );
  };

  // 🔧 AUTOMATION TAB (simplified for now)
  const AutomationTab = () => (
    <div className="space-y-6">
      <div className="bg-white/10 backdrop-blur-lg rounded-2xl border border-white/20 p-6">
        <h3 className="text-lg font-semibold text-white mb-4">Automation Settings</h3>
        <p className="text-gray-300">Automation functionality will be here</p>
      </div>
    </div>
  );

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-900 via-blue-900 to-purple-900 p-6">
        <div className="animate-pulse space-y-4 max-w-7xl mx-auto">
          <div className="h-8 bg-white/20 rounded-xl w-1/4"></div>
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            {[1,2,3,4].map(i => (
              <div key={i} className="h-24 bg-white/10 rounded-2xl backdrop-blur-lg border border-white/20"></div>
            ))}
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-blue-900 to-purple-900">
      <div className="p-6 max-w-7xl mx-auto">
        {/* Header */}
        <div className="flex items-center gap-4 mb-6">
          <Button 
            variant="outline" 
            onClick={() => router.push('/dashboard')}
            className="flex items-center gap-2 bg-white/10 border-white/20 text-white hover:bg-white/20 backdrop-blur-lg"
          >
            <ArrowLeft className="w-4 h-4" />
            Dashboard
          </Button>
          <div className="flex-1">
            <h1 className="text-2xl font-bold flex items-center gap-2 text-white">
              <Mail className="w-6 h-6" />
              Email AI Manager
            </h1>
            <p className="text-gray-300">Unified Gmail automation with smart AI responses and filtering</p>
          </div>
        </div>

        {/* Tab Navigation */}
        <div className="mb-6">
          <div className="border-b border-white/20">
            <nav className="-mb-px flex space-x-8">
              {tabs.map(tab => {
                const Icon = tab.icon;
                return (
                  <button
                    key={tab.id}
                    onClick={() => setActiveTab(tab.id)}
                    className={`whitespace-nowrap py-2 px-1 border-b-2 font-medium text-sm ${
                      activeTab === tab.id
                        ? 'border-blue-400 text-blue-300'
                        : 'border-transparent text-gray-400 hover:text-gray-300 hover:border-gray-500'
                    }`}
                  >
                    <div className="flex items-center gap-2">
                      <Icon className="w-4 h-4" />
                      {tab.label}
                    </div>
                  </button>
                );
              })}
            </nav>
          </div>
          <div className="mt-2">
            <p className="text-sm text-gray-400">
              {tabs.find(tab => tab.id === activeTab)?.description}
            </p>
          </div>
        </div>

        {/* Tab Content */}
        <div className="tab-content">
          {activeTab === 'dashboard' && <DashboardTab />}
          {activeTab === 'ai-settings' && <AISettingsTab />}
          {activeTab === 'automation' && <AutomationTab />}
          {activeTab === 'connections' && <ConnectionsTab />}
        </div>
      </div>
    </div>
  );
}
