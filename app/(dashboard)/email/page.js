'use client';

import { useState, useEffect, useRef, useCallback, useMemo } from 'react';
import { useRouter } from 'next/navigation';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import ConnectionsTab from '@/components/ConnectionsTab';
import { 
  Mail, 
  Settings, 
  Send, 
  Users, 
  TrendingUp, 
  Clock, 
  ArrowLeft,
  MessageSquare,
  Bot,
  FileText,
  Sparkles,
  Zap,
  Target,
  CheckCircle,
  AlertCircle,
  RefreshCw,
  Eye,
  ExternalLink,
  Link as LinkIcon,
  Globe,
  BarChart3,
  Wrench,
  Volume2,
  VolumeX,
  Filter,
  Inbox,
  Shield,
  Building,
  MessageCircle,
  Phone,
  Archive,
  X,
  BookOpen
} from 'lucide-react';

export default function CompleteEmailSystem() {
  const router = useRouter();
  const [activeTab, setActiveTab] = useState('dashboard');
  const refreshIntervalRef = useRef(null);
  
  // 🎯 FIXED: Only the problematic input fields use refs, everything else uses normal state
  const businessProfileRef = useRef({
    name: '',
    industry: '',
    expertise: ''
  });
  
  const knowledgeBaseRef = useRef('');
  
  // Existing functionality states - ALL PRESERVED
  const [conversations, setConversations] = useState([]);
  const [gmailEmails, setGmailEmails] = useState([]);
  const [selectedConversation, setSelectedConversation] = useState(null);
  const [selectedGmailEmail, setSelectedGmailEmail] = useState(null);
  const [newMessage, setNewMessage] = useState('');
  const [loading, setLoading] = useState(true);
  const [gmailLoading, setGmailLoading] = useState(false);
  const [responding, setResponding] = useState(false);
  const [gmailConnection, setGmailConnection] = useState(null);
  const [lastRefresh, setLastRefresh] = useState(new Date());
  const [saving, setSaving] = useState(false);
  const [reconnecting, setReconnecting] = useState(false);
  
  // 🧪 NEW: AI Testing states
  const [testResult, setTestResult] = useState(null);
  const [testing, setTesting] = useState(false);
  
  const [stats, setStats] = useState({
    totalConversations: 0,
    activeToday: 0,
    responseRate: 0,
    avgResponseTime: 0
  });

  // Dashboard Settings (simplified)
  const [dashboardSettings, setDashboardSettings] = useState({
    autoRefresh: true,
    refreshInterval: 30
  });

  // 🎯 ENHANCED AI Settings - Added all new fields
  const [aiSettings, setAiSettings] = useState({
    // ✅ Existing fields - preserved
    communicationTone: 'professional',
    knowledgeBase: '',
    hotLeadKeywords: ['urgent', 'asap', 'budget', 'ready'],
    behaviors: {
      includeAvailability: true,
      askQualifyingQuestions: true,
      hotLeadAlerts: true,
      smsLeadAlerts: false
    },
    
    // 🎯 NEW: AI Behavior Settings
    customInstructions: '',
    alwaysAskPhone: false,
    scheduleWithin24h: false,
    highlightAdvantages: false,
    includeCallToAction: true,
    offerCallbackUrgent: true,
    
    // ⚙️ NEW: AI Model Settings
    aiModel: 'gpt-4o-mini',
    creativity: 0.7,
    responseLength: 'medium',
    enableHotLeadAnalysis: true,
    enableAIResponses: true
  });

  // Automation Settings - FULLY PRESERVED
  const [automationSettings, setAutomationSettings] = useState({
    responseControl: {
      aiResponses: true,
      autoSend: false,
      businessHours: true,
      urgentPriority: true
    },
    emailFiltering: {
      autoArchiveSpam: true,
      blockMassEmails: true,
      personalOnly: false,
      skipAutoGenerated: true
    },
    businessRules: {
      blacklist: [],
      whitelist: [],
      customKeywords: []
    }
  });

  // Form states for business rules - FULLY PRESERVED
  const [newBlacklistItem, setNewBlacklistItem] = useState('');
  const [newWhitelistItem, setNewWhitelistItem] = useState('');
  const [newCustomKeyword, setNewCustomKeyword] = useState('');

  // 🎯 FIXED: Memoized handlers for non-problematic inputs
  const handleAiSettingsChange = useCallback((field, value) => {
    setAiSettings(prev => ({ ...prev, [field]: value }));
  }, []);

  const handleAiBehaviorChange = useCallback((field, value) => {
    setAiSettings(prev => ({
      ...prev,
      behaviors: { ...prev.behaviors, [field]: value }
    }));
  }, []);

  const handleAutomationControlChange = useCallback((field, value) => {
    setAutomationSettings(prev => ({
      ...prev,
      responseControl: { ...prev.responseControl, [field]: value }
    }));
  }, []);

  const handleEmailFilteringChange = useCallback((field, value) => {
    setAutomationSettings(prev => ({
      ...prev,
      emailFiltering: { ...prev.emailFiltering, [field]: value }
    }));
  }, []);

  // Tab configuration
  const tabs = useMemo(() => [
    { 
      id: 'dashboard', 
      label: 'Dashboard', 
      icon: BarChart3,
      description: 'Real-time Gmail conversations and AI responses'
    },
    { 
      id: 'ai-settings', 
      label: 'AI Settings', 
      icon: Bot,
      description: 'Business profile, communication tone, and AI behavior'
    },
    { 
      id: 'automation', 
      label: 'Automation', 
      icon: Wrench,
      description: 'Gmail connection, email filtering, and automation rules'
    },
    { 
      id: 'connections', 
      label: 'Connections', 
      icon: Settings,
      description: 'Manage Gmail and domain email connections'
    }
  ], []);

  // Load data only once on mount and handle URL parameters
  useEffect(() => {
    loadInitialData();
    handleUrlParameters();
  }, []);

  // Handle URL parameters for tab activation and messages
  const handleUrlParameters = () => {
    const urlParams = new URLSearchParams(window.location.search);
    const tab = urlParams.get('tab');
    const success = urlParams.get('success');
    const error = urlParams.get('error');
    
    console.log('🔍 URL Parameters:', { tab, success, error });
    
    // Set active tab if specified in URL
    if (tab && tabs.some(t => t.id === tab)) {
      console.log('🎯 Setting active tab to:', tab);
      setActiveTab(tab);
    }
    
    // Handle success messages
    if (success === 'gmail_connected') {
      console.log('✅ Gmail connection successful');
    }
    
    // Handle error messages
    if (error) {
      console.log('❌ OAuth error:', error);
    }
    
    // Clear URL parameters after processing to clean up the URL
    if (tab || success || error) {
      const newUrl = window.location.pathname;
      window.history.replaceState({}, document.title, newUrl);
      console.log('🧹 Cleaned URL parameters');
    }
  };

  // Auto-refresh logic - only runs when necessary and doesn't affect other tabs
  useEffect(() => {
    // Clear any existing interval
    if (refreshIntervalRef.current) {
      clearInterval(refreshIntervalRef.current);
      refreshIntervalRef.current = null;
    }

    // ONLY set up auto-refresh for dashboard tab when Gmail connected
    if (activeTab === 'dashboard' && gmailConnection && !loading) {
      refreshIntervalRef.current = setInterval(() => {
        checkGmailEmails(true); // Silent refresh
        setLastRefresh(new Date());
      }, dashboardSettings.refreshInterval * 1000);
    }

    // Cleanup
    return () => {
      if (refreshIntervalRef.current) {
        clearInterval(refreshIntervalRef.current);
        refreshIntervalRef.current = null;
      }
    };
  }, [activeTab, gmailConnection?.email, dashboardSettings.refreshInterval, loading]);

  const loadInitialData = async () => {
    setLoading(true);
    try {
      await Promise.all([
        loadEmailData(),
        checkGmailConnection(),
        loadAISettings()
      ]);
    } catch (error) {
      console.error('Error loading initial data:', error);
    } finally {
      setLoading(false);
    }
  };

  const loadEmailData = async () => {
    try {
      const convResponse = await fetch('/api/customer/email-conversations');
      if (convResponse.ok) {
        const convData = await convResponse.json();
        setConversations(convData.conversations || []);
      }

      const statsResponse = await fetch('/api/customer/email-stats');
      if (statsResponse.ok) {
        const statsData = await statsResponse.json();
        setStats(statsData.stats || stats);
      }
    } catch (error) {
      console.error('Error loading email data:', error);
    }
  };

  const checkGmailConnection = async () => {
    try {
      const response = await fetch('/api/gmail/status');
      if (response.ok) {
        const data = await response.json();
        
        if (data.connected && data.connection) {
          setGmailConnection(data.connection);
          setStats(prev => ({ ...prev, responseRate: 95 }));
        } else {
          setGmailConnection(null);
        }
      }
    } catch (error) {
      console.error('Error checking Gmail connection:', error);
      setGmailConnection(null);
    }
  };

  // 🎯 ENHANCED: Load AI Settings with new fields
  const loadAISettings = async () => {
    try {
      const response = await fetch('/api/customer/ai-settings');
      if (response.ok) {
        const data = await response.json();
        if (data.settings) {
          // Update refs for problematic inputs
          businessProfileRef.current = {
            name: data.customer?.business_name || '',
            industry: data.settings.expertise || '',
            expertise: data.settings.specialties || ''
          };
          
          knowledgeBaseRef.current = data.settings.knowledge_base || '';
          
          // Update normal state for non-problematic inputs including NEW fields
          setAiSettings(prev => ({
            ...prev,
            // ✅ Existing fields
            communicationTone: data.settings.tone || 'professional',
            knowledgeBase: data.settings.knowledge_base || '',
            behaviors: {
              ...prev.behaviors,
              includeAvailability: data.settings.include_availability !== false,
              askQualifyingQuestions: data.settings.ask_qualifying_questions !== false,
              hotLeadAlerts: data.settings.alert_hot_leads !== false
            },
            
            // 🎯 NEW: AI Behavior Settings
            customInstructions: data.settings.ai_system_prompt || data.settings.custom_instructions || '',
            alwaysAskPhone: data.settings.always_ask_phone === true,
            scheduleWithin24h: data.settings.schedule_within_24h === true,
            highlightAdvantages: data.settings.highlight_advantages === true,
            includeCallToAction: data.settings.include_call_to_action !== false,
            offerCallbackUrgent: data.settings.offer_callback_urgent !== false,
            
            // ⚙️ NEW: AI Model Settings
            aiModel: data.settings.ai_model || 'gpt-4o-mini',
            creativity: parseFloat(data.settings.ai_temperature) || 0.7,
            responseLength: data.settings.response_length || 'medium',
            enableHotLeadAnalysis: data.settings.enable_hot_lead_analysis !== false,
            enableAIResponses: data.settings.enable_ai_responses !== false
          }));

          if (data.settings.hot_lead_keywords) {
            setAiSettings(prev => ({
              ...prev,
              hotLeadKeywords: Array.isArray(data.settings.hot_lead_keywords) 
                ? data.settings.hot_lead_keywords 
                : prev.hotLeadKeywords
            }));
          }
        }
      } else if (response.status === 404) {
        console.log('AI settings API not found - using defaults');
      }
    } catch (error) {
      console.log('AI settings not available - using defaults');
    }
  };

  // 🎯 ENHANCED: Save All Settings with new fields
  const saveAllSettings = async () => {
    setSaving(true);
    try {
      // Prepare the settings using both refs and state including NEW fields
      const settingsToSave = {
        // ✅ Existing fields
        tone: aiSettings.communicationTone,
        expertise: businessProfileRef.current.industry,
        specialties: businessProfileRef.current.expertise,
        response_style: 'Knowledge-based responses with business expertise',
        knowledge_base: knowledgeBaseRef.current,
        hot_lead_keywords: aiSettings.hotLeadKeywords,
        auto_response_enabled: automationSettings.responseControl.aiResponses,
        alert_hot_leads: aiSettings.behaviors.hotLeadAlerts,
        include_availability: aiSettings.behaviors.includeAvailability,
        ask_qualifying_questions: aiSettings.behaviors.askQualifyingQuestions,
        require_approval: !automationSettings.responseControl.autoSend,
        
        // 🎯 NEW: AI Behavior Settings
        ai_system_prompt: aiSettings.customInstructions,
        custom_instructions: aiSettings.customInstructions,
        always_ask_phone: aiSettings.alwaysAskPhone,
        schedule_within_24h: aiSettings.scheduleWithin24h,
        highlight_advantages: aiSettings.highlightAdvantages,
        include_call_to_action: aiSettings.includeCallToAction,
        offer_callback_urgent: aiSettings.offerCallbackUrgent,
        
        // ⚙️ NEW: AI Model Settings
        ai_model: aiSettings.aiModel,
        ai_temperature: aiSettings.creativity,
        ai_max_tokens: aiSettings.responseLength === 'short' ? 150 : aiSettings.responseLength === 'long' ? 500 : 350,
        response_length: aiSettings.responseLength,
        enable_hot_lead_analysis: aiSettings.enableHotLeadAnalysis,
        enable_ai_responses: aiSettings.enableAIResponses,
        
        // Enhanced settings
        email_filtering: automationSettings.emailFiltering,
        response_rules: automationSettings.responseControl,
        monitoring: dashboardSettings
      };

      console.log('💾 Saving enhanced settings:', settingsToSave);

      const response = await fetch('/api/customer/ai-settings', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(settingsToSave)
      });

      if (response.ok) {
        const result = await response.json();
        console.log('✅ Enhanced settings saved successfully:', result);
        alert('✅ Enhanced AI settings saved successfully! Your AI now has advanced behavior and model configurations.');
      } else {
        const errorData = await response.json();
        console.error('❌ Failed to save settings:', errorData);
        if (errorData.missing_column === 'knowledge_base') {
          alert('❌ Database needs to be updated! Please contact support.');
        } else {
          alert(`❌ Failed to save settings: ${errorData.error || 'Unknown error'}`);
        }
      }
    } catch (error) {
      console.error('❌ Error saving settings:', error);
      alert('❌ Error saving settings. Please try again.');
    } finally {
      setSaving(false);
    }
  };

  // 🧪 NEW: Test AI Response function
  const testAIResponse = async () => {
    setTesting(true);
    setTestResult(null);
    try {
      const response = await fetch('/api/customer/test-ai-response', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          message: "Hi, I'm urgently looking for a 3-bedroom house under $500K. Can you help me find something ASAP? I'm ready to buy immediately.",
          settings: {
            ...aiSettings,
            business_name: businessProfileRef.current.name,
            knowledge_base: knowledgeBaseRef.current,
            ai_system_prompt: aiSettings.customInstructions,
            ai_model: aiSettings.aiModel,
            ai_temperature: aiSettings.creativity,
            ai_max_tokens: aiSettings.responseLength === 'short' ? 150 : aiSettings.responseLength === 'long' ? 500 : 350,
            response_length: aiSettings.responseLength,
            enable_hot_lead_analysis: aiSettings.enableHotLeadAnalysis,
            enable_ai_responses: aiSettings.enableAIResponses
          }
        })
      });

      const data = await response.json();
      if (data.success) {
        setTestResult(data);
      } else {
        alert('Error testing AI: ' + data.error);
      }
    } catch (error) {
      console.error('Error testing AI:', error);
      alert('Error testing AI response');
    } finally {
      setTesting(false);
    }
  };

  const connectGmail = () => {
    if (gmailConnection) {
      setReconnecting(true);
      console.log('🔗 Reconnecting Gmail account...');
    } else {
      console.log('🔗 Connecting Gmail account...');
    }
    window.location.href = '/api/auth/google';
  };

  const checkGmailEmails = async (silent = false) => {
    if (!gmailConnection) {
      console.log('No Gmail connection available');
      return;
    }
    
    if (!silent) setGmailLoading(true);
    try {
      const response = await fetch('/api/gmail/monitor', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'check',
          emailAddress: gmailConnection.email
        })
      });

      if (response.ok) {
        const data = await response.json();
        setGmailEmails(data.emails || []);
        setStats(prev => ({
          ...prev,
          totalConversations: (data.emails?.length || 0) + conversations.length,
          activeToday: data.emails?.length || 0
        }));
        
        if (!silent) setLastRefresh(new Date());
      } else if (response.status === 401) {
        console.log('⚠️ Gmail authentication expired - please reconnect');
        setGmailConnection(null);
      } else if (response.status === 404) {
        console.log('⚠️ Gmail monitor API not available');
      } else {
        console.error('Gmail check failed:', response.status);
      }
    } catch (error) {
      console.error('Error checking Gmail emails:', error);
    } finally {
      if (!silent) setGmailLoading(false);
    }
  };

  const sendAIResponse = async (emailId, preview = false) => {
    if (!gmailConnection) return;
    
    setResponding(true);
    try {
      const response = await fetch('/api/gmail/monitor', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'respond',
          emailAddress: gmailConnection.email,
          emailId: emailId,
          actualSend: !preview
        })
      });

      if (response.ok) {
        const data = await response.json();
        if (!preview) {
          setTimeout(() => checkGmailEmails(false), 1000);
        }
        return data;
      }
    } catch (error) {
      console.error('Error sending AI response:', error);
    } finally {
      setResponding(false);
    }
  };

  // Helper functions for business rules - ALL PRESERVED
  const addToBlacklist = useCallback(() => {
    if (newBlacklistItem.trim()) {
      setAutomationSettings(prev => ({
        ...prev,
        businessRules: {
          ...prev.businessRules,
          blacklist: [...prev.businessRules.blacklist, newBlacklistItem.trim()]
        }
      }));
      setNewBlacklistItem('');
    }
  }, [newBlacklistItem]);

  const removeFromBlacklist = useCallback((index) => {
    setAutomationSettings(prev => ({
      ...prev,
      businessRules: {
        ...prev.businessRules,
        blacklist: prev.businessRules.blacklist.filter((_, i) => i !== index)
      }
    }));
  }, []);

  const addToWhitelist = useCallback(() => {
    if (newWhitelistItem.trim()) {
      setAutomationSettings(prev => ({
        ...prev,
        businessRules: {
          ...prev.businessRules,
          whitelist: [...prev.businessRules.whitelist, newWhitelistItem.trim()]
        }
      }));
      setNewWhitelistItem('');
    }
  }, [newWhitelistItem]);

  const removeFromWhitelist = useCallback((index) => {
    setAutomationSettings(prev => ({
      ...prev,
      businessRules: {
        ...prev.businessRules,
        whitelist: prev.businessRules.whitelist.filter((_, i) => i !== index)
      }
    }));
  }, []);

  const addCustomKeyword = useCallback(() => {
    if (newCustomKeyword.trim()) {
      setAutomationSettings(prev => ({
        ...prev,
        businessRules: {
          ...prev.businessRules,
          customKeywords: [...prev.businessRules.customKeywords, newCustomKeyword.trim()]
        }
      }));
      setNewCustomKeyword('');
    }
  }, [newCustomKeyword]);

  const removeCustomKeyword = useCallback((index) => {
    setAutomationSettings(prev => ({
      ...prev,
      businessRules: {
        ...prev.businessRules,
        customKeywords: prev.businessRules.customKeywords.filter((_, i) => i !== index)
      }
    }));
  }, []);

  const addHotLeadKeyword = useCallback(() => {
    const input = document.getElementById('hotLeadKeywordInput');
    if (input && input.value.trim()) {
      const newKeyword = input.value.trim();
      if (!aiSettings.hotLeadKeywords.includes(newKeyword)) {
        setAiSettings(prev => ({
          ...prev,
          hotLeadKeywords: [...prev.hotLeadKeywords, newKeyword]
        }));
      }
      input.value = '';
    }
  }, [aiSettings.hotLeadKeywords]);

  const removeHotLeadKeyword = useCallback((index) => {
    setAiSettings(prev => ({
      ...prev,
      hotLeadKeywords: prev.hotLeadKeywords.filter((_, i) => i !== index)
    }));
  }, []);

  // 📊 COMPLETE DASHBOARD TAB - FULLY RESTORED
  const DashboardTab = () => (
    <div className="space-y-6">
      {/* STREAMLINED Header - Gmail Status + Check Emails + Last Refresh */}
      {gmailConnection ? (
        <div className="bg-white/10 backdrop-blur-lg rounded-2xl border border-white/20 p-6 mb-6">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <div className="p-3 rounded-xl bg-green-500/20 backdrop-blur-sm border border-green-500/30">
                <CheckCircle className="w-6 h-6 text-green-400" />
              </div>
              <div>
                <h3 className="font-semibold text-xl text-white">Gmail AI Connected</h3>
                <p className="text-gray-300">
                  {gmailConnection.email} • Auto-monitoring active
                </p>
              </div>
            </div>
            <div className="flex items-center gap-4">
              <span className="text-sm text-gray-400">
                Last refreshed: {lastRefresh.toLocaleTimeString()}
              </span>
              <Button 
                onClick={() => checkGmailEmails(false)}
                disabled={gmailLoading}
                className="flex items-center gap-2 bg-blue-600 hover:bg-blue-700 text-white"
              >
                {gmailLoading ? (
                  <RefreshCw className="w-4 h-4 animate-spin" />
                ) : (
                  <RefreshCw className="w-4 h-4" />
                )}
                Check Emails
              </Button>
              <Button 
                size="sm" 
                variant="outline"
                onClick={() => window.open('/email/test', '_blank')}
                className="bg-white/10 border-white/20 text-white hover:bg-white/20 backdrop-blur-lg"
              >
                <ExternalLink className="w-4 h-4 mr-1" />
                Advanced Testing
              </Button>
            </div>
          </div>
        </div>
      ) : (
        <div className="bg-white/10 backdrop-blur-lg rounded-2xl border border-white/20 p-6 mb-6">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <div className="p-3 rounded-xl bg-yellow-500/20 backdrop-blur-sm border border-yellow-500/30">
                <AlertCircle className="w-6 h-6 text-yellow-400" />
              </div>
              <div>
                <h3 className="font-semibold text-xl text-white">Gmail AI Setup Required</h3>
                <p className="text-gray-300">
                  Connect Gmail for AI-powered email automation
                </p>
              </div>
            </div>
            <Button onClick={connectGmail} className="flex items-center gap-2 bg-blue-600 hover:bg-blue-700 text-white">
              <LinkIcon className="w-4 h-4" />
              Connect Gmail
            </Button>
          </div>
        </div>
      )}

      {/* Metrics - Larger and cleaner */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
        <div className="bg-white/10 backdrop-blur-lg rounded-2xl border border-white/20 p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-300">Total Conversations</p>
              <p className="text-3xl font-bold text-white">{stats.totalConversations}</p>
            </div>
            <div className="p-3 rounded-xl bg-blue-500/20">
              <MessageSquare className="w-8 h-8 text-blue-400" />
            </div>
          </div>
        </div>

        <div className="bg-white/10 backdrop-blur-lg rounded-2xl border border-white/20 p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-300">Active Today</p>
              <p className="text-3xl font-bold text-white">{stats.activeToday}</p>
            </div>
            <div className="p-3 rounded-xl bg-green-500/20">
              <Zap className="w-8 h-8 text-green-400" />
            </div>
          </div>
        </div>

        <div className="bg-white/10 backdrop-blur-lg rounded-2xl border border-white/20 p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-300">Response Rate</p>
              <p className="text-3xl font-bold text-white">{stats.responseRate}%</p>
            </div>
            <div className="p-3 rounded-xl bg-purple-500/20">
              <Target className="w-8 h-8 text-purple-400" />
            </div>
          </div>
        </div>

        <div className="bg-white/10 backdrop-blur-lg rounded-2xl border border-white/20 p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-300">Avg Response Time</p>
              <p className="text-3xl font-bold text-white">{stats.avgResponseTime}m</p>
            </div>
            <div className="p-3 rounded-xl bg-orange-500/20">
              <Clock className="w-8 h-8 text-orange-400" />
            </div>
          </div>
        </div>
      </div>

      {/* IMPROVED Layout: 40% Conversations / 60% Email Preview - FULLY RESTORED */}
      <div className="grid grid-cols-1 lg:grid-cols-5 gap-6">
        {/* CONVERSATIONS LIST - NOW 40% WIDTH (2/5 columns) */}
        <div className="lg:col-span-2">
          <div className="bg-white/10 backdrop-blur-lg rounded-2xl border border-white/20 h-full flex flex-col">
            <div className="p-6 pb-4 flex-shrink-0">
              <div className="flex items-center gap-3 text-xl font-semibold text-white mb-2">
                <Inbox className="w-6 h-6 text-blue-400" />
                Email Conversations ({gmailEmails.length + conversations.length})
              </div>
              <p className="text-base text-gray-300">
                Real-time Gmail monitoring with AI responses
              </p>
            </div>
            <div className="flex-1 flex flex-col overflow-hidden">
              {/* Loading State */}
              {(loading || gmailLoading) && (
                <div className="flex items-center justify-center py-16 flex-1">
                  <div className="flex items-center gap-4">
                    <RefreshCw className="w-8 h-8 animate-spin text-blue-400" />
                    <span className="text-lg text-gray-300 font-medium">Loading conversations...</span>
                  </div>
                </div>
              )}

              {/* Gmail Emails */}
              {gmailEmails.length > 0 && !loading && (
                <div className="flex-1 flex flex-col">
                  <div className="px-6 py-4 bg-blue-500/20 border-b border-white/10 flex-shrink-0">
                    <div className="flex items-center gap-3">
                      <Globe className="w-5 h-5 text-blue-400" />
                      <span className="text-sm font-semibold text-blue-300 uppercase tracking-wide">
                        Gmail AI ({gmailEmails.length})
                      </span>
                      <div className="px-2 py-1 rounded-full bg-blue-400/20 text-blue-300 text-xs font-medium">
                        Live Monitoring
                      </div>
                    </div>
                  </div>
                  <div className="space-y-0 flex-1 overflow-y-auto">
                    {gmailEmails.map((email) => (
                      <div
                        key={email.id}
                        className={`p-6 border-b border-white/10 cursor-pointer transition-all duration-200 hover:bg-white/10 hover:border-l-4 hover:border-l-blue-400 ${
                          selectedGmailEmail?.id === email.id 
                            ? 'bg-blue-500/20 border-l-4 border-l-blue-400 shadow-lg' 
                            : ''
                        }`}
                        onClick={() => {
                          setSelectedGmailEmail(email);
                          setSelectedConversation(null);
                        }}
                      >
                        <div className="flex items-center justify-between mb-3">
                          <h4 className="font-semibold text-lg text-white truncate">
                            {email.fromName || email.fromEmail}
                          </h4>
                          <div className="px-3 py-1 rounded-full bg-blue-500/20 text-blue-300 text-xs font-medium">
                            Gmail
                          </div>
                        </div>
                        <p className="text-sm text-gray-300 font-medium mb-2 line-clamp-1">
                          {email.subject}
                        </p>
                        <div className="flex items-center justify-between">
                          <p className="text-xs text-gray-400">
                            Received: {email.receivedTime}
                          </p>
                          {selectedGmailEmail?.id === email.id && (
                            <div className="px-2 py-1 rounded-full bg-blue-400/30 text-blue-300 text-xs font-medium border border-blue-400/50">
                              Selected
                            </div>
                          )}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* Empty State */}
              {conversations.length === 0 && gmailEmails.length === 0 && !loading && (
                <div className="p-12 text-center flex-1 flex flex-col items-center justify-center">
                  <div className="w-24 h-24 mx-auto mb-6 bg-white/10 rounded-full flex items-center justify-center backdrop-blur-sm">
                    <Mail className="w-12 h-12 text-gray-400" />
                  </div>
                  <h3 className="text-lg font-semibold text-white mb-2">No email conversations yet</h3>
                  <p className="text-gray-300 mb-4 max-w-sm mx-auto">
                    {gmailConnection 
                      ? 'New emails will appear automatically when received'
                      : 'Connect your Gmail account to start receiving and managing conversations'
                    }
                  </p>
                  {!gmailConnection && (
                    <Button onClick={connectGmail} className="flex items-center gap-2 bg-blue-600 hover:bg-blue-700 text-white">
                      <LinkIcon className="w-4 h-4" />
                      Connect Gmail Now
                    </Button>
                  )}
                </div>
              )}
            </div>
          </div>
        </div>

        {/* EMAIL PREVIEW/RESPONSE - NOW 60% WIDTH (3/5 columns) - FULLY RESTORED */}
        <div className="lg:col-span-3 space-y-6">
          {selectedGmailEmail ? (
            <div className="bg-white/10 backdrop-blur-lg rounded-2xl border border-white/20 h-full">
              <div className="p-6 pb-4">
                <div className="flex items-center gap-3 text-lg font-semibold text-white mb-2">
                  <Globe className="w-5 h-5 text-blue-400" />
                  <div className="flex-1 min-w-0">
                    <div className="text-white truncate">
                      {selectedGmailEmail.fromName || selectedGmailEmail.fromEmail}
                    </div>
                  </div>
                </div>
                <p className="text-sm text-gray-300">
                  <span className="font-medium">Subject:</span> {selectedGmailEmail.subject}
                </p>
              </div>
              <div className="px-6 pb-6 space-y-6">
                {/* Email Content Preview - Much more space now! */}
                <div className="bg-white/5 rounded-xl p-6 border border-white/10 backdrop-blur-sm">
                  <p className="text-sm font-medium text-gray-300 mb-4 flex items-center gap-2">
                    <Mail className="w-4 h-4" />
                    Email Content:
                  </p>
                  <div className="max-h-64 overflow-y-auto text-sm text-gray-300 leading-relaxed space-y-2">
                    {selectedGmailEmail.fullBody || selectedGmailEmail.body || 'No content preview available'}
                  </div>
                </div>

                {/* Action Buttons - Larger and better spaced */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <Button 
                    onClick={() => sendAIResponse(selectedGmailEmail.id, true)}
                    disabled={responding}
                    variant="outline"
                    className="h-14 flex items-center justify-center gap-3 text-base bg-white/10 border-white/20 text-white hover:bg-white/20 backdrop-blur-lg"
                  >
                    <Eye className="w-5 h-5" />
                    Preview AI Response
                  </Button>
                  <Button 
                    onClick={() => sendAIResponse(selectedGmailEmail.id, false)}
                    disabled={responding}
                    className="h-14 flex items-center justify-center gap-3 text-base bg-blue-600 hover:bg-blue-700 text-white"
                  >
                    {responding ? (
                      <>
                        <RefreshCw className="w-5 h-5 animate-spin" />
                        Sending Response...
                      </>
                    ) : (
                      <>
                        <Send className="w-5 h-5" />
                        Send AI Response
                      </>
                    )}
                  </Button>
                </div>

                {/* Info Box - More detailed */}
                <div className="bg-blue-500/20 border border-blue-500/30 rounded-xl p-6 backdrop-blur-sm">
                  <div className="flex items-start gap-4">
                    <div className="w-10 h-10 bg-blue-500/30 rounded-full flex items-center justify-center flex-shrink-0">
                      <Bot className="w-5 h-5 text-blue-300" />
                    </div>
                    <div className="flex-1">
                      <p className="text-base font-medium text-blue-200 mb-2">AI Response Ready</p>
                      <p className="text-sm text-blue-300 leading-relaxed">
                        The AI will generate a professional response based on your business knowledge and communication settings. 
                        You can preview the response before sending to ensure it meets your standards.
                      </p>
                    </div>
                  </div>
                </div>

                {/* Email metadata - More space for details */}
                <div className="bg-white/5 rounded-xl p-4 space-y-3 backdrop-blur-sm border border-white/10">
                  <h4 className="font-medium text-white">Email Details</h4>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                    <div>
                      <span className="font-medium text-gray-400">From:</span>
                      <p className="text-gray-300">{selectedGmailEmail.fromEmail}</p>
                    </div>
                    <div>
                      <span className="font-medium text-gray-400">Received:</span>
                      <p className="text-gray-300">{selectedGmailEmail.receivedTime}</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          ) : (
            /* Empty Selection State - Better use of space */
            <div className="bg-white/10 backdrop-blur-lg rounded-2xl border border-white/20 h-full">
              <div className="p-16 text-center flex flex-col items-center justify-center h-full min-h-[500px]">
                <div className="w-24 h-24 mx-auto mb-8 bg-white/10 rounded-full flex items-center justify-center backdrop-blur-sm">
                  <MessageSquare className="w-12 h-12 text-gray-400" />
                </div>
                <h3 className="text-xl font-semibold text-white mb-3">Select a conversation</h3>
                <p className="text-gray-300 mb-8 max-w-md leading-relaxed">
                  Choose an email conversation from the list to view details and send AI responses. 
                  The AI will generate professional responses based on your business knowledge.
                </p>
                <div className="grid grid-cols-1 gap-3 text-sm text-gray-400 max-w-sm">
                  <div className="flex items-center gap-3">
                    <CheckCircle className="w-4 h-4 text-green-400 flex-shrink-0" />
                    <span>Preview AI responses before sending</span>
                  </div>
                  <div className="flex items-center gap-3">
                    <CheckCircle className="w-4 h-4 text-green-400 flex-shrink-0" />
                    <span>Automatic professional formatting</span>
                  </div>
                  <div className="flex items-center gap-3">
                    <CheckCircle className="w-4 h-4 text-green-400 flex-shrink-0" />
                    <span>Real-time conversation monitoring</span>
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );

  // 🎯 ENHANCED AI SETTINGS TAB - With all new sections
  const AISettingsTab = () => (
    <div className="space-y-6">
      {/* Business Profile - FIXED inputs using refs */}
      <div className="bg-white/10 backdrop-blur-lg rounded-2xl border border-white/20 p-6">
        <div className="flex items-center gap-2 mb-4">
          <Building className="w-5 h-5 text-blue-400" />
          <h3 className="text-lg font-semibold text-white">Business Profile</h3>
        </div>
        <p className="text-gray-300 mb-6">Tell the AI about your business</p>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div>
            <label className="block text-sm font-medium mb-2 text-gray-300">Business Name</label>
            <input
              type="text"
              defaultValue={businessProfileRef.current.name}
              onChange={(e) => {
                businessProfileRef.current.name = e.target.value;
              }}
              placeholder="Your Business Name"
              className="w-full px-3 py-2 bg-white/10 border border-white/20 rounded-md text-white placeholder-gray-400 focus:border-blue-400 focus:outline-none"
            />
          </div>
          <div>
            <label className="block text-sm font-medium mb-2 text-gray-300">Industry</label>
            <input
              type="text"
              defaultValue={businessProfileRef.current.industry}
              onChange={(e) => {
                businessProfileRef.current.industry = e.target.value;
              }}
              placeholder="e.g., Real Estate, Consulting"
              className="w-full px-3 py-2 bg-white/10 border border-white/20 rounded-md text-white placeholder-gray-400 focus:border-blue-400 focus:outline-none"
            />
          </div>
          <div>
            <label className="block text-sm font-medium mb-2 text-gray-300">Expertise</label>
            <input
              type="text"
              defaultValue={businessProfileRef.current.expertise}
              onChange={(e) => {
                businessProfileRef.current.expertise = e.target.value;
              }}
              placeholder="What you specialize in"
              className="w-full px-3 py-2 bg-white/10 border border-white/20 rounded-md text-white placeholder-gray-400 focus:border-blue-400 focus:outline-none"
            />
          </div>
        </div>
      </div>

      {/* Communication Tone - Normal state management (no focus issues here) */}
      <div className="bg-white/10 backdrop-blur-lg rounded-2xl border border-white/20 p-6">
        <div className="flex items-center gap-2 mb-4">
          <MessageCircle className="w-5 h-5 text-blue-400" />
          <h3 className="text-lg font-semibold text-white">Communication Tone</h3>
        </div>
        <p className="text-gray-300 mb-6">How should the AI communicate with customers?</p>
        <div>
          <label className="block text-sm font-medium mb-3 text-gray-300">Select Tone</label>
          <div className="grid grid-cols-3 gap-3">
            {['professional', 'casual', 'formal'].map(tone => (
              <Button
                key={tone}
                variant={aiSettings.communicationTone === tone ? "default" : "outline"}
                onClick={() => handleAiSettingsChange('communicationTone', tone)}
                className={`capitalize ${
                  aiSettings.communicationTone === tone
                    ? 'bg-blue-600 hover:bg-blue-700 text-white border-blue-600'
                    : 'bg-white/10 border-white/20 text-white hover:bg-white/20'
                }`}
              >
                {tone}
              </Button>
            ))}
          </div>
        </div>
      </div>

      {/* 🎯 NEW: AI Behavior Settings */}
      <div className="bg-white/10 backdrop-blur-lg rounded-2xl border border-white/20 p-6">
        <div className="flex items-center gap-2 mb-4">
          <Target className="w-5 h-5 text-blue-400" />
          <h3 className="text-lg font-semibold text-white">AI Behavior Settings</h3>
        </div>
        <p className="text-gray-300 mb-6">Configure how the AI should behave and respond to customers</p>
        
        {/* Custom AI Instructions */}
        <div className="mb-6">
          <label className="block text-sm font-medium mb-2 text-gray-300">
            Custom AI Instructions
          </label>
          <textarea
            value={aiSettings.customInstructions || ''}
            onChange={(e) => handleAiSettingsChange('customInstructions', e.target.value)}
            rows={6}
            className="w-full px-3 py-2 bg-white/10 border border-white/20 rounded-md text-white placeholder-gray-400 focus:border-blue-400 focus:outline-none"
            placeholder="Example instructions:
- Always ask for phone numbers when customers show interest
- Be enthusiastic about our services and pricing  
- Try to schedule appointments within 24 hours
- If someone mentions competitors, highlight our unique advantages
- Always end responses with a call-to-action
- For urgent inquiries, offer immediate callback options"
          />
          <p className="text-xs text-gray-400 mt-1">
            Specific instructions for how the AI should behave and respond to customers
          </p>
        </div>

        {/* Response Goals */}
        <div className="mb-6">
          <label className="block text-sm font-medium mb-3 text-gray-300">
            Response Goals
          </label>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
            {[
              { key: 'alwaysAskPhone', label: 'Always ask for phone numbers', desc: 'Request contact info from interested customers' },
              { key: 'scheduleWithin24h', label: 'Schedule within 24 hours', desc: 'Try to book appointments quickly' },
              { key: 'highlightAdvantages', label: 'Highlight advantages', desc: 'Emphasize benefits over competitors' },
              { key: 'includeCallToAction', label: 'Include call-to-action', desc: 'Always end with next steps' },
              { key: 'offerCallbackUrgent', label: 'Offer callback for urgent', desc: 'Provide immediate response options' }
            ].map(({ key, label, desc }) => (
              <div key={key} className="flex items-start space-x-3 p-3 bg-white/5 border border-white/10 rounded-lg">
                <input
                  type="checkbox"
                  checked={aiSettings[key] || false}
                  onChange={(e) => handleAiSettingsChange(key, e.target.checked)}
                  className="mt-1 rounded border-white/30 bg-white/10 text-blue-600 focus:ring-blue-500"
                />
                <div>
                  <label className="text-sm font-medium text-white">{label}</label>
                  <p className="text-xs text-gray-400">{desc}</p>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* ⚙️ NEW: AI Model Settings */}
      <div className="bg-white/10 backdrop-blur-lg rounded-2xl border border-white/20 p-6">
        <div className="flex items-center gap-2 mb-4">
          <Settings className="w-5 h-5 text-blue-400" />
          <h3 className="text-lg font-semibold text-white">AI Model Settings</h3>
        </div>
        <p className="text-gray-300 mb-6">Configure AI model behavior and performance</p>
        
        {/* AI Model Selection */}
        <div className="mb-6">
          <label className="block text-sm font-medium mb-2 text-gray-300">
            AI Model
          </label>
          <select
            value={aiSettings.aiModel || 'gpt-4o-mini'}
            onChange={(e) => handleAiSettingsChange('aiModel', e.target.value)}
            className="w-full px-3 py-2 bg-white/10 border border-white/20 rounded-md text-white focus:border-blue-400 focus:outline-none"
          >
            <option value="gpt-4o-mini">GPT-4o Mini (Fast & Cost-effective)</option>
            <option value="gpt-4o">GPT-4o (Most Advanced)</option>
            <option value="gpt-4">GPT-4 (Balanced)</option>
            <option value="gpt-3.5-turbo">GPT-3.5 Turbo (Budget)</option>
          </select>
          <p className="text-xs text-gray-400 mt-1">
            Higher models cost more but provide better responses
          </p>
        </div>

        {/* Creativity Level */}
        <div className="mb-6">
          <label className="block text-sm font-medium mb-2 text-gray-300">
            Creativity Level: {aiSettings.creativity || 0.7}
          </label>
          <input
            type="range"
            min="0.1"
            max="1.0"
            step="0.1"
            value={aiSettings.creativity || 0.7}
            onChange={(e) => handleAiSettingsChange('creativity', parseFloat(e.target.value))}
            className="w-full h-2 bg-white/20 rounded-lg appearance-none cursor-pointer"
          />
          <div className="flex justify-between text-xs text-gray-400 mt-1">
            <span>Consistent (0.1)</span>
            <span>Balanced (0.7)</span>
            <span>Creative (1.0)</span>
          </div>
        </div>

        {/* Response Length */}
        <div className="mb-6">
          <label className="block text-sm font-medium mb-2 text-gray-300">
            Response Length
          </label>
          <div className="grid grid-cols-3 gap-3">
            {[
              { value: 'short', label: 'Short', tokens: '150' },
              { value: 'medium', label: 'Medium', tokens: '350' },
              { value: 'long', label: 'Long', tokens: '500' }
            ].map((length) => (
              <Button
                key={length.value}
                variant={aiSettings.responseLength === length.value ? "default" : "outline"}
                onClick={() => handleAiSettingsChange('responseLength', length.value)}
                className={`${
                  aiSettings.responseLength === length.value
                    ? 'bg-blue-600 hover:bg-blue-700 text-white border-blue-600'
                    : 'bg-white/10 border-white/20 text-white hover:bg-white/20'
                }`}
              >
                <div className="text-center">
                  <div className="font-medium">{length.label}</div>
                  <div className="text-xs opacity-75">{length.tokens} tokens</div>
                </div>
              </Button>
            ))}
          </div>
        </div>

        {/* AI Features */}
        <div className="mb-6">
          <label className="block text-sm font-medium mb-3 text-gray-300">
            AI Features
          </label>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
            <div className="flex items-start space-x-3 p-3 bg-white/5 border border-white/10 rounded-lg">
              <input
                type="checkbox"
                checked={aiSettings.enableHotLeadAnalysis !== false}
                onChange={(e) => handleAiSettingsChange('enableHotLeadAnalysis', e.target.checked)}
                className="mt-1 rounded border-white/30 bg-white/10 text-blue-600 focus:ring-blue-500"
              />
              <div>
                <label className="text-sm font-medium text-white">Enable Hot Lead Analysis</label>
                <p className="text-xs text-gray-400">AI analyzes messages for buying intent</p>
              </div>
            </div>
            <div className="flex items-start space-x-3 p-3 bg-white/5 border border-white/10 rounded-lg">
              <input
                type="checkbox"
                checked={aiSettings.enableAIResponses !== false}
                onChange={(e) => handleAiSettingsChange('enableAIResponses', e.target.checked)}
                className="mt-1 rounded border-white/30 bg-white/10 text-blue-600 focus:ring-blue-500"
              />
              <div>
                <label className="text-sm font-medium text-white">Enable AI Responses</label>
                <p className="text-xs text-gray-400">Allow AI to generate automatic responses</p>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* FIXED KNOWLEDGE BASE - Using ref to prevent re-renders */}
      <div className="bg-white/10 backdrop-blur-lg rounded-2xl border border-white/20 p-6">
        <div className="flex items-center gap-2 mb-4">
          <BookOpen className="w-5 h-5 text-blue-400" />
          <h3 className="text-lg font-semibold text-white">Business Knowledge Base</h3>
        </div>
        <p className="text-gray-300 mb-6">
          Add specific information about your services, pricing, processes, and policies so the AI can answer customer questions accurately
        </p>
        <div>
          <label className="block text-sm font-medium mb-3 text-gray-300">
            Business Information (200-1000 characters recommended)
          </label>
          <textarea
            defaultValue={knowledgeBaseRef.current}
            onChange={(e) => {
              knowledgeBaseRef.current = e.target.value;
            }}
            placeholder="Example: We offer full-service real estate including buying, selling, and property management in downtown and suburban areas. Our process includes free market analysis, professional photography, and 24/7 client support. We charge 3% commission for sellers and our buyers get services free. We specialize in first-time homebuyers and luxury properties over $500k. Our office hours are Monday-Friday 9am-6pm, weekends by appointment. We serve the Greater Metro area and surrounding counties..."
            rows={8}
            maxLength={2000}
            className="w-full px-3 py-2 bg-white/10 border border-white/20 rounded-md text-white placeholder-gray-400 focus:border-blue-400 focus:outline-none resize-none"
          />
          <div className="flex justify-between items-center mt-2">
            <p className="text-xs text-gray-400">
              Include: services offered, pricing, coverage areas, processes, specialties, contact hours
            </p>
            <p className="text-xs text-gray-500">
              {knowledgeBaseRef.current.length}/2000 characters
            </p>
          </div>
        </div>
        
        {knowledgeBaseRef.current.length > 0 && (
          <div className="bg-green-500/20 border border-green-500/30 rounded-lg p-3 mt-4">
            <p className="text-sm text-green-300 font-medium">✅ Knowledge Base Active</p>
            <p className="text-xs text-green-400 mt-1">
              AI can now answer specific questions about your business based on this information
            </p>
          </div>
        )}
        
        {knowledgeBaseRef.current.length === 0 && (
          <div className="bg-yellow-500/20 border border-yellow-500/30 rounded-lg p-3 mt-4">
            <p className="text-sm text-yellow-300 font-medium">⚠️ Knowledge Base Empty</p>
            <p className="text-xs text-yellow-400 mt-1">
              AI will give generic responses without business-specific knowledge
            </p>
          </div>
        )}
      </div>

      {/* Hot Lead Keywords - Normal state management */}
      <div className="bg-white/10 backdrop-blur-lg rounded-2xl border border-white/20 p-6">
        <h3 className="text-lg font-semibold text-white mb-2">Hot Lead Keywords</h3>
        <p className="text-gray-300 mb-6">Keywords that indicate urgent, high-priority leads</p>
        <div className="space-y-3">
          <div className="flex flex-wrap gap-2">
            {aiSettings.hotLeadKeywords.map((keyword, index) => (
              <div 
                key={`keyword-${index}-${keyword}`}
                onClick={() => removeHotLeadKeyword(index)}
                className="cursor-pointer flex items-center gap-1 px-3 py-1 rounded-full bg-white/20 border border-white/30 text-white hover:bg-red-500/20 hover:border-red-500/30 transition-colors"
              >
                {keyword}
                <X className="w-3 h-3" />
              </div>
            ))}
          </div>
          <div className="flex gap-2">
            <Input
              id="hotLeadKeywordInput"
              placeholder="Add keyword (press Enter)"
              onKeyPress={(e) => {
                if (e.key === 'Enter') {
                  addHotLeadKeyword();
                }
              }}
              className="bg-white/10 border-white/20 text-white placeholder-gray-400 focus:border-blue-400"
            />
            <Button onClick={addHotLeadKeyword} size="sm" className="bg-blue-600 hover:bg-blue-700 text-white">Add</Button>
          </div>
        </div>
      </div>

      {/* Behavior Toggles - Normal state management */}
      <div className="bg-white/10 backdrop-blur-lg rounded-2xl border border-white/20 p-6">
        <h3 className="text-lg font-semibold text-white mb-2">Behavior Toggles</h3>
        <p className="text-gray-300 mb-6">Control AI behavior and alerts</p>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {[
            { key: 'includeAvailability', label: 'Include Availability', desc: 'Mention scheduling availability' },
            { key: 'askQualifyingQuestions', label: 'Ask Qualifying Questions', desc: 'AI asks follow-up questions' },
            { key: 'hotLeadAlerts', label: 'Hot Lead Alerts', desc: 'Get notified about urgent inquiries' },
            { key: 'smsLeadAlerts', label: 'SMS Lead Alerts', desc: 'Send SMS for hot leads' }
          ].map(({ key, label, desc }) => (
            <div key={`behavior-${key}`} className="flex items-start space-x-3 p-3 bg-white/5 border border-white/10 rounded-lg">
              <input
                type="checkbox"
                checked={aiSettings.behaviors[key]}
                onChange={(e) => handleAiBehaviorChange(key, e.target.checked)}
                className="mt-1 rounded border-white/30 bg-white/10 text-blue-600 focus:ring-blue-500"
              />
              <div>
                <label className="text-sm font-medium text-white">{label}</label>
                <p className="text-xs text-gray-400">{desc}</p>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* 🧪 NEW: AI Testing Panel */}
      {testResult && (
        <div className="bg-white/10 backdrop-blur-lg rounded-2xl border border-white/20 p-6">
          <h3 className="text-lg font-semibold text-white mb-4">🧪 AI Test Results</h3>
          
          {/* Hot Lead Analysis */}
          <div className="mb-4 p-3 bg-white/5 border border-white/10 rounded-lg">
            <div className="flex items-center justify-between mb-2">
              <span className="text-sm font-medium text-gray-300">Hot Lead Score</span>
              <span className={`text-sm font-bold ${testResult.hotLead?.score > 60 ? 'text-red-400' : 'text-gray-400'}`}>
                {testResult.hotLead?.score || 0}/100
              </span>
            </div>
            <div className={`text-xs px-2 py-1 rounded ${testResult.hotLead?.isHotLead ? 'bg-red-500/20 text-red-300' : 'bg-gray-500/20 text-gray-400'}`}>
              {testResult.hotLead?.isHotLead ? '🔥 HOT LEAD' : '❄️ Regular Lead'}
            </div>
            <p className="text-xs text-gray-400 mt-1">{testResult.hotLead?.reasoning}</p>
          </div>

          {/* AI Response */}
          <div className="mb-4">
            <label className="block text-sm font-medium text-gray-300 mb-2">AI Response</label>
            <div className="bg-blue-500/10 border border-blue-500/20 rounded-lg p-3 text-sm text-blue-200">
              {testResult.response}
            </div>
          </div>

          {/* Performance Metrics */}
          <div className="grid grid-cols-2 md:grid-cols-4 gap-3 text-xs">
            <div className="bg-white/5 p-2 rounded border border-white/10">
              <div className="font-medium text-gray-300">Model</div>
              <div className="text-gray-400">{testResult.metadata?.model || aiSettings.aiModel}</div>
            </div>
            <div className="bg-white/5 p-2 rounded border border-white/10">
              <div className="font-medium text-gray-300">Tokens</div>
              <div className="text-gray-400">{testResult.metadata?.tokensUsed || 0}</div>
            </div>
            <div className="bg-white/5 p-2 rounded border border-white/10">
              <div className="font-medium text-gray-300">Knowledge Base</div>
              <div className="text-gray-400">{testResult.metadata?.knowledgeBaseUsed ? '✅ Used' : '❌ Not Used'}</div>
            </div>
            <div className="bg-white/5 p-2 rounded border border-white/10">
              <div className="font-medium text-gray-300">Temperature</div>
              <div className="text-gray-400">{aiSettings.creativity || 0.7}</div>
            </div>
          </div>
        </div>
      )}

      {/* 📊 NEW: Current Settings Summary */}
      <div className="bg-blue-500/10 backdrop-blur-lg rounded-2xl border border-blue-500/20 p-6">
        <h3 className="text-lg font-semibold text-blue-200 mb-3">⚙️ Current AI Configuration</h3>
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
          <div className="flex justify-between">
            <span className="text-blue-300">Model:</span>
            <span className="font-medium text-blue-200">{aiSettings.aiModel || 'gpt-4o-mini'}</span>
          </div>
          <div className="flex justify-between">
            <span className="text-blue-300">Creativity:</span>
            <span className="font-medium text-blue-200">{aiSettings.creativity || 0.7}</span>
          </div>
          <div className="flex justify-between">
            <span className="text-blue-300">Length:</span>
            <span className="font-medium text-blue-200 capitalize">{aiSettings.responseLength || 'medium'}</span>
          </div>
          <div className="flex justify-between">
            <span className="text-blue-300">Hot Leads:</span>
            <span className={`font-medium ${aiSettings.enableHotLeadAnalysis !== false ? 'text-green-400' : 'text-red-400'}`}>
              {aiSettings.enableHotLeadAnalysis !== false ? 'ON' : 'OFF'}
            </span>
          </div>
        </div>
      </div>

      {/* Save and Test Actions */}
      <div className="flex gap-4 pt-4">
        <Button
          onClick={testAIResponse}
          disabled={testing}
          className="bg-green-600 hover:bg-green-700 text-white flex items-center gap-2"
        >
          {testing ? <RefreshCw className="w-4 h-4 animate-spin" /> : <Zap className="w-4 h-4" />}
          {testing ? 'Testing...' : 'Test AI Response'}
        </Button>
        <Button
          onClick={saveAllSettings}
          disabled={saving}
          className="bg-blue-600 hover:bg-blue-700 text-white flex items-center gap-2"
        >
          {saving ? <RefreshCw className="w-4 h-4 animate-spin" /> : <CheckCircle className="w-4 h-4" />}
          {saving ? 'Saving...' : 'Save All Settings'}
        </Button>
      </div>
    </div>
  );

  // 🔧 COMPLETE AUTOMATION TAB - FULLY RESTORED
  const AutomationTab = () => (
    <div className="space-y-6">
      {/* Response Control */}
      <div className="bg-white/10 backdrop-blur-lg rounded-2xl border border-white/20 p-6">
        <div className="flex items-center gap-2 mb-4">
          <Bot className="w-5 h-5 text-blue-400" />
          <h3 className="text-lg font-semibold text-white">Response Control</h3>
        </div>
        <p className="text-gray-300 mb-6">Configure when and how AI responds</p>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {[
            { key: 'aiResponses', label: 'AI Responses', desc: 'Enable AI-generated responses' },
            { key: 'autoSend', label: 'Auto-Send', desc: 'Automatically send AI responses' },
            { key: 'businessHours', label: 'Business Hours', desc: 'Only respond during business hours' },
            { key: 'urgentPriority', label: 'Urgent Priority', desc: 'Prioritize urgent emails' }
          ].map(({ key, label, desc }) => (
            <div key={`response-${key}`} className="flex items-start space-x-3 p-3 bg-white/5 border border-white/10 rounded-lg">
              <input
                type="checkbox"
                checked={automationSettings.responseControl[key]}
                onChange={(e) => handleAutomationControlChange(key, e.target.checked)}
                className="mt-1 rounded border-white/30 bg-white/10 text-blue-600 focus:ring-blue-500"
              />
              <div>
                <label className="text-sm font-medium text-white">{label}</label>
                <p className="text-xs text-gray-400">{desc}</p>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Email Filtering */}
      <div className="bg-white/10 backdrop-blur-lg rounded-2xl border border-white/20 p-6">
        <div className="flex items-center gap-2 mb-4">
          <Filter className="w-5 h-5 text-blue-400" />
          <h3 className="text-lg font-semibold text-white">Email Filtering</h3>
        </div>
        <p className="text-gray-300 mb-6">Automatically filter emails to focus on real inquiries</p>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {[
            { key: 'autoArchiveSpam', label: 'Auto-Archive Spam', desc: 'Automatically filter out spam emails' },
            { key: 'blockMassEmails', label: 'Block Mass Emails', desc: 'Filter newsletters and promotional emails' },
            { key: 'personalOnly', label: 'Personal Only', desc: 'Only process emails that appear personal' },
            { key: 'skipAutoGenerated', label: 'Skip Auto-Generated', desc: 'Ignore automated system emails' }
          ].map(({ key, label, desc }) => (
            <div key={`filter-${key}`} className="flex items-start space-x-3 p-3 bg-white/5 border border-white/10 rounded-lg">
              <input
                type="checkbox"
                checked={automationSettings.emailFiltering[key]}
                onChange={(e) => handleEmailFilteringChange(key, e.target.checked)}
                className="mt-1 rounded border-white/30 bg-white/10 text-blue-600 focus:ring-blue-500"
              />
              <div>
                <label className="text-sm font-medium text-white">{label}</label>
                <p className="text-xs text-gray-400">{desc}</p>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Business Rules - FULLY RESTORED */}
      <div className="bg-white/10 backdrop-blur-lg rounded-2xl border border-white/20 p-6">
        <div className="flex items-center gap-2 mb-4">
          <Shield className="w-5 h-5 text-blue-400" />
          <h3 className="text-lg font-semibold text-white">Business Rules</h3>
        </div>
        <p className="text-gray-300 mb-6">Blacklist, whitelist, and custom keywords</p>
        <div className="space-y-6">
          {/* Blacklist */}
          <div>
            <label className="block text-sm font-medium mb-2 text-gray-300">Blacklist (Block these emails/domains)</label>
            <div className="space-y-2">
              <div className="flex flex-wrap gap-2">
                {automationSettings.businessRules.blacklist.map((item, index) => (
                  <div 
                    key={`blacklist-${index}-${item}`}
                    onClick={() => removeFromBlacklist(index)}
                    className="cursor-pointer flex items-center gap-1 px-3 py-1 rounded-full bg-red-500/20 border border-red-500/30 text-red-300 hover:bg-red-500/30 transition-colors"
                  >
                    {item}
                    <X className="w-3 h-3" />
                  </div>
                ))}
              </div>
              <div className="flex gap-2">
                <Input
                  value={newBlacklistItem}
                  onChange={(e) => setNewBlacklistItem(e.target.value)}
                  placeholder="Add email or domain to blacklist"
                  onKeyPress={(e) => e.key === 'Enter' && addToBlacklist()}
                  className="bg-white/10 border-white/20 text-white placeholder-gray-400 focus:border-blue-400"
                />
                <Button onClick={addToBlacklist} size="sm" className="bg-red-600 hover:bg-red-700 text-white">Add</Button>
              </div>
            </div>
          </div>

          {/* Whitelist */}
          <div>
            <label className="block text-sm font-medium mb-2 text-gray-300">Whitelist (Always allow these emails/domains)</label>
            <div className="space-y-2">
              <div className="flex flex-wrap gap-2">
                {automationSettings.businessRules.whitelist.map((item, index) => (
                  <div 
                    key={`whitelist-${index}-${item}`}
                    onClick={() => removeFromWhitelist(index)}
                    className="cursor-pointer flex items-center gap-1 px-3 py-1 rounded-full bg-green-500/20 border border-green-500/30 text-green-300 hover:bg-green-500/30 transition-colors"
                  >
                    {item}
                    <X className="w-3 h-3" />
                  </div>
                ))}
              </div>
              <div className="flex gap-2">
                <Input
                  value={newWhitelistItem}
                  onChange={(e) => setNewWhitelistItem(e.target.value)}
                  placeholder="Add email or domain to whitelist"
                  onKeyPress={(e) => e.key === 'Enter' && addToWhitelist()}
                  className="bg-white/10 border-white/20 text-white placeholder-gray-400 focus:border-blue-400"
                />
                <Button onClick={addToWhitelist} size="sm" className="bg-green-600 hover:bg-green-700 text-white">Add</Button>
              </div>
            </div>
          </div>

          {/* Custom Keywords */}
          <div>
            <label className="block text-sm font-medium mb-2 text-gray-300">Custom Keywords (Additional filtering)</label>
            <div className="space-y-2">
              <div className="flex flex-wrap gap-2">
                {automationSettings.businessRules.customKeywords.map((keyword, index) => (
                  <div 
                    key={`custom-keyword-${index}-${keyword}`}
                    onClick={() => removeCustomKeyword(index)}
                    className="cursor-pointer flex items-center gap-1 px-3 py-1 rounded-full bg-white/20 border border-white/30 text-white hover:bg-purple-500/20 hover:border-purple-500/30 transition-colors"
                  >
                    {keyword}
                    <X className="w-3 h-3" />
                  </div>
                ))}
              </div>
              <div className="flex gap-2">
                <Input
                  value={newCustomKeyword}
                  onChange={(e) => setNewCustomKeyword(e.target.value)}
                  placeholder="Add custom filtering keyword"
                  onKeyPress={(e) => e.key === 'Enter' && addCustomKeyword()}
                  className="bg-white/10 border-white/20 text-white placeholder-gray-400 focus:border-blue-400"
                />
                <Button onClick={addCustomKeyword} size="sm" className="bg-purple-600 hover:bg-purple-700 text-white">Add</Button>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Save Button */}
      <div className="flex justify-end">
        <Button 
          onClick={saveAllSettings} 
          disabled={saving} 
          className="flex items-center gap-2 bg-blue-600 hover:bg-blue-700 text-white"
        >
          {saving ? <RefreshCw className="w-4 h-4 animate-spin" /> : <CheckCircle className="w-4 h-4" />}
          Save Automation Settings
        </Button>
      </div>
    </div>
  );

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-900 via-blue-900 to-purple-900 p-6">
        <div className="animate-pulse space-y-4 max-w-7xl mx-auto">
          <div className="h-8 bg-white/20 rounded-xl w-1/4"></div>
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            {[1,2,3,4].map(i => (
              <div key={i} className="h-24 bg-white/10 rounded-2xl backdrop-blur-lg border border-white/20"></div>
            ))}
          </div>
          <div className="grid grid-cols-1 lg:grid-cols-5 gap-6">
            <div className="lg:col-span-2 h-96 bg-white/10 rounded-2xl backdrop-blur-lg border border-white/20"></div>
            <div className="lg:col-span-3 h-96 bg-white/10 rounded-2xl backdrop-blur-lg border border-white/20"></div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-blue-900 to-purple-900">
      <div className="p-6 max-w-7xl mx-auto">
        {/* Header */}
        <div className="flex items-center gap-4 mb-6">
          <Button 
            variant="outline" 
            onClick={() => router.push('/dashboard')}
            className="flex items-center gap-2 bg-white/10 border-white/20 text-white hover:bg-white/20 backdrop-blur-lg"
          >
            <ArrowLeft className="w-4 h-4" />
            Dashboard
          </Button>
          <div className="flex-1">
            <h1 className="text-2xl font-bold flex items-center gap-2 text-white">
              <Mail className="w-6 h-6" />
              Email AI Manager
            </h1>
            <p className="text-gray-300">Unified Gmail automation with smart AI responses and filtering</p>
          </div>
        </div>

        {/* Tab Navigation */}
        <div className="mb-6">
          <div className="border-b border-white/20">
            <nav className="-mb-px flex space-x-8">
              {tabs.map(tab => {
                const Icon = tab.icon;
                return (
                  <button
                    key={tab.id}
                    onClick={() => setActiveTab(tab.id)}
                    className={`whitespace-nowrap py-2 px-1 border-b-2 font-medium text-sm ${
                      activeTab === tab.id
                        ? 'border-blue-400 text-blue-300'
                        : 'border-transparent text-gray-400 hover:text-gray-300 hover:border-gray-500'
                    }`}
                  >
                    <div className="flex items-center gap-2">
                      <Icon className="w-4 h-4" />
                      {tab.label}
                    </div>
                  </button>
                );
              })}
            </nav>
          </div>
          <div className="mt-2">
            <p className="text-sm text-gray-400">
              {tabs.find(tab => tab.id === activeTab)?.description}
            </p>
          </div>
        </div>

        {/* Tab Content */}
        <div className="tab-content">
          {activeTab === 'dashboard' && <DashboardTab />}
          {activeTab === 'ai-settings' && <AISettingsTab />}
          {activeTab === 'automation' && <AutomationTab />}
          {activeTab === 'connections' && <ConnectionsTab />}
        </div>
      </div>
    </div>
  );
}
